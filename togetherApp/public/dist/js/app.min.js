!function(){var e=angular.module("app",["ngRoute"]);e.config(["$routeProvider",function(e){e.when("/",{templateUrl:"./views/home.html"}).when("/signup",{templateUrl:"views/signup.html"}).when("/home",{templateUrl:"./views/home.html"}).when("/matches",{templateUrl:"./views/matches.html"}).when("/howto",{templateUrl:"./views/howTo.html"}).when("/activities",{templateUrl:"./views/activities.html"}).when("/admin",{templateUrl:"./views/admin.html"}).when("/searchprofiles",{templateUrl:"./views/searchProfiles.html"}).when("/myprofile",{templateUrl:"./views/myProfile.html"}).when("/userdetails/:username",{templateUrl:"./views/detailsUser.html",controller:"UsersController"}).when("/detailsuser",{templateUrl:"./views/detailsUser.html"}).when("/activitydetails/:activityName",{templateUrl:"./views/detailsActivity.html",controller:"ActivitiesController"}).when("/chat",{templateUrl:"./views/chat.html"})}]),e.run(["$rootScope",function(e){e.user={}}]),e.directive("ngEnter",function(){return function(e,t,r){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(r.ngEnter)}),t.preventDefault())})}}),e.directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,r,i){var n=e(i.fileModel),o=n.assign;r.bind("change",function(){t.$apply(function(){o(t,r[0].files[0])})})}}}]),e.service("fileUpload",["$http",function(e){this.uploadFileToUrl=function(t,r){var i=new FormData;i.append("file",t),e.post(r,i,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(){console.log("success")}).error(function(){console.log("error")})}}]),e.directive("editableCheckbox",function(){return{restrict:"E",templateUrl:"./views/editablecheckbox.html"}})}();var Activity=function(e,t,r,i,n,o,s,a,c,l){this.activityName=e,this.zipcode=t,this.street=r,this.number=i,this.description=n,this.dateFrom=o,this.dateUntil=s,this.timestamp=a,this.username=c,this.matches=l};!function(){"use strict";var e=function(e){var t=io.connect(window.location.host),r=function(r,i){t.on(r,function(){var r=arguments;e.$apply(function(){i.apply(t,r)})})},i=function(r,i,n){t.emit(r,i,function(){var r=arguments;e.$apply(function(){n.apply(t,r)})})};return{on:r,emit:i,socket:t}};angular.module("app").factory("chatService",["$rootScope",e])}(),function(){"use strict";var e=function(e){var t=function(t){var r="http://localhost:3000/api/"+t;return e.get(r).then(function(e){return e.data})},r=function(t,r){var i="http://localhost:3000/api/"+t+"/"+r;return e.get(i).then(function(e){return e.data})},i=function(t,r){var i="http://localhost:3000/api/"+t+"/userdetail/"+r;return e.get(i).then(function(e){return e.data})},n=function(t,r){var i="http://localhost:3000/api/"+t+"/userdelete/"+r;return e.get(i).then(function(e){return e.data})},o=function(t){return e.get("/user").then(function(e){return e.data})},s=function(t,r){var i="http://localhost:3000/api/"+t+"/activitydetail/"+r;return e.get(i).then(function(e){return e.data})},a=function(t,r){var i="http://localhost:3000/api/"+t+"/activitydelete/"+r;return e.get(i).then(function(e){return e.data})},c=function(){var t="http://localhost:3000/data/noisewords.json";return e.get(t).then(function(e){return e.data})};return{getCollection:t,getByID:r,getItem:o,getDetailsUser:i,deleteUser:n,getDetailsActivity:s,getNoiseWords:c,deleteActivity:a}};angular.module("app").factory("dbService",["$http",e])}(),function(){"use strict";var e=function(){var e=function(e){var t="http://localhost:3000/data/matches.json",r=new XMLHttpRequest;if(r.open("GET",t,!1),r.send(null),200==r.status){for(var i=JSON.parse(r.responseText),n=[],o=[],s=0;s<i.length;s++){var a={user:i[s].user,matches:i[s].matches};n.push(a)}for(var c=0;c<n.length;c++){var l=n[c].user.indexOf(e);0===l&&o.push(n[c].matches)}var u=o[0];return u}};return{getMatches:e}};angular.module("app").factory("matchesService",[e])}(),function(){"use strict";var e=(new Date).toISOString().substring(0,10)+" "+(new Date).toISOString().substring(11,16),t=function(t,r,i,n,o,s){function a(e,t){return t.indexOf(e)}function c(e,t){e=e.replaceAll(".",""),e=e.replaceAll(",",""),e=e.replaceAll("?",""),e=e.replaceAll("!",""),e=e.replaceAll('"',""),e=e.replaceAll("'","");var i=e.split(" "),n="";r.getNoiseWords().then(function(e){for(var r=e.noisewords,o=i.length;o--;)-1==a(i[o].toLowerCase(),r)&&(n+=i[o],n+=" ");n.isEmpty?t("No keywords found.",null):t(null,n)})}function l(e,t){var r=e+"";r.length<2?(r="0"+r,e=r.toString()):e=e.toString(),e.isEmpty?t("No number.",null):t(null,e)}function u(e,t,r){l(e,function(t,r){e=r,t&&console.log(t)}),l(t,function(e,r){t=r,e&&console.log(e)}),e.isEmpty||t.isEmpty?r("No number.",null):r(null,e,t)}function h(e,t){return e.timestamp>t.timestamp?-1:e.timestamp<t.timestamp?1:0}function f(e){for(var t=e[0],r=0,i=1;i<e.length;i++)e[i].matches.length>t.matches.length&&(r=i,t=e[i]);return r}function d(){var e=new google.maps.Map(document.getElementById("map"),{zoom:8,center:{lat:50.8194894,lng:3.2577076}}),t=new google.maps.Geocoder;m(t,e)}function m(e,r){var i=t.arrDetailsActivity.street,n=t.arrDetailsActivity.number,o=t.arrDetailsActivity.zipcode,s=i+" "+n+", "+o;e.geocode({address:s},function(e,t){if(t===google.maps.GeocoderStatus.OK){r.setCenter(e[0].geometry.location);var i="../../images/marker.png";new google.maps.Marker({map:r,position:e[0].geometry.location,icon:i})}else alert("Geocode was not successful for the following reason: "+t)})}function p(){var e=document.getElementsByName("ActivityForm")[0];e.reset()}t.interestedAct=!0,t.nameButton="Interested",t.getActivities=function(){r.getCollection("activities").then(function(r){for(var i=r.activitielist,n=[],o=i.length;o--;)new Date(i[o].untilDate).getTime()>=new Date(e).getTime()&&(i[o].deleted===!1?(t.deleted=!1,n.push(i[o])):t.deleted=!0);t.arrActivities=n})},String.prototype.replaceAll=function(e,t,r){var i,n=this+"",o=-1;if("string"==typeof e){if(!r)return this.split(e).join(t);for(i=e.toLowerCase();-1!==(o=n.toLowerCase().indexOf(e,o>=0?o+t.length:0));)n=n.substring(0,o)+t+n.substring(o+e.length)}return n},t.addActivity=function(){var e=this.activityName,r=this.street,n=this.number,o=this.zipcode,s=this.comment,a=(this.dateFrom,this.dateUntil,(new Date).getTime()),h=this.startTimeHour,f=this.startTimeMin,d=this.endTimeHour,m=this.endTimeMin,v=this.dateFromDay,g=this.dateFromMonth,w=this.dateFromYear.toString(),y=this.dateUntilDay,A=this.dateUntilMonth,U=this.dateUntilYear.toString();u(v,g,function(e,t,r){v=t,g=r,e&&console.log(e)}),u(y,A,function(e,t,r){y=t,A=r,e&&console.log(e)}),new Date(w+"-"+g+"-"+v+" "+h+":"+f).getTime()<=new Date(U+"-"+A+"-"+y+" "+d+":"+m).getTime()?new Date(U+"-"+A+"-"+y+" "+d+":"+m).getTime()>(new Date).getTime()||console.log("Date until can't be before today"):console.log(" Enddate can't be before startdate"),void 0!==r&&void 0!==n&&void 0!==o&&void 0!==s&&void 0!==a&&void 0!==w&&void 0!==g&&void 0!==v&&void 0!==h&&void 0!==f&&void 0!==U&&void 0!==A&&void 0!==y&&void 0!==d&&void 0!==m?60>f&&25>h?(l(h,function(e,t){h=t,e&&console.log(e)}),l(f,function(e,t){f=t,e&&console.log(e)}),2===f.length&&2===h.length?60>m&&24>d?(l(d,function(e,r){d=r,e&&(t.error=e)}),l(m,function(e,r){m=r,e&&(t.error=e)}),2===m.toString().length&&2===d.toString().length?new Date(w+"-"+g+"-"+v+" "+h+":"+f).getTime()<=new Date(U+"-"+A+"-"+y+" "+d+":"+m).getTime()&&(new Date(U+"-"+A+"-"+y+" "+d+":"+m).getTime()>(new Date).getTime()?c(s,function(c,l){if(s=l,c)t.error=c;else{var u="/api/activities/addactivity";i.post(u,{activityName:e,street:r,number:n,zipcode:o,description:s,dateFrom:w+"-"+g+"-"+v+" "+h+":"+f,dateUntil:U+"-"+A+"-"+y+" "+d+":"+m,timestamp:a}).success(function(e){t.error=e.error,t.getActivities(),p()})}}):t.error="Enddate can't be before today"):t.error="Enddate input is not correct"):t.error="Endtime input is not correct":t.error="De startime length is not correct!!!! "):t.error="Starttime input is not correct":t.error="ERROR: All fields are required."},t.getDetailActivity=function(e){r.getDetailsActivity("activities",o.activityName).then(function(r){t.arrDetailsActivity=r.activity,d();for(var i=t.arrDetailsActivity.matches.length;i--;)t.arrDetailsActivity.matches[i]===e&&(t.nameButton="Not interested",t.interestedAct=!1);return t.arrDetailsActivity})},t.interested=function(e,r,n){var o="",s=t.interestedAct;s!==!1?(o="/api/activities/interested",i.post(o,{activityName:e,interestedUser:r,createrUser:n}).success(function(e){t.interestedAct=!1,t.nameButton="Not interested",t.error=e.error})):(o="/api/activities/deleteinterested",i.post(o,{activityName:e,interestedUser:r,createrUser:n}).success(function(e){t.interestedAct=!0,t.nameButton="Interested",t.error=e.error}))},t.showActivitiesOnHomePage=function(){t.getMostRecentActivities(),t.getMostPopularActivities()},t.getMostRecentActivities=function(){r.getCollection("activities").then(function(r){for(var i=3,n=r.activitielist,o=[],s=n.length;s--;)new Date(n[s].untilDate).getTime()>=new Date(e).getTime()&&o.push(n[s]);o.sort(h);for(var a=[],c=i;c--;)a.push(o[c]);for(var l=[],u=a.length;u--;){var f=new Activity("No name",8500,"Together",2,"no description","2016-01-01 00:01","2017-12-31 23:59",new Date,"no username",l);void 0===a[u]&&a.splice(u,1,f)}t.arrMostRecentActivities=a})},t.getMostPopularActivities=function(){r.getCollection("activities").then(function(r){for(var i=3,n=r.activitielist,o=[],s=n.length;s--;)new Date(n[s].untilDate).getTime()>=new Date(e).getTime()&&o.push(n[s]);for(var a=[],c=0;i>c;c++){var l=f(o);a.push(o[l]),o.splice(l,1)}for(var u=[],h=a.length;h--;){var d=new Activity("No name",8500,"Together",2,"no description","2016-01-01 00:01","2017-12-31 23:59",new Date,"no username",u);void 0===a[h]&&a.splice(h,1,d)}t.arrMostPopularActivities=a})},t.deleteActivity=function(e){r.deleteActivity("activities",e).then(function(e){t.infodeletedActivity=e,t.getActivities()})}};angular.module("app").controller("ActivitiesController",["$scope","dbService","$http","$location","$routeParams","fileUpload",t])}(),function(){"use strict";var e=function(e,t,r,i,n){e.init=function(){chatService.emit("init_users",{user:t.currentUser,collection:"users"})}};angular.module("app").controller("ChatController",["$scope","$rootScope","$routeParams","dbService","$http",e])}(),function(){"use strict";var e=function(e,t){var r=0;e.showDiv=function(){e.filter={showFilter:!0},r++,r>1&&(e.filter={showFilter:!1},r=0)},e.hideDiv=function(){r=0,e.filter={showFilter:!1}},e.sortProperty="title",e.filterQuery="",e.filterMatches=function(t){return""===e.filterQuery?!0:void 0===t.sex?!1:e.filterQuery.toLowerCase()==t.sex.toLowerCase()?!0:("nofilter"===e.filterQuery.toLowerCase()&&(e.filterQuery=""),!1)},e.intersect=function(e,t){var r,i,n=[],o={},s=t.length;for(r=0;s>r;r++)o[t[r]]=!0;for(s=e.length,r=0;s>r;r++)i=e[r],i in o&&n.push(i);return n},e.showMatches=function(){var r;r=localStorage.getItem("username"),t.getCollection("users").then(function(i){for(var n=i.userlist,o=0;o<n.length;o++)n[o].username===r&&n.splice(o,1);for(var s=0;s<n.length;s++)"admin"===n[s].username&&n.splice(s,1);t.getItem(r).then(function(t){for(var r=t,i=[],o=0,s=n.length;s>o;o++){var a=[];a=e.intersect(r.interests,n[o].interests),0!==a.length&&n[o].deleted===!1&&i.push(n[o])}e.arrMatches=i})})}};angular.module("app").controller("MatchesController",["$scope","dbService",e])}(),function(){"use strict";var e=function(e,t,r,i,n,o){var s=0;e.startChat=function(r,i){n.post("/chat",{currentUser:r,contactedUser:i}).success(function(r){e.error=r.error,t.currentUser=r.currentUser,t.contactedUser=r.contactedUser,localStorage.setItem("currentusername",t.currentUser.username),localStorage.setItem("contactedusername",t.contactedUser.username),o.path(r.redirect)})},e.showDiv=function(){e.filter={showFilter:!0},s++,s>1&&(e.filter={showFilter:!1},s=0)},e.hideDiv=function(){s=0,e.filter={showFilter:!1}},e.showProfiles=function(){var t="";t=localStorage.getItem("username"),i.getCollection("users").then(function(r){for(var i=r.userlist,n=0;n<i.length;n++)i[n].username===t&&i.splice(n,1);for(var o=0;o<i.length;o++)"admin"===i[o].username&&i.splice(o,1);e.arrProfiles=i})},e.sortProperty="title",e.filterQuery="",e.filterProfiles=function(t){return""===e.filterQuery?!0:void 0===t.sex?!1:e.filterQuery.toLowerCase()==t.sex.toLowerCase()?!0:("nofilter"===e.filterQuery.toLowerCase()&&(e.filterQuery=""),!1)}};angular.module("app").controller("ProfilesController",["$scope","$rootScope","$routeParams","dbService","$http","$location",e])}(),function(){"use strict";var e=function(e,t,r,i){e.getUsers=function(){i.getCollection("users").then(function(t){e.arrUsers=t.userlist;for(var r=0;r<e.arrUsers.length;r++)e.arrUsers[r].deleted===!1?e.deleted=!1:e.deleted=!0})},e.getDetailUser=function(){i.getDetailsUser("users",t.username).then(function(t){e.userDetails=t.correctuser})},e.deleteUser=function(t){i.deleteUser("users",t).then(function(t){e.infodeletedUser=t,e.getUsers()})},e.updateUser=function(){var t=e.user.username,i=e.user.firstname,n=e.user.lastname,o=e.user.birthdate,s=e.user.zipcode,a=e.user.sex,c=e.user.biography,l="/api/users/updateprofile";r.post(l,{username:t,firstname:i,lastname:n,birthdate:o,zipcode:s,sex:a,biography:c}).success(function(t){e.error=t.error,e.information=t})},e.getUserByID=function(){i.getItem("user").then(function(t){e.userProfile=t})}};angular.module("app").controller("UsersController",["$scope","$routeParams","$http","dbService",e])}(),function(){"use strict";var e=[],t=function(t,r,i,n){t.login=function(){i.post("/login",{username:this.username,password:this.password}).success(function(e){r.user=e.user,t.error=e.error,void 0!==r.user&&localStorage.setItem("username",r.user.username),n.path(e.redirect)})},t.interests=["Jazz","Hiphop","New wave","Traveling","Party"],t.lst=[],t.change=function(){t.lst.push("2")},t.stateChanged=function(t){if(-1!==e.indexOf(t)){var r=e.indexOf(t);r>-1&&e.splice(r,1)}else e.push(t)},t.geolocation="",t.getLocation=function(){function e(e){t.geolocation={latitude:e.coords.latitude,longitude:e.coords.longitude}}function r(e){switch(t.geolocation=null,e.code){case e.PERMISSION_DENIED:t.error="User denied the request for Geolocation.";break;case e.POSITION_UNAVAILABLE:t.error="Location information is unavailable.";break;case e.TIMEOUT:t.error="The request to get user location timed out.";break;case e.UNKNOWN_ERROR:t.error="An unknown error occurred."}}navigator.geolocation?navigator.geolocation.getCurrentPosition(e,r,{maximumAge:6e5}):t.error="Geolocation is not supported by this browser."},t.register=function(){i.post("/register",{firstname:this.firstname,lastname:this.lastname,username:this.username,password:this.password,zipcode:this.zipcode,birthdate:this.birthdate,sex:this.sex,biography:this.biography,geolocation:t.geolocation,interests:e}).success(function(e){t.error=e.error,n.path(e.redirect)})}},r=function(e){e.categories=[""],e.newCategory="",e.saveCategory=function(){}},i=function(t){t.category="",t.showLabel=!1,t.showTextbox=!0,t.saveCategory=function(){t.category?(t.showLabel=!0,t.showTextbox=!1):(t.showLabel=!1,t.showTextbox=!0)},t.edit=function(){t.showLabel=!1,t.showTextbox=!0},t.isChecked=function(t){if(" "!==t)if(-1!==e.indexOf(t)){var r=e.indexOf(t);r>-1&&e.splice(r,1)}else e.push(t)},t.stateChanged=function(e){}};angular.module("app").controller("loginController",["$scope","$rootScope","$http","$location",t]).controller("signupController",["$scope",r]).controller("editableCheckboxController",["$scope",i])}(),function(){"use strict";var e=function(e,t,r,i){r.get("/user").success(function(r){e.user=r,t.user=r,"admin"==r.username?e.auth={isAuth:!0,isAdmin:!0}:"admin"!=r.username&&void 0!==r.username?e.auth={isAuth:!0,isAdmin:!1}:void 0===r.username&&(e.auth={isAuth:!1,isAdmin:!1})})};angular.module("app").controller("userController",["$scope","$rootScope","$http","$location",e])}();
//# sourceMappingURL=data:application/json;base64,
