/**
 * Created by Marthe on 10/12/15.
 */

(function(){
    var app = angular.module("app", ["ngRoute"]);
    app.config(function($routeProvider){
        $routeProvider
            .when("/",{
                templateUrl: "./views/home.html"
            })
            .when("/signup",{
                templateUrl: "views/signup.html"
            })
            .when("/home",{
                templateUrl: "./views/home.html"
            })
            .when("/matches",{
                templateUrl: "./views/matches.html"
            })
            .when("/howto",{
                templateUrl: "./views/howTo.html"
            })
            .when("/activities",{
                templateUrl: "./views/activities.html"
            })
            .when("/admin",{
                templateUrl: "./views/admin.html"
            })
            .when("/searchprofiles",{
                templateUrl: "./views/searchProfiles.html"
            })
            .when("/myprofile",{
                templateUrl: "./views/myProfile.html"
            })
            .when("/userdetails/:username",{
                templateUrl: "./views/detailsUser.html",
                controller: 'UsersController'
            })
            .when("/detailsuser",{
                templateUrl: "./views/detailsUser.html"
            })
            .when("/activitydetails/:activityName", {
                templateUrl: "./views/detailsActivity.html",
                controller: "ActivitiesController"

            });


    });

    app.run(function ($rootScope) {
        $rootScope.user = {};
    });

    app.directive('ngEnter', function () {
        return function (scope, element, attrs) {
            element.bind("keydown keypress", function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.ngEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    });


    app.directive('fileModel', ['$parse', function ($parse) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function(){
                    scope.$apply(function(){
                        modelSetter(scope, element[0].files[0]);
                    });
                });
            }
        };
    }]);

    app.service('fileUpload', ['$http', function ($http) {
        this.uploadFileToUrl = function(file, uploadUrl){
            var fd = new FormData();
            fd.append('file', file);
            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            })
                .success(function(){
                    console.log("success");
                })
                .error(function(){
                    console.log("error");
                });
        };
    }]);


    app.directive('editableCheckbox', function () {
        return {
            restrict: 'E',
            templateUrl: './views/editablecheckbox.html'
        };
    });


})();
/**
 * Created by iman on 15/12/15.
 */
var Activity = function(img, name, place, keywords, participants, myEvent){
    this.img = img;
    this.name = name;
    this.place = place;
    this.keywords = keywords;
    this.participants = participants;
    this.myEvent = myEvent;
};
/**
 * Created by iman on 5/12/15.
 */
/*(function(){

    "use strict";

    var activitiesService = function () {

        var getActivities = function () {

            var localUrl = "http://localhost:3000/data/activities.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);

                //console.log(data);

                var arrActivities = [];

                for (var i = 0; i < data.length; i++) {

                    var d = data[i];

                    var newActivity = new Activity();
                    newActivity.img = d.img;
                    newActivity.name = d.name;
                    newActivity.place = d.place;
                    newActivity.participants = d.participants;
                    newActivity.myEvent = d.myEvent;

                    var text = "";

                    for(var ii=0; ii< d.keywords.length; ii++){
                        if(ii == d.keywords.length-1){
                            text += d.keywords[ii];
                        }
                        else{
                            text += d.keywords[ii];
                            text += ", ";
                        }
                    }

                    newActivity.keywords = text;
                    arrActivities.push(newActivity);
                }

                return arrActivities;

            }

        };

        //public gedeelte
        return{

            getActivities:getActivities

        };

    };

    angular.module("app").factory("activitiesService", [activitiesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();*/
/**
 * Created by iman on 15/12/15.
 */


(function(){

    "use strict";

    var dbService = function ($http) {

        var getCollection = function (collection) {


            var url = "http://localhost:3000/api/" + collection;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getByID = function (collection, id) {
            var url = "http://localhost:3000/api/" + collection + "/" + id;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getDetailsUser = function (collection, username) {
            var url = "http://localhost:3000/api/" + collection + "/userdetail/" + username;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getItem = function(item){

            var url = "http://localhost:3000/api/" + item;
            return $http.get('/user').then(function(response){

                return response.data;

            });

        };

        var getDetailsActivity = function (collection, activityname) {
            var url = "http://localhost:3000/api/" + collection + "/activitydetail/" + activityname;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getNoiseWords = function () {

            var url = "http://localhost:3000/data/noisewords.json";
            return $http.get(url).then(function(response){

                return response.data;

            });

        };


        //public gedeelte
        return{

            getCollection:getCollection,
            getByID:getByID,
            getItem:getItem,
            getDetailsUser: getDetailsUser,
            getDetailsActivity: getDetailsActivity,
            getNoiseWords: getNoiseWords

        };

    };

    angular.module("app").factory("dbService", ["$http", dbService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */
(function(){

    "use strict";

    var matchesService = function () {

        var getMatches = function (nameUser) {

            var variabelURL = "together";
            var localUrl = "http://localhost:3000/data/matches.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);
                var arr = [];
                var arrMatches = [];
                var arrMatchUsers = [];
                var arrMatchInterests = [];

                for(var i=0; i < data.length; i++){

                    var obj = {
                        "user": data[i].user,
                        "matches":data[i].matches
                    };

                    arr.push(obj);

                }

                for(var ii = 0; ii<arr.length; ii++){

                    var index = arr[ii].user.indexOf(nameUser);
                    if(index === 0){
                        arrMatches.push(arr[ii].matches);
                    }
                    //console.log("Index: "+index);
                }

                //console.log(arr);
                //console.log(arrMatches[0]);


                var arrMatchesByUser = arrMatches[0];
                //console.log("Aantal matches: " + arrMatchesByUser.length);

                return arrMatchesByUser;

                /*
                for(var iii = 0; iii<arrMatches[0].length; iii++){

                    var matchUser = arrMatches[0][iii].user;
                    var matchInterests = arrMatches[0][iii].interests;

                    arrMatchUsers.push(matchUser);
                    arrMatchInterests.push(matchInterests);

                    //console.log(matchUser);
                    //console.log(matchInterests);
                }

                console.log(arrMatchUsers);
                console.log(arrMatchInterests);
                */

            }



        };

        //public gedeelte
        return{

            getMatches:getMatches,

        };

    };

    angular.module("app").factory("matchesService", [matchesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */

(function() {

    "use strict";
    var ActivitiesController = function ($scope, dbService, $http, $location, $routeParams, $route) {
        $scope.interestedAct=true;
        $scope.nameButton = "Interested";

        $scope.getActivities = function () {
            dbService.getCollection('activities').then(function (response) {

                var arrTemp = response.activitielist;
                var arrActs = [];

                var today = new Date().toISOString().substring(0, 10),
                    todaySplit = today.split("-"),
                    sumToday =  todaySplit[0] +  todaySplit[1] +  todaySplit[2];

                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    var activtyDateSplit = arrTemp[i].untilDate.substring(0,10).split("-"),
                        sumActivity =  activtyDateSplit[0] + activtyDateSplit[1] + activtyDateSplit[2];
                    if ( sumActivity >= sumToday) {
                      arrActs.push(arrTemp[i]);
                    }
                }

                $scope.arrActivities = arrActs;

            });


        };

        String.prototype.replaceAll = function( token, newToken, ignoreCase ) {
            var _token;
            var str = this + "";
            var i = -1;

            if ( typeof token === "string" ) {

                if ( ignoreCase ) {

                    _token = token.toLowerCase();

                    while( (
                        i = str.toLowerCase().indexOf(
                            token, i >= 0 ? i + newToken.length : 0
                        ) ) !== -1
                        ) {
                        str = str.substring( 0, i ) +
                            newToken +
                            str.substring( i + token.length );
                    }

                } else {
                    return this.split( token ).join( newToken );
                }

            }
            return str;
        };

        function isInArray(value, array) {
            return array.indexOf(value);
        }

        function getKeywordsFromDescription(description, callback) {

            description = description.replaceAll('.', '');
            description = description.replaceAll(',', '');
            description = description.replaceAll('?', '');
            description = description.replaceAll('!', '');
            description = description.replaceAll('"', '');
            description = description.replaceAll("'", '');

            var words = description.split(" ");
            var keyWords = "";

            dbService.getNoiseWords().then(function(response) {

                var noiseWords = response.noisewords;

                for (var i = 0; i < words.length; i++) {

                    if (isInArray(words[i].toLowerCase(), noiseWords) == -1) {
                        keyWords += words[i];
                        keyWords += " ";
                    }
                }

                //return keyWords;
                if(!keyWords.isEmpty){
                    callback(null, keyWords);
                }

                else{
                    callback("No keywords found.", null);
                }

            });
        }

        function timeConsistOf2Numbers(number, callback){
                var output = number + '';
                if (output.length < 2) {
                    output = '0' + output;
                    number = output.toString();

                }
                else{
                    number = number.toString();
                }


            if(!number.isEmpty){
                callback(null, number);
            }

            else{
                callback("No number.", null);
            }


        }




        $scope.addActivity = function() {
            var activityName = this.activityName;
            var street = this.street;
            var number = this.number;
            var zipcode = this.zipcode;
            var description = this.comment;
            var dateFrom = this.dateFrom;
            var dateUntil = this.dateUntil;
            var timestamp = new Date().getTime();
            var startTimeHour  = this.startTimeHour;
            var startTimeMin = this.startTimeMin;
            var endTimeHour = this.endTimeHour;
            var endTimeMin = this.endTimeMin;



            if((street !== undefined) &&
                (number !== undefined) &&
                (zipcode !== undefined) &&
                (description !== undefined) &&
                (dateFrom !== undefined) &&
                (dateUntil !== undefined) &&
                (timestamp !== undefined)){

                if(dateFrom <= dateUntil) {
                    $scope.error = "";

                    if (startTimeMin < 60 && startTimeHour < 25) {

                        timeConsistOf2Numbers(startTimeHour, function(error, startTimeHourString){
                            startTimeHour = startTimeHourString;
                            if(error){
                                console.log(error);
                            }
                        });
                        timeConsistOf2Numbers(startTimeMin, function(error, startTimeMinString){
                            startTimeMin = startTimeMinString;
                            if(error){
                                console.log(error);

                            }
                        });

                        console.log(startTimeHour);
                        console.log(startTimeMin);

                        if (startTimeMin.length === 2  && startTimeHour.length === 2) {
                            console.log("je komt hier terecht");

                            if(endTimeMin < 60 && endTimeHour < 24){
                                timeConsistOf2Numbers(endTimeHour, function(error, endTimeHourString){
                                    endTimeHour = endTimeHourString;
                                    if(error){
                                        console.log(error);
                                    }
                                });
                                timeConsistOf2Numbers(endTimeMin, function(error, endTimeMinString){
                                    endTimeMin = endTimeMinString;
                                    if(error){
                                        console.log(error);

                                    }
                                });

                                console.log(endTimeHour);
                                console.log(endTimeMin);

                            if (endTimeMin.toString().length === 2 && endTimeHour.toString().length === 2) {

                                console.log(startTimeHour + ":" + startTimeMin);

                                getKeywordsFromDescription(description, function (error, data) {
                                 description = data;
                                 if(!error){
                                 console.log(startTimeHour + ":" + startTimeMin);

                                 var url = "http://localhost:3000/api/activities/addactivity";
                                 $http.post(url, {
                                 activityName:activityName,
                                 street : street,
                                 number: number,
                                 zipcode: zipcode,
                                 description : description,
                                 dateFrom : (dateFrom.toISOString()).substring(0,10) + " " + startTimeHour + ":" +  startTimeMin,
                                 dateUntil : (dateUntil.toISOString()).substring(0,10) + " " + endTimeHour + ":" +  endTimeMin,
                                 timestamp : timestamp

                                 }).success(function (data) {
                                 $scope.error = data.error;
                                 $scope.getActivities();
                                 resetForm();

                                 //$location.path(data.redirect);
                                 });

                                 }
                                 else{
                                 console.log(error);
                                 }
                                 });
                            }

                            else {
                                $scope.error = "Enddate input is not correct";
                            }
                            }

                            else{
                                $scope.error = "Endtime input is not correct";
                            }

                        }

                        else {
                            $scope.error = 'foutje!!!! ';
                        }
                    }

                    else {
                        $scope.error = "Starttime input is not correct";
                    }
                }


                else if(dateFrom > dateUntil){
                    $scope.error = "ERROR: Date until can't be earlier than date from.";
                }


            }
            else{
                $scope.error = "ERROR: All fields are required.8888";
            }
        };

        $scope.getDetailActivity = function(currentUser){
            dbService.getDetailsActivity('activities', $routeParams.activityName).then(function(response){
                $scope.arrDetailsActivity = response.activity;
                initmap();

                console.log($scope.arrDetailsActivity.matches);
                for (var i = 0; i < $scope.arrDetailsActivity.matches.length; i++) {
                    if ($scope.arrDetailsActivity.matches[i] === currentUser) {
                        $scope.nameButton = "Not interested";
                        $scope.interestedAct = false;
                    }
                }
                return $scope.arrDetailsActivity;


            });
        };

        $scope.interested = function(activityName,interestedUser, createrUser){
            var url = "";
            var interestedAct = $scope.interestedAct;
            if(interestedAct !== false) {

                url = "http://localhost:3000/api/activities/interested";
                $http.post(url, {
                    activityName: activityName,
                    interestedUser: interestedUser,
                    createrUser: createrUser
                }).success(function (data) {
                    console.log(data);
                    console.log(interestedUser + " is geïnteresseerd in " + activityName + " door " + createrUser);
                    $scope.interestedAct = false;
                    $scope.nameButton = "Not interested";
                    $scope.error = data.error;
                });
            }else{
                console.log(interestedAct);
                url = "http://localhost:3000/api/activities/deleteinterested";
                $http.post(url, {
                    activityName: activityName,
                    interestedUser: interestedUser,
                    createrUser: createrUser
                }).success(function (data) {
                    console.log(data);
                    console.log(interestedUser + " is niet meer geïnteresseerd in " + activityName + " door " + createrUser);
                    $scope.interestedAct = true;
                    $scope.nameButton = "Interested";

                    $scope.error = data.error;
                });
            }
        };

        function recentFirst(a,b) {
            if (a.timestamp > b.timestamp)
                return -1;
            if (a.timestamp < b.timestamp)
                return 1;
            return 0;
        }

        $scope.getMostRecentActivities = function(){
            dbService.getCollection('activities').then(function(response){

                var numberOfActivities = 3;
                var arrTemp = response.activitielist;
                var arrAllActivities = [];

                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    if (new Date(arrTemp[i].untilDate).getTime() > new Date().getTime()) {
                        arrAllActivities.push(arrTemp[i]);
                    }
                }

                arrAllActivities.sort(recentFirst);

                var arrMostRecentActivities = [];

                for(var ii=0; ii<numberOfActivities; ii++){
                    arrMostRecentActivities.push(arrAllActivities[ii]);
                }
                $scope.arrMostRecentActivities = arrMostRecentActivities;

            });
        };

        function initmap() {

            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: {lat: 50.8194894, lng: 3.2577076}
            });
            var geocoder = new google.maps.Geocoder();

            geocodeAddress(geocoder, map);


        }

        function geocodeAddress(geocoder, resultsMap) {
            var street = $scope.arrDetailsActivity.street;
            var number = $scope.arrDetailsActivity.number;
            var zipcode = $scope.arrDetailsActivity.zipcode;

            var address = street + " " + number + ", " + zipcode; //hier address uit db instoppen

            geocoder.geocode({'address': address}, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    resultsMap.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: resultsMap,
                        position: results[0].geometry.location
                    });

                    console.log(marker);

                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        function resetForm(){
            var frm = document.getElementsByName('ActivityForm')[0];
            console.log('je komt in de resetform');
            frm.reset();
        }
    };

    angular.module("app").controller("ActivitiesController", ["$scope", "dbService", "$http","$location", "$routeParams","fileUpload", ActivitiesController]);


})();
/**
 * Created by iman on 5/12/15.
 */

(function(){

    "use strict";

    var MatchesController = function($scope, matchesService) {

        $scope.showMatches = function(){

            var nameUser = "Luna";

            var arrMatchesByUser = matchesService.getMatches(nameUser);

            $scope.aantalMatches = arrMatchesByUser.length;

            $scope.arrMatches = arrMatchesByUser;

            var text = "";
            for(var i=0; i<arrMatchesByUser.length; i++){
                text = arrMatchesByUser[i].interests.toString().replace(" ,", " ");
                arrMatchesByUser[i].interests = text;
            }

        };
    };

    angular.module("app").controller("MatchesController", ["$scope", "matchesService", MatchesController]);

})();
/**
 * Created by iman on 20/12/15.
 */


(function(){

    "use strict";

    var ProfilesController = function($scope, $rootScope, $routeParams, dbService) {

        var clicksOnBtn = 0;

        $scope.showDiv = function(){
            $scope.filter = {showFilter:true};
            clicksOnBtn++;

            if(clicksOnBtn > 1){
                $scope.filter = {showFilter:false};
                clicksOnBtn = 0;
            }
        };

        $scope.hideDiv = function(){
            clicksOnBtn = 0;
            $scope.filter = {showFilter:false};
        };

        $scope.showProfiles = function(){

            var username = "";
            if($rootScope.user.username !== undefined){
                username = $rootScope.user.username;
            }

            dbService.getCollection('users').then(function(response){

                var arrProfiles = response.userlist;
                for(var i = 0; i < arrProfiles.length; i++){
                    if(arrProfiles[i].username === username) {
                        arrProfiles.splice(i, 1);
                    }
                }
                for(var ii = 0; ii < arrProfiles.length; ii++){
                    if(arrProfiles[ii].username === "admin") {
                        arrProfiles.splice(ii, 1);
                    }
                }
                $scope.arrProfiles = arrProfiles;

            });

        };

        $scope.sortProperty = "title";
        $scope.filterQuery = "";
        $scope.filterImages = function(i){
            if($scope.filterQuery === ""){
                return true;
            }

            /*
             else if(i.username.toLowerCase().indexOf($scope.filterQuery.toLocaleLowerCase()) >= 0){
             return true;
             }
             */

            else if(i.sex === undefined){
                return false;
            }

            else if($scope.filterQuery.toLowerCase() == i.sex.toLowerCase()){
                return true;
            }

            else if($scope.filterQuery.toLowerCase() === "nofilter"){
                $scope.filterQuery = "";
            }

            return false;
        };
    };

    angular.module("app").controller("ProfilesController", ["$scope", "$rootScope", "$routeParams", "dbService", ProfilesController]);

})();
/**
 * Created by iman on 20/12/15.
 */
(function(){

    "use strict";

    var UsersController = function($scope, $routeParams, dbService) {

        $scope.getUsers = function(){

            dbService.getCollection('users').then(function(response){

                //console.log(response);
                $scope.arrUsers = response.userlist;

            });

        };

        $scope.getDetailUser = function(){

            dbService.getDetailsUser('users', $routeParams.username).then(function(response){
                $scope.arrDetails = response.activity;
            });
        };

        $scope.getUserByID = function(){

            dbService.getItem('user').then(function(response){

                console.log(response);
                $scope.userProfile = response;

            });

        };


    };

    angular.module("app").controller("UsersController", ["$scope", "$routeParams", "dbService", UsersController]);

})();
/**
 * Created by Marthe on 30/12/15.
 */


(function(){
    "use strict";



var locationController = function($scope) {

    console.log('TESTEST');

    $scope.initmap = function() {
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 8,
            center: {lat: 50.8194894, lng: 3.2577076}
        });
        var geocoder = new google.maps.Geocoder();

        geocodeAddress(geocoder, map);

    };

    function geocodeAddress(geocoder, resultsMap) {
        var address = "Graaf Karel de Goedelaan 5, Kortrijk"; //hier address uit db instoppen

        geocoder.geocode({'address': address}, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                resultsMap.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: resultsMap,
                    position: results[0].geometry.location
                });

                console.log(marker);

            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
};

    angular.module("app").controller("locationController", ["$scope", locationController]);
})();
/**
 * Created by Marthe on 15/12/15.
 */
(function(){
    "use strict";
    var selectedInterest = [];

    var loginController = function ($scope, $http, $location) {

        $scope.login = function() {
            $http
                .post('/login', {
                    username: this.username,
                    password: this.password
                })
                .success(function(data) {
                    console.log(data);
                    $scope.error = data.error;
                    $location.path(data.redirect);
                });
        };

        $scope.interests = ['Jazz', 'Hiphop', 'New wave', 'Traveling','Party'];
        $scope.lst = [];
        $scope.change = function(){
            $scope.lst.push('2');
            console.log($scope.lst);
        };
        $scope.stateChanged = function (qId) {
            //if(!$scope.interests[qId]){ //If it is checked
            if(selectedInterest.indexOf(qId) !== -1) {
                //console.log('artNr already exists! DELETE');
                var index = selectedInterest.indexOf(qId);
                if (index > -1) {
                    selectedInterest.splice(index, 1);
                }
            }else{
                selectedInterest.push(qId);
                console.log(selectedInterest);
            }
        };

        $scope.register = function() {
            console.log("REGISTER");


            $http.post('/register', {
                firstname: this.firstname,
                lastname : this.lastname,
                //email : this.email,*/
                username : this.username,
                password : this.password,
                zipcode: this.zipcode,
                birthdate : this.birthdate,
                sex : this.sex,
                biography : this.biography,
                interests:selectedInterest

            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });

        };
    };

    var signupController = function ($scope) {
        $scope.categories = [''];
        $scope.newCategory = "";
        $scope.saveCategory = function () {

        };

    };

    var editableCheckboxController = function ($scope) {
        $scope.category = "";
        $scope.showLabel = false;
        $scope.showTextbox = true;
        $scope.saveCategory = function () {
            if ($scope.category) {
                $scope.showLabel = true;
                $scope.showTextbox = false;
            }
            else {
                $scope.showLabel = false;
                $scope.showTextbox = true;
            }
        };
        $scope.edit = function () {
            $scope.showLabel = false;
            $scope.showTextbox = true;
        };
        $scope.isChecked = function(qId){
            console.log(qId);
            if(qId!==  " ") {
                if (selectedInterest.indexOf(qId) !== -1) {
                    var index = selectedInterest.indexOf(qId);
                    if (index > -1) {
                        selectedInterest.splice(index, 1);
                        console.log(selectedInterest);
                    }
                } else {
                    selectedInterest.push(qId);
                    console.log(selectedInterest);
                }
            }
        };
        $scope.stateChanged = function (qId) {

        };

    };

    angular.module("app")
        .controller("loginController", ["$scope", "$http", "$location", loginController])
        .controller("signupController", ["$scope", signupController])
        .controller("editableCheckboxController", ["$scope", editableCheckboxController]);
})();
/**
 * Created by Nikita on 21/12/2015.
 */
(function () {
    "use strict";

    /*var signupController = function ($scope) {
        $scope.categories = [''];
        $scope.newCategory = "";
        $scope.saveCategory = function () {

        };

    };

    var editableCheckboxController = function ($scope) {
        $scope.category = "";
        $scope.showLabel = false;
        $scope.showTextbox = true;
        $scope.saveCategory = function () {
            if ($scope.category) {
                $scope.showLabel = true;
                $scope.showTextbox = false;
            }
            else {
                $scope.showLabel = false;
                $scope.showTextbox = true;
            }
        };
        $scope.edit = function () {
            $scope.showLabel = false;
            $scope.showTextbox = true;
        };

    };
    angular.module("app")
        .controller("signupController", ["$scope", signupController])
        .controller("editableCheckboxController", ["$scope", editableCheckboxController]);*/


})();
/**
 * Created by Marthe on 16/12/15.
 */
(function () {
    "use strict";

    var userController = function ($scope, $rootScope, $http, $location) {
        $http.get('/user').success(function(data) {
            $scope.user = data;
            $rootScope.user = data;

            if(data.username == 'admin'){
                $scope.auth = {isAuth: true, isAdmin : true};
            }
            else if(data.username != 'admin' && data.username !== undefined){
                $scope.auth = {isAuth: true, isAdmin : false};
            }
            else if(data.username === undefined){
                $scope.auth = {isAuth: false, isAdmin : false};

            }


        });


        /*$scope.logout = function() {
            $http.get('/logout').success(function (data) {
                $location.path(data.redirect);
            });
        };*/
    };


    angular.module("app").controller("userController", ["$scope", "$rootScope", "$http", "$location", userController]);
})();
//# sourceMappingURL=data:application/json;base64,
