!function(){"use strict";var t=function(){var t=function(){var t="http://localhost:3000/data/activities.json",e=new XMLHttpRequest;if(e.open("GET",t,!1),e.send(null),200==e.status){for(var a=JSON.parse(e.responseText),r=[],n=0;n<a.length;n++){for(var s=a[n],i="",o=0;o<s.keywords.length;o++)o==s.keywords.length-1?i+=s.keywords[o]:(i+=s.keywords[o],i+=", ");var l={img:s.img,name:s.name,place:s.place,keywords:i,participants:s.participants,myEvent:s.myEvent};r.push(l)}return r}};return{getActivities:t}};angular.module("app").factory("activitiesService",[t])}(),function(){"use strict";var t=function(){var t=function(t){var e="http://localhost:3000/data/matches.json",a=new XMLHttpRequest;if(a.open("GET",e,!1),a.send(null),200==a.status){for(var r=JSON.parse(a.responseText),n=[],s=[],i=0;i<r.length;i++){var o={user:r[i].user,matches:r[i].matches};n.push(o)}for(var l=0;l<n.length;l++){var c=n[l].user.indexOf(t);0===c&&s.push(n[l].matches)}var u=s[0];return u}};return{getMatches:t}};angular.module("app").factory("matchesService",[t])}(),function(){"use strict";var t=function(t,e){t.showActivities=function(){var a=e.getActivities();t.arrActivities=a}};angular.module("app").controller("ActivitiesController",["$scope","activitiesService",t])}(),function(){"use strict";var t=function(t,e){t.showMatches=function(){var a="Luna",r=e.getMatches(a);t.aantalMatches=r.length,t.arrMatches=r;for(var n="",s=0;s<r.length;s++)n=r[s].interests.toString().replace(" ,"," "),r[s].interests=n}};angular.module("app").controller("MatchesController",["$scope","matchesService",t])}(),function(){var t=angular.module("app",["ngRoute"]);t.config(function(t){t.when("/",{templateUrl:"./partials/home.html"}).when("/signup",{templateUrl:"partials/signup.html"}).when("/home",{templateUrl:"./partials/home.html"}).when("/matches",{templateUrl:"./partials/matches.html"}).when("/howto",{templateUrl:"./partials/howTo.html"}).when("/activities",{templateUrl:"./partials/activities.html"})})}();
//# sourceMappingURL=data:application/json;base64,
