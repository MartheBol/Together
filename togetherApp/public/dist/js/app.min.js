!function(){var e=angular.module("app",["ngRoute"]);e.config(["$routeProvider",function(e){e.when("/",{templateUrl:"./views/home.html"}).when("/signup",{templateUrl:"views/signup.html"}).when("/home",{templateUrl:"./views/home.html"}).when("/matches",{templateUrl:"./views/matches.html"}).when("/howto",{templateUrl:"./views/howTo.html"}).when("/activities",{templateUrl:"./views/activities.html"}).when("/admin",{templateUrl:"./views/admin.html"}).when("/searchprofiles",{templateUrl:"./views/searchProfiles.html"}).when("/myprofile",{templateUrl:"./views/myProfile.html"}).when("/userdetails/:username",{templateUrl:"./views/detailsUser.html",controller:"UsersController"}).when("/detailsuser",{templateUrl:"./views/detailsUser.html"}).when("/activitydetails/:activityName",{templateUrl:"./views/detailsActivity.html",controller:"ActivitiesController"}).when("/chat",{templateUrl:"./views/chat.html"})}]),e.run(["$rootScope",function(e){e.user={}}]),e.directive("ngEnter",function(){return function(e,t,o){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(o.ngEnter)}),t.preventDefault())})}}),e.directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,o,r){var n=e(r.fileModel),i=n.assign;o.bind("change",function(){t.$apply(function(){i(t,o[0].files[0])})})}}}]),e.service("fileUpload",["$http",function(e){this.uploadFileToUrl=function(t,o){var r=new FormData;r.append("file",t),e.post(o,r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(){console.log("success")}).error(function(){console.log("error")})}}]),e.directive("editableCheckbox",function(){return{restrict:"E",templateUrl:"./views/editablecheckbox.html"}})}();var Activity=function(e,t,o,r,n,i,s,a,c,l){this.activityName=e,this.zipcode=t,this.street=o,this.number=r,this.description=n,this.dateFrom=i,this.dateUntil=s,this.timestamp=a,this.username=c,this.matches=l};!function(){"use strict";var e=function(e){var t=io.connect(window.location.host),o=function(o,r){t.on(o,function(){var o=arguments;e.$apply(function(){r.apply(t,o)})})},r=function(o,r,n){t.emit(o,r,function(){var o=arguments;e.$apply(function(){n.apply(t,o)})})};return{on:o,emit:r,socket:t}};angular.module("app").factory("chatService",["$rootScope",e])}(),function(){"use strict";var e=function(e){var t=function(t){var o="http://localhost:3000/api/"+t;return e.get(o).then(function(e){return e.data})},o=function(t,o){var r="http://localhost:3000/api/"+t+"/"+o;return e.get(r).then(function(e){return e.data})},r=function(t,o){var r="http://localhost:3000/api/"+t+"/userdetail/"+o;return e.get(r).then(function(e){return e.data})},n=function(t,o){var r="http://localhost:3000/api/"+t+"/userdelete/"+o;return e.get(r).then(function(e){return e.data})},i=function(t){var o="http://localhost:3000/api/"+t+"/updateprofile";return e.get(o).then(function(e){return e.data})},s=function(t){return e.get("/user").then(function(e){return e.data})},a=function(t,o){var r="http://localhost:3000/api/"+t+"/activitydetail/"+o;return e.get(r).then(function(e){return e.data})},c=function(t,o){var r="http://localhost:3000/api/"+t+"/activitydelete/"+o;return console.log(r),e.get(r).then(function(e){return console.log(e),e.data})},l=function(){var t="http://localhost:3000/data/noisewords.json";return e.get(t).then(function(e){return e.data})};return{getCollection:t,getByID:o,getItem:s,getDetailsUser:r,deleteUser:n,updateUser:i,getDetailsActivity:a,getNoiseWords:l,deleteActivity:c}};angular.module("app").factory("dbService",["$http",e])}(),function(){"use strict";var e=function(){var e=function(e){var t="http://localhost:3000/data/matches.json",o=new XMLHttpRequest;if(o.open("GET",t,!1),o.send(null),200==o.status){for(var r=JSON.parse(o.responseText),n=[],i=[],s=0;s<r.length;s++){var a={user:r[s].user,matches:r[s].matches};n.push(a)}for(var c=0;c<n.length;c++){var l=n[c].user.indexOf(e);0===l&&i.push(n[c].matches)}var u=i[0];return u}};return{getMatches:e}};angular.module("app").factory("matchesService",[e])}(),function(){"use strict";var e=(new Date).toISOString().substring(0,10)+" "+(new Date).toISOString().substring(11,16),t=function(t,o,r,n,i,s){function a(e,t){return t.indexOf(e)}function c(e,t){e=e.replaceAll(".",""),e=e.replaceAll(",",""),e=e.replaceAll("?",""),e=e.replaceAll("!",""),e=e.replaceAll('"',""),e=e.replaceAll("'","");var r=e.split(" "),n="";o.getNoiseWords().then(function(e){for(var o=e.noisewords,i=0;i<r.length;i++)-1==a(r[i].toLowerCase(),o)&&(n+=r[i],n+=" ");n.isEmpty?t("No keywords found.",null):t(null,n)})}function l(e,t){var o=e+"";o.length<2?(o="0"+o,e=o.toString()):e=e.toString(),e.isEmpty?t("No number.",null):t(null,e)}function u(e,t,o){l(e,function(t,o){e=o,t&&console.log(t)}),l(t,function(e,o){t=o,e&&console.log(e)}),e.isEmpty||t.isEmpty?o("No number.",null):o(null,e,t)}function h(e,t){return e.timestamp>t.timestamp?-1:e.timestamp<t.timestamp?1:0}function f(e){for(var t=e[0],o=0,r=1;r<e.length;r++)e[r].matches.length>t.matches.length&&(o=r,t=e[r]);return o}function d(){var e=new google.maps.Map(document.getElementById("map"),{zoom:8,center:{lat:50.8194894,lng:3.2577076}}),t=new google.maps.Geocoder;g(t,e)}function g(e,o){var r=t.arrDetailsActivity.street,n=t.arrDetailsActivity.number,i=t.arrDetailsActivity.zipcode,s=r+" "+n+", "+i;e.geocode({address:s},function(e,t){if(t===google.maps.GeocoderStatus.OK){o.setCenter(e[0].geometry.location);var r="../../images/marker.png",n=new google.maps.Marker({map:o,position:e[0].geometry.location,icon:r});console.log(n)}else alert("Geocode was not successful for the following reason: "+t)})}function m(){var e=document.getElementsByName("ActivityForm")[0];console.log("je komt in de resetform"),e.reset()}t.interestedAct=!0,t.nameButton="Interested",t.getActivities=function(){o.getCollection("activities").then(function(o){for(var r=o.activitielist,n=[],i=0,s=r.length;s>i;i++)new Date(r[i].untilDate).getTime()>=new Date(e).getTime()&&(r[i].deleted===!1?(t.deleted=!1,n.push(r[i])):t.deleted=!0);t.arrActivities=n})},String.prototype.replaceAll=function(e,t,o){var r,n=this+"",i=-1;if("string"==typeof e){if(!o)return this.split(e).join(t);for(r=e.toLowerCase();-1!==(i=n.toLowerCase().indexOf(e,i>=0?i+t.length:0));)n=n.substring(0,i)+t+n.substring(i+e.length)}return n},t.addActivity=function(){var e=this.activityName,o=this.street,n=this.number,i=this.zipcode,s=this.comment,a=(this.dateFrom,this.dateUntil,(new Date).getTime()),h=this.startTimeHour,f=this.startTimeMin,d=this.endTimeHour,g=this.endTimeMin,p=this.dateFromDay,v=this.dateFromMonth,w=this.dateFromYear.toString(),y=this.dateUntilDay,U=this.dateUntilMonth,A=this.dateUntilYear.toString();u(p,v,function(e,t,o){p=t,v=o,e&&console.log(e)}),u(y,U,function(e,t,o){y=t,U=o,e&&console.log(e)}),new Date(w+"-"+v+"-"+p+" "+h+":"+f).getTime()<=new Date(A+"-"+U+"-"+y+" "+d+":"+g).getTime()?new Date(A+"-"+U+"-"+y+" "+d+":"+g).getTime()>(new Date).getTime()||console.log("Date until can't be before today"):console.log(" Enddate can't be before startdate"),void 0!==o&&void 0!==n&&void 0!==i&&void 0!==s&&void 0!==a&&void 0!==w&&void 0!==v&&void 0!==p&&void 0!==h&&void 0!==f&&void 0!==A&&void 0!==U&&void 0!==y&&void 0!==d&&void 0!==g?60>f&&25>h?(l(h,function(e,t){h=t,e&&console.log(e)}),l(f,function(e,t){f=t,e&&console.log(e)}),console.log(h),console.log(f),2===f.length&&2===h.length?(console.log("je komt hier terecht"),60>g&&24>d?(l(d,function(e,o){d=o,e&&(t.error=e)}),l(g,function(e,o){g=o,e&&(t.error=e)}),2===g.toString().length&&2===d.toString().length?new Date(w+"-"+v+"-"+p+" "+h+":"+f).getTime()<=new Date(A+"-"+U+"-"+y+" "+d+":"+g).getTime()&&(new Date(A+"-"+U+"-"+y+" "+d+":"+g).getTime()>(new Date).getTime()?c(s,function(c,l){if(s=l,c)console.log(c);else{console.log(h+":"+f);var u="/api/activities/addactivity";r.post(u,{activityName:e,street:o,number:n,zipcode:i,description:s,dateFrom:w+"-"+v+"-"+p+" "+h+":"+f,dateUntil:A+"-"+U+"-"+y+" "+d+":"+g,timestamp:a}).success(function(e){t.error=e.error,t.getActivities(),m()})}}):t.error="Enddate can't be before today"):t.error="Enddate input is not correct"):t.error="Endtime input is not correct"):t.error="De startime length is not correct!!!! "):t.error="Starttime input is not correct":t.error="ERROR: All fields are required."},t.getDetailActivity=function(e){o.getDetailsActivity("activities",i.activityName).then(function(o){t.arrDetailsActivity=o.activity,d(),console.log(t.arrDetailsActivity.matches);for(var r=0;r<t.arrDetailsActivity.matches.length;r++)t.arrDetailsActivity.matches[r]===e&&(t.nameButton="Not interested",t.interestedAct=!1);return t.arrDetailsActivity})},t.interested=function(e,o,n){var i="",s=t.interestedAct;s!==!1?(i="/api/activities/interested",r.post(i,{activityName:e,interestedUser:o,createrUser:n}).success(function(r){console.log(r),console.log(o+" is geïnteresseerd in "+e+" door "+n),t.interestedAct=!1,t.nameButton="Not interested",t.error=r.error})):(console.log(s),i="/api/activities/deleteinterested",r.post(i,{activityName:e,interestedUser:o,createrUser:n}).success(function(r){console.log(r),console.log(o+" is niet meer geïnteresseerd in "+e+" door "+n),t.interestedAct=!0,t.nameButton="Interested",t.error=r.error}))},t.showActivitiesOnHomePage=function(){t.getMostRecentActivities(),t.getMostPopularActivities()},t.getMostRecentActivities=function(){o.getCollection("activities").then(function(o){for(var r=3,n=o.activitielist,i=[],s=0,a=n.length;a>s;s++)new Date(n[s].untilDate).getTime()>=new Date(e).getTime()&&(console.log(new Date(n[s].untilDate)),i.push(n[s]));i.sort(h);for(var c=[],l=0;r>l;l++)c.push(i[l]);for(var u=[],f=0;f<c.length;f++){var d=new Activity("No name",8500,"Together",2,"no description","2016-01-01 00:01","2017-12-31 23:59",new Date,"no username",u);void 0===c[f]&&c.splice(f,1,d)}t.arrMostRecentActivities=c})},t.getMostPopularActivities=function(){o.getCollection("activities").then(function(o){for(var r=3,n=o.activitielist,i=[],s=0,a=n.length;a>s;s++)new Date(n[s].untilDate).getTime()>=new Date(e).getTime()&&i.push(n[s]);for(var c=[],l=0;r>l;l++){var u=f(i);c.push(i[u]),i.splice(u,1)}for(var h=[],d=0;d<c.length;d++){var g=new Activity("No name",8500,"Together",2,"no description","2016-01-01 00:01","2017-12-31 23:59",new Date,"no username",h);void 0===c[d]&&c.splice(d,1,g)}t.arrMostPopularActivities=c})},t.deleteActivity=function(e){o.deleteActivity("activities",e).then(function(e){t.infodeletedActivity=e,console.log(e),t.getActivities()})}};angular.module("app").controller("ActivitiesController",["$scope","dbService","$http","$location","$routeParams","fileUpload",t])}(),function(){"use strict";var e=function(e,t,o,r,n){console.log(t.currentUser.username),console.log(t.contactedUser.username),e.init=function(){chatService.emit("init_users",{user:t.currentUser,collection:"users"})}};angular.module("app").controller("ChatController",["$scope","$rootScope","$routeParams","dbService","$http",e])}(),function(){"use strict";var e=function(e,t){var o=0;e.showDiv=function(){e.filter={showFilter:!0},o++,o>1&&(e.filter={showFilter:!1},o=0)},e.hideDiv=function(){o=0,e.filter={showFilter:!1}},e.sortProperty="title",e.filterQuery="",e.filterMatches=function(t){return""===e.filterQuery?!0:void 0===t.sex?!1:e.filterQuery.toLowerCase()==t.sex.toLowerCase()?!0:("nofilter"===e.filterQuery.toLowerCase()&&(e.filterQuery=""),!1)},e.intersect=function(e,t){var o,r,n=[],i={},s=t.length;for(o=0;s>o;o++)i[t[o]]=!0;for(s=e.length,o=0;s>o;o++)r=e[o],r in i&&n.push(r);return n},e.showMatches=function(){var o;o=localStorage.getItem("username"),t.getCollection("users").then(function(r){for(var n=r.userlist,i=0;i<n.length;i++)n[i].username===o&&n.splice(i,1);for(var s=0;s<n.length;s++)"admin"===n[s].username&&n.splice(s,1);t.getItem(o).then(function(t){var o=t,r=[];console.log(o.interests);for(var i=0,s=n.length;s>i;i++){var a=[];a=e.intersect(o.interests,n[i].interests),0!==a.length&&n[i].deleted===!1&&r.push(n[i])}e.arrMatches=r})})}};angular.module("app").controller("MatchesController",["$scope","dbService",e])}(),function(){"use strict";var e=function(e,t,o,r,n,i){var s=0;e.startChat=function(o,r){n.post("/chat",{currentUser:o,contactedUser:r}).success(function(o){e.error=o.error,t.currentUser=o.currentUser,t.contactedUser=o.contactedUser,localStorage.setItem("currentusername",t.currentUser.username),localStorage.setItem("contactedusername",t.contactedUser.username),i.path(o.redirect)})},e.showDiv=function(){e.filter={showFilter:!0},s++,s>1&&(e.filter={showFilter:!1},s=0)},e.hideDiv=function(){s=0,e.filter={showFilter:!1}},e.showProfiles=function(){var t="";t=localStorage.getItem("username"),r.getCollection("users").then(function(o){for(var r=o.userlist,n=0;n<r.length;n++)r[n].username===t&&r.splice(n,1);for(var i=0;i<r.length;i++)"admin"===r[i].username&&r.splice(i,1);e.arrProfiles=r})},e.sortProperty="title",e.filterQuery="",e.filterProfiles=function(t){return""===e.filterQuery?!0:void 0===t.sex?!1:e.filterQuery.toLowerCase()==t.sex.toLowerCase()?!0:("nofilter"===e.filterQuery.toLowerCase()&&(e.filterQuery=""),!1)}};angular.module("app").controller("ProfilesController",["$scope","$rootScope","$routeParams","dbService","$http","$location",e])}(),function(){"use strict";var e=function(e,t,o,r){e.getUsers=function(){r.getCollection("users").then(function(t){e.arrUsers=t.userlist;for(var o=0;o<e.arrUsers.length;o++)e.arrUsers[o].deleted===!1?e.deleted=!1:e.deleted=!0})},e.getDetailUser=function(){r.getDetailsUser("users",t.username).then(function(t){e.userDetails=t.correctuser})},e.deleteUser=function(t){r.deleteUser("users",t).then(function(t){e.infodeletedUser=t,e.getUsers()})},e.updateUser=function(){var t=e.user.username,r=e.user.firstname,n=e.user.lastname,i=e.user.birthdate,s=e.user.zipcode,a=e.user.sex,c=e.user.biography,l="/api/users/updateprofile";console.log(l),o.post(l,{username:t,firstname:r,lastname:n,birthdate:i,zipcode:s,sex:a,biography:c}).success(function(t){e.error=t.error,e.information=t,console.log(e.information)})},e.getUserByID=function(){r.getItem("user").then(function(t){console.log(t),e.userProfile=t})}};angular.module("app").controller("UsersController",["$scope","$routeParams","$http","dbService",e])}(),function(){"use strict";var e=[],t=function(t,o,r,n){t.login=function(){r.post("/login",{username:this.username,password:this.password}).success(function(e){console.log(e),o.user=e.user,t.error=e.error,void 0!==o.user&&localStorage.setItem("username",o.user.username),n.path(e.redirect)})},t.interests=["Jazz","Hiphop","New wave","Traveling","Party"],t.lst=[],t.change=function(){t.lst.push("2"),console.log(t.lst)},t.stateChanged=function(t){if(-1!==e.indexOf(t)){var o=e.indexOf(t);o>-1&&e.splice(o,1)}else e.push(t),console.log(e)},t.geolocation="",t.getLocation=function(){function e(e){t.geolocation={latitude:e.coords.latitude,longitude:e.coords.longitude},console.log(t.geolocation)}function o(e){switch(t.geolocation=null,e.code){case e.PERMISSION_DENIED:t.error="User denied the request for Geolocation.";break;case e.POSITION_UNAVAILABLE:t.error="Location information is unavailable.";break;case e.TIMEOUT:t.error="The request to get user location timed out.";break;case e.UNKNOWN_ERROR:t.error="An unknown error occurred."}}navigator.geolocation?navigator.geolocation.getCurrentPosition(e,o,{maximumAge:6e5}):t.error="Geolocation is not supported by this browser."},t.register=function(){console.log("REGISTER"),r.post("/register",{firstname:this.firstname,lastname:this.lastname,username:this.username,password:this.password,zipcode:this.zipcode,birthdate:this.birthdate,sex:this.sex,biography:this.biography,geolocation:t.geolocation,interests:e}).success(function(e){t.error=e.error,n.path(e.redirect)})}},o=function(e){e.categories=[""],e.newCategory="",e.saveCategory=function(){}},r=function(t){t.category="",t.showLabel=!1,t.showTextbox=!0,t.saveCategory=function(){t.category?(t.showLabel=!0,t.showTextbox=!1):(t.showLabel=!1,t.showTextbox=!0)},t.edit=function(){t.showLabel=!1,t.showTextbox=!0},t.isChecked=function(t){if(console.log(t)," "!==t)if(-1!==e.indexOf(t)){var o=e.indexOf(t);o>-1&&(e.splice(o,1),console.log(e))}else e.push(t),console.log(e)},t.stateChanged=function(e){}};angular.module("app").controller("loginController",["$scope","$rootScope","$http","$location",t]).controller("signupController",["$scope",o]).controller("editableCheckboxController",["$scope",r])}(),function(){"use strict"}(),function(){"use strict";var e=function(e,t,o,r){o.get("/user").success(function(o){e.user=o,t.user=o,"admin"==o.username?e.auth={isAuth:!0,isAdmin:!0}:"admin"!=o.username&&void 0!==o.username?e.auth={isAuth:!0,isAdmin:!1}:void 0===o.username&&(e.auth={isAuth:!1,isAdmin:!1})})};angular.module("app").controller("userController",["$scope","$rootScope","$http","$location",e])}();
//# sourceMappingURL=data:application/json;base64,
