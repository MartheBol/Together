/**
 * Created by Marthe on 10/12/15.
 */

(function(){
    var app = angular.module("app", ["ngRoute"]);
    app.config(function($routeProvider){
        $routeProvider
            .when("/",{
                templateUrl: "./views/home.html"
            })
            .when("/signup",{
                templateUrl: "views/signup.html"
            })
            .when("/home",{
                templateUrl: "./views/home.html"
            })
            .when("/matches",{
                templateUrl: "./views/matches.html"
            })
            .when("/howto",{
                templateUrl: "./views/howTo.html"
            })
            .when("/activities",{
                templateUrl: "./views/activities.html"
            });
    });
})();
/**
 * Created by iman on 15/12/15.
 */
var Activity = function(img, name, place, keywords, participants, myEvent){
    this.img = img;
    this.name = name;
    this.place = place;
    this.keywords = keywords;
    this.participants = participants;
    this.myEvent = myEvent;
};
/**
 * Created by iman on 5/12/15.
 */
(function(){

    "use strict";

    var activitiesService = function () {

        var getActivities = function () {

            var localUrl = "http://localhost:3000/data/activities.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);

                //console.log(data);

                var arrActivities = [];

                for (var i = 0; i < data.length; i++) {

                    var d = data[i];

                    var newActivity = new Activity();
                    newActivity.img = d.img;
                    newActivity.name = d.name;
                    newActivity.place = d.place;
                    newActivity.participants = d.participants;
                    newActivity.myEvent = d.myEvent;

                    var text = "";

                    for(var ii=0; ii< d.keywords.length; ii++){
                        if(ii == d.keywords.length-1){
                            text += d.keywords[ii];
                        }
                        else{
                            text += d.keywords[ii];
                            text += ", ";
                        }
                    }

                    newActivity.keywords = text;
                    arrActivities.push(newActivity);
                }

                return arrActivities;

            }

        };

        //public gedeelte
        return{

            getActivities:getActivities

        };

    };

    angular.module("app").factory("activitiesService", [activitiesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 15/12/15.
 */

(function(){

    "use strict";

    var dbService = function ($http) {

        var getCollection = function (collection) {


            var url = "http://localhost:3000/api/" + collection;
            return $http.get(url).then(function(response){

                console.log(response);
                return response.data;

            });

        };

        //public gedeelte
        return{

            getCollection:getCollection

        };

    };

    angular.module("app").factory("dbService", ["$http", dbService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */
(function(){

    "use strict";

    var matchesService = function () {

        var getMatches = function (nameUser) {

            var variabelURL = "together";
            var localUrl = "http://localhost:3000/data/matches.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);
                var arr = [];
                var arrMatches = [];
                var arrMatchUsers = [];
                var arrMatchInterests = [];

                for(var i=0; i < data.length; i++){

                    var obj = {
                        "user": data[i].user,
                        "matches":data[i].matches
                    };

                    arr.push(obj);

                }

                for(var ii = 0; ii<arr.length; ii++){

                    var index = arr[ii].user.indexOf(nameUser);
                    if(index === 0){
                        arrMatches.push(arr[ii].matches);
                    }
                    //console.log("Index: "+index);
                }

                //console.log(arr);
                //console.log(arrMatches[0]);


                var arrMatchesByUser = arrMatches[0];
                //console.log("Aantal matches: " + arrMatchesByUser.length);

                return arrMatchesByUser;

                /*
                for(var iii = 0; iii<arrMatches[0].length; iii++){

                    var matchUser = arrMatches[0][iii].user;
                    var matchInterests = arrMatches[0][iii].interests;

                    arrMatchUsers.push(matchUser);
                    arrMatchInterests.push(matchInterests);

                    //console.log(matchUser);
                    //console.log(matchInterests);
                }

                console.log(arrMatchUsers);
                console.log(arrMatchInterests);
                */

            }



        };

        //public gedeelte
        return{

            getMatches:getMatches,

        };

    };

    angular.module("app").factory("matchesService", [matchesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */

(function(){

    "use strict";

    var ActivitiesController = function($scope, dbService) {

        $scope.showActivities = function(){

            $scope.arrActivities = dbService.getCollection('users');

        };
    };

    angular.module("app").controller("ActivitiesController", ["$scope", "dbService", ActivitiesController]);

    /*
     var ActivitiesController = function($scope, activitiesService) {

     $scope.showActivities = function(){

     var arrActivities = activitiesService.getActivities();

     $scope.arrActivities = arrActivities;

     };
     };

     angular.module("app").controller("ActivitiesController", ["$scope", "activitiesService", ActivitiesController]);
     */

})();
/**
 * Created by iman on 5/12/15.
 */

(function(){

    "use strict";

    var MatchesController = function($scope, matchesService) {

        $scope.showMatches = function(){

            var nameUser = "Luna";

            var arrMatchesByUser = matchesService.getMatches(nameUser);

            $scope.aantalMatches = arrMatchesByUser.length;

            $scope.arrMatches = arrMatchesByUser;

            var text = "";
            for(var i=0; i<arrMatchesByUser.length; i++){
                text = arrMatchesByUser[i].interests.toString().replace(" ,", " ");
                arrMatchesByUser[i].interests = text;
            }

        };
    };

    angular.module("app").controller("MatchesController", ["$scope", "matchesService", MatchesController]);

})();
/**
 * Created by Marthe on 15/12/15.
 */
(function(){
    "use strict";

    var loginController = function ($scope, $http, $location) {
        $scope.login = function() {
            $http
                .post('/login', {
                    username: this.username,
                    password: this.password
                })
                .success(function(data) {
                    console.log(data);
                    $scope.error = data.error;
                    $location.path(data.redirect);
                });
        };

        $scope.register = function() {
            console.log("REGISTER");
            $http.post('/register', {
                username : this.username,
                password : this.password
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };
    };

    angular.module("app").controller("loginController", ["$scope", "$http", "$location", loginController]);
})();
/**
 * Created by Marthe on 16/12/15.
 */
(function () {
    "use strict";

    var userController = function ( $scope, $http, $location) {
        $http.get('/user').success(function(data) {
            $scope.user = data;

        });

        /*$scope.logout = function() {
            $http.get('/logout').success(function (data) {
                $location.path(data.redirect);
            });
        };*/
    };


    angular.module("app").controller("userController", ["$scope", "$http", "$location", userController]);
})();
//# sourceMappingURL=data:application/json;base64,
