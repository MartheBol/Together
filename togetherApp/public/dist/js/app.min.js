/**
 * Created by Marthe on 10/12/15.
 */

(function(){
    var app = angular.module("app", ["ngRoute"]);
    app.config(function($routeProvider){
        $routeProvider
            .when("/",{
                templateUrl: "./views/home.html"
            })
            .when("/signup",{
                templateUrl: "views/signup.html"
            })
            .when("/home",{
                templateUrl: "./views/home.html"
            })
            .when("/matches",{
                templateUrl: "./views/matches.html"
            })
            .when("/howto",{
                templateUrl: "./views/howTo.html"
            })
            .when("/activities",{
                templateUrl: "./views/activities.html"
            })
            .when("/admin",{
                templateUrl: "./views/admin.html"
            })
            .when("/searchprofiles",{
                templateUrl: "./views/searchProfiles.html"
            })
            .when("/myprofile",{
                templateUrl: "./views/myProfile.html"
            })
            .when("/userdetails/:username",{
                templateUrl: "./views/detailsUser.html",
                controller: 'UsersController'
            })
            .when("/detailsuser",{
                templateUrl: "./views/detailsUser.html"
            })
            .when("/activitydetails/:activityName", {
                templateUrl: "./views/detailsActivity.html",
                controller: "ActivitiesController"

            })
            .when("/chat",{
                templateUrl: "./views/chat.html"
            });


    });

    app.run(function ($rootScope) {
        $rootScope.user = {};
    });

    app.directive('ngEnter', function () {
        return function (scope, element, attrs) {
            element.bind("keydown keypress", function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.ngEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    });


    app.directive('fileModel', ['$parse', function ($parse) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function(){
                    scope.$apply(function(){
                        modelSetter(scope, element[0].files[0]);
                    });
                });
            }
        };
    }]);

    app.service('fileUpload', ['$http', function ($http) {
        this.uploadFileToUrl = function(file, uploadUrl){
            var fd = new FormData();
            fd.append('file', file);
            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            })
                .success(function(){
                    console.log("success");
                })
                .error(function(){
                    console.log("error");
                });
        };
    }]);


    app.directive('editableCheckbox', function () {
        return {
            restrict: 'E',
            templateUrl: './views/editablecheckbox.html'
        };
    });


})();
/**
 * Created by iman on 15/12/15.
 */
var Activity = function(name, zipcode, street, number, description, dateFrom, dateUntil, timestamp, username, matches){
    this.activityName = name;
    this.zipcode = zipcode;
    this.street = street;
    this.number = number;
    this.description = description;
    this.dateFrom = dateFrom;
    this.dateUntil = dateUntil;
    this.timestamp = timestamp;
    this.username = username;
    this.matches = matches;
};
/**
 * Created by iman on 5/12/15.
 */
/*(function(){

    "use strict";

    var activitiesService = function () {

        var getActivities = function () {

            var localUrl = "http://localhost:3000/data/activities.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);

                //console.log(data);

                var arrActivities = [];

                for (var i = 0; i < data.length; i++) {

                    var d = data[i];

                    var newActivity = new Activity();
                    newActivity.img = d.img;
                    newActivity.name = d.name;
                    newActivity.place = d.place;
                    newActivity.participants = d.participants;
                    newActivity.myEvent = d.myEvent;

                    var text = "";

                    for(var ii=0; ii< d.keywords.length; ii++){
                        if(ii == d.keywords.length-1){
                            text += d.keywords[ii];
                        }
                        else{
                            text += d.keywords[ii];
                            text += ", ";
                        }
                    }

                    newActivity.keywords = text;
                    arrActivities.push(newActivity);
                }

                return arrActivities;

            }

        };

        //public gedeelte
        return{

            getActivities:getActivities

        };

    };

    angular.module("app").factory("activitiesService", [activitiesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();*/
/**
 * Created by Nikita on 7/01/2016.
 */


(function () {

    "use strict";

    var chatService = function ($rootScope) {
        var socket = io.connect(window.location.host);

        var on = function (eventName, callback) {
            socket.on(eventName, function () {
                var args = arguments;
                $rootScope.$apply(function () {
                    callback.apply(socket, args);
                });
            });
        };

        var emit = function (eventName, data, callback) {
            socket.emit(eventName, data, function () {
                var args = arguments;
                $rootScope.$apply(function () {
                    callback.apply(socket, args);
                });
            });
        };


        return {
            on: on,
            emit: emit,
            socket: socket
        };
    };

    angular.module("app").factory("chatService", ["$rootScope", chatService]);

})();
/**
 * Created by iman on 15/12/15.
 */


(function(){

    "use strict";

    var dbService = function ($http) {

        var getCollection = function (collection) {


            var url = "http://localhost:3000/api/" + collection;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getByID = function (collection, id) {
            var url = "http://localhost:3000/api/" + collection + "/" + id;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getDetailsUser = function (collection, username) {
            var url = "http://localhost:3000/api/" + collection + "/userdetail/" + username;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var deleteUser =  function (collection, username) {
            var url = "http://localhost:3000/api/" + collection + "/userdelete/" + username;
            return $http.get(url).then(function (response) {
                return response.data;

            });
        };

        var updateUser = function (collection) {
            var url = "http://localhost:3000/api/" + collection + "/updateprofile";
            return $http.get(url).then(function (response) {
                return response.data;

            });
        };

        var getItem = function(item){

            var url = "http://localhost:3000/api/" + item;
            return $http.get('/user').then(function(response){

                return response.data;

            });

        };

        var getDetailsActivity = function (collection, activityname) {
            var url = "http://localhost:3000/api/" + collection + "/activitydetail/" + activityname;
            return $http.get(url).then(function(response){
                return response.data;


            });

        };

        var deleteActivity =  function (collection, activityId) {
            var url = "http://localhost:3000/api/" + collection + "/activitydelete/" + activityId;
            console.log(url);
            return $http.get(url).then(function (response) {
                console.log(response);
                return response.data;

            });
        };


        var getNoiseWords = function () {

            var url = "http://localhost:3000/data/noisewords.json";
            return $http.get(url).then(function(response){

                return response.data;

            });

        };


        //public gedeelte
        return{

            getCollection:getCollection,
            getByID:getByID,
            getItem:getItem,
            getDetailsUser: getDetailsUser,
            deleteUser: deleteUser,
            updateUser: updateUser,
            getDetailsActivity: getDetailsActivity,
            getNoiseWords: getNoiseWords,
            deleteActivity: deleteActivity

        };

    };

    angular.module("app").factory("dbService", ["$http", dbService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */
(function(){

    "use strict";

    var matchesService = function () {

        var getMatches = function (nameUser) {

            var variabelURL = "together";
            var localUrl = "http://localhost:3000/data/matches.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);
                var arr = [];
                var arrMatches = [];
                var arrMatchUsers = [];
                var arrMatchInterests = [];

                for(var i=0; i < data.length; i++){

                    var obj = {
                        "user": data[i].user,
                        "matches":data[i].matches
                    };

                    arr.push(obj);

                }

                for(var ii = 0; ii<arr.length; ii++){

                    var index = arr[ii].user.indexOf(nameUser);
                    if(index === 0){
                        arrMatches.push(arr[ii].matches);
                    }
                    //console.log("Index: "+index);
                }

                //console.log(arr);
                //console.log(arrMatches[0]);


                var arrMatchesByUser = arrMatches[0];
                //console.log("Aantal matches: " + arrMatchesByUser.length);

                return arrMatchesByUser;

                /*
                for(var iii = 0; iii<arrMatches[0].length; iii++){

                    var matchUser = arrMatches[0][iii].user;
                    var matchInterests = arrMatches[0][iii].interests;

                    arrMatchUsers.push(matchUser);
                    arrMatchInterests.push(matchInterests);

                    //console.log(matchUser);
                    //console.log(matchInterests);
                }

                console.log(arrMatchUsers);
                console.log(arrMatchInterests);
                */

            }



        };

        //public gedeelte
        return{

            getMatches:getMatches,

        };

    };

    angular.module("app").factory("matchesService", [matchesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();

/**
 * Created by iman on 5/12/15.
 */

(function () {

    "use strict";
    var dateTimeNow = new Date().toISOString().substring(0, 10) + " " + new Date().toISOString().substring(11, 16);

    var ActivitiesController = function ($scope, dbService, $http, $location, $routeParams, $route) {
        $scope.interestedAct = true;
        $scope.nameButton = "Interested";

        $scope.getActivities = function () {
            dbService.getCollection('activities').then(function (response) {

                var arrTemp = response.activitielist;
                var arrActs = [];


                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    if (new Date(arrTemp[i].untilDate).getTime() >= new Date(dateTimeNow).getTime()) {

                        if(arrTemp[i].deleted === false){
                            $scope.deleted = false;
                            arrActs.push(arrTemp[i]);
                        }

                        else{
                            $scope.deleted = true;
                        }
                    }
                }

                $scope.arrActivities = arrActs;

            });


        };

        String.prototype.replaceAll = function (token, newToken, ignoreCase) {
            var _token;
            var str = this + "";
            var i = -1;

            if (typeof token === "string") {

                if (ignoreCase) {

                    _token = token.toLowerCase();

                    while ((
                        i = str.toLowerCase().indexOf(
                            token, i >= 0 ? i + newToken.length : 0
                        ) ) !== -1
                        ) {
                        str = str.substring(0, i) +
                            newToken +
                            str.substring(i + token.length);
                    }

                } else {
                    return this.split(token).join(newToken);
                }

            }
            return str;
        };

        function isInArray(value, array) {
            return array.indexOf(value);
        }

        function getKeywordsFromDescription(description, callback) {

            description = description.replaceAll('.', '');
            description = description.replaceAll(',', '');
            description = description.replaceAll('?', '');
            description = description.replaceAll('!', '');
            description = description.replaceAll('"', '');
            description = description.replaceAll("'", '');

            var words = description.split(" ");
            var keyWords = "";

            dbService.getNoiseWords().then(function (response) {

                var noiseWords = response.noisewords;

                for (var i = 0; i < words.length; i++) {

                    if (isInArray(words[i].toLowerCase(), noiseWords) == -1) {
                        keyWords += words[i];
                        keyWords += " ";
                    }
                }

                //return keyWords;
                if (!keyWords.isEmpty) {
                    callback(null, keyWords);
                }

                else {
                    callback("No keywords found.", null);
                }

            });
        }

        function stringConsistOf2Numbers(number, callback) {
            var output = number + '';
            if (output.length < 2) {
                output = '0' + output;
                number = output.toString();

            }
            else {
                number = number.toString();
            }


            if (!number.isEmpty) {
                callback(null, number);
            }

            else {
                callback("No number.", null);
            }


        }

        function fullDate(number, number2, callback) {
            stringConsistOf2Numbers(number, function (error, numberToString) {
                number = numberToString;
                if (error) {
                    console.log(error);

                }
            });
            stringConsistOf2Numbers(number2, function (error, numberToString) {
                number2 = numberToString;
                if (error) {
                    console.log(error);

                }
            });

            if (!number.isEmpty && !number2.isEmpty) {
                callback(null, number, number2);
            }

            else {
                callback("No number.", null);
            }


        }


        $scope.addActivity = function () {
            var activityName = this.activityName;
            var street = this.street;
            var number = this.number;
            var zipcode = this.zipcode;
            var description = this.comment;
            var dateFrom = this.dateFrom;
            var dateUntil = this.dateUntil;
            var timestamp = new Date().getTime();
            var startTimeHour = this.startTimeHour;
            var startTimeMin = this.startTimeMin;
            var endTimeHour = this.endTimeHour;
            var endTimeMin = this.endTimeMin;
            var dateFromDay = this.dateFromDay;
            var dateFromMonth = this.dateFromMonth;
            var dateFromYear = this.dateFromYear.toString();
            var dateUntilDay = this.dateUntilDay;
            var dateUntilMonth = this.dateUntilMonth;
            var dateUntilYear = this.dateUntilYear.toString();

            fullDate(dateFromDay, dateFromMonth, function (error, dateFromdayString, dateFromMonthString) {
                dateFromDay = dateFromdayString;
                dateFromMonth = dateFromMonthString;
                if (error) {
                    console.log(error);
                }
            });
            fullDate(dateUntilDay, dateUntilMonth, function (error, dateUntilDayString, dateUntilMonthString) {
                dateUntilDay = dateUntilDayString;
                dateUntilMonth = dateUntilMonthString;
                if (error) {
                    console.log(error);
                }
            });


            if ((street !== undefined) &&
                (number !== undefined) &&
                (zipcode !== undefined) &&
                (description !== undefined) &&
                (timestamp !== undefined)) {

                $scope.error = "";

                if (startTimeMin < 60 && startTimeHour < 25) {

                    stringConsistOf2Numbers(startTimeHour, function (error, startTimeHourString) {
                        startTimeHour = startTimeHourString;
                        if (error) {
                            console.log(error);
                        }
                    });
                    stringConsistOf2Numbers(startTimeMin, function (error, startTimeMinString) {
                        startTimeMin = startTimeMinString;
                        if (error) {
                            console.log(error);

                        }
                    });

                    console.log(startTimeHour);
                    console.log(startTimeMin);

                    if (startTimeMin.length === 2 && startTimeHour.length === 2) {
                        console.log("je komt hier terecht");

                        if (endTimeMin < 60 && endTimeHour < 24) {
                            stringConsistOf2Numbers(endTimeHour, function (error, endTimeHourString) {
                                endTimeHour = endTimeHourString;
                                if (error) {
                                    console.log(error);
                                }
                            });
                            stringConsistOf2Numbers(endTimeMin, function (error, endTimeMinString) {
                                endTimeMin = endTimeMinString;
                                if (error) {
                                    console.log(error);

                                }
                            });

                            console.log(endTimeHour);
                            console.log(endTimeMin);

                            if (endTimeMin.toString().length === 2 && endTimeHour.toString().length === 2) {

                                console.log(startTimeHour + ":" + startTimeMin);

                                getKeywordsFromDescription(description, function (error, data) {
                                    description = data;
                                    if (!error) {
                                        console.log(startTimeHour + ":" + startTimeMin);

                                        var url = "/api/activities/addactivity";
                                        $http.post(url, {
                                            activityName: activityName,
                                            street: street,
                                            number: number,
                                            zipcode: zipcode,
                                            description: description,
                                            dateFrom: dateFromYear + "-" + dateFromMonth + "-" + dateFromDay + " " + startTimeHour + ":" + startTimeMin,
                                            dateUntil: dateUntilYear + "-" + dateFromMonth + "-" + dateUntilDay + " " + endTimeHour + ":" + endTimeMin,
                                            timestamp: timestamp

                                        }).success(function (data) {
                                            $scope.error = data.error;
                                            $scope.getActivities();
                                            resetForm();

                                            //$location.path(data.redirect);
                                        });

                                    }
                                    else {
                                        console.log(error);
                                    }
                                });
                            }

                            else {
                                $scope.error = "Enddate input is not correct";
                            }
                        }

                        else {
                            $scope.error = "Endtime input is not correct";
                        }

                    }

                    else {
                        $scope.error = 'De startime length is not correct!!!! ';
                    }
                }
                else {
                    $scope.error = "Starttime input is not correct";
                }


            }
            else {
                $scope.error = "ERROR: All fields are required.8888";
            }
        };

        $scope.getDetailActivity = function (currentUser) {
            dbService.getDetailsActivity('activities', $routeParams.activityName).then(function (response) {
                $scope.arrDetailsActivity = response.activity;
                initmap();

                console.log($scope.arrDetailsActivity.matches);
                for (var i = 0; i < $scope.arrDetailsActivity.matches.length; i++) {
                    if ($scope.arrDetailsActivity.matches[i] === currentUser) {
                        $scope.nameButton = "Not interested";
                        $scope.interestedAct = false;
                    }
                }
                return $scope.arrDetailsActivity;


            });
        };

        $scope.interested = function (activityName, interestedUser, createrUser) {
            var url = "";
            var interestedAct = $scope.interestedAct;
            if (interestedAct !== false) {

                url = "/api/activities/interested";
                $http.post(url, {
                    activityName: activityName,
                    interestedUser: interestedUser,
                    createrUser: createrUser
                }).success(function (data) {
                    console.log(data);
                    console.log(interestedUser + " is geïnteresseerd in " + activityName + " door " + createrUser);
                    $scope.interestedAct = false;
                    $scope.nameButton = "Not interested";
                    $scope.error = data.error;
                });
            } else {
                console.log(interestedAct);
                url = "/api/activities/deleteinterested";
                $http.post(url, {
                    activityName: activityName,
                    interestedUser: interestedUser,
                    createrUser: createrUser
                }).success(function (data) {
                    console.log(data);
                    console.log(interestedUser + " is niet meer geïnteresseerd in " + activityName + " door " + createrUser);
                    $scope.interestedAct = true;
                    $scope.nameButton = "Interested";

                    $scope.error = data.error;
                });
            }
        };

        function recentFirst(a, b) {
            if (a.timestamp > b.timestamp)
                return -1;
            if (a.timestamp < b.timestamp)
                return 1;
            return 0;
        }

        function popularFirst(arr) {
            var max = arr[0];
            var maxIndex = 0;

            for (var i = 1; i < arr.length; i++) {
                if (arr[i].matches.length > max.matches.length) {
                    maxIndex = i;
                    max = arr[i];
                }
            }

            return maxIndex;
        }

        $scope.showActivitiesOnHomePage = function(){
            $scope.getMostRecentActivities();
            $scope.getMostPopularActivities();
        };

        $scope.getMostRecentActivities = function () {

            dbService.getCollection('activities').then(function (response) {
                var numberOfActivities = 3;
                var arrTemp = response.activitielist;
                var arrAllActivities = [];


                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    if (new Date(arrTemp[i].untilDate).getTime() >= new Date(dateTimeNow).getTime()) {
                        console.log(new Date(arrTemp[i].untilDate));
                        arrAllActivities.push(arrTemp[i]);
                    }
                }

                arrAllActivities.sort(recentFirst);

                var arrMostRecentActivities = [];

                for (var ii = 0; ii < numberOfActivities; ii++) {
                    arrMostRecentActivities.push(arrAllActivities[ii]);
                }

                var matches = [];

                for (var iii = 0; iii < arrMostRecentActivities.length; iii++) {

                    var dummyActivity = new Activity("No name", 8500, "Together", 2, "no description", "2016-01-01 00:01", "2017-12-31 23:59", new Date(), "no username", matches);
                    if (arrMostRecentActivities[iii] === undefined) {
                        arrMostRecentActivities.splice(iii, 1, dummyActivity);
                    }
                }
                $scope.arrMostRecentActivities = arrMostRecentActivities;

            });
        };

        $scope.getMostPopularActivities = function(){

            dbService.getCollection('activities').then(function(response){

                var numberOfActivities = 3;
                var arrTemp = response.activitielist;
                var arrAllActivities = [];

                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    if(new Date(arrTemp[i].untilDate).getTime() >= new Date(dateTimeNow).getTime()) {
                        //console.log(new Date(arrTemp[i].untilDate));
                        arrAllActivities.push(arrTemp[i]);
                    }
                }

                var arrMostPopularActivities = [];

                for(var j = 0; j < numberOfActivities; j++){

                    var indexMostPop = popularFirst(arrAllActivities);
                    arrMostPopularActivities.push(arrAllActivities[indexMostPop]);
                    arrAllActivities.splice(indexMostPop, 1);
                }

                var matches = [];

                for (var iii = 0; iii < arrMostPopularActivities.length; iii++) {

                    var dummyActivity = new Activity("No name", 8500, "Together", 2, "no description", "2016-01-01 00:01", "2017-12-31 23:59", new Date(), "no username", matches);
                    if (arrMostPopularActivities[iii] === undefined) {
                        arrMostPopularActivities.splice(iii, 1, dummyActivity);
                    }
                }

                $scope.arrMostPopularActivities = arrMostPopularActivities;

            });
        };
        $scope.deleteActivity = function(activityId){
            dbService.deleteActivity('activities', activityId).then(function(response){
                $scope.infodeletedActivity = response;
                console.log(response);
                $scope.getActivities();
            });
        };


        function initmap(){
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 8,
                center: {lat: 50.8194894, lng: 3.2577076}
            });
            var geocoder = new google.maps.Geocoder();

            geocodeAddress(geocoder, map);

        }


        function geocodeAddress(geocoder, resultsMap) {
            var street = $scope.arrDetailsActivity.street;
            var number = $scope.arrDetailsActivity.number;
            var zipcode = $scope.arrDetailsActivity.zipcode;

            var address = street + " " + number + ", " + zipcode; //hier address uit db instoppen

            geocoder.geocode({'address': address}, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    resultsMap.setCenter(results[0].geometry.location);
                    var image = "../../images/marker.png";
                    var marker = new google.maps.Marker({
                        map: resultsMap,
                        position: results[0].geometry.location,
                        icon: image
                    });

                    console.log(marker);

                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        function resetForm() {
            var frm = document.getElementsByName('ActivityForm')[0];
            console.log('je komt in de resetform');
            frm.reset();
        }
    };

    angular.module("app").controller("ActivitiesController", ["$scope", "dbService", "$http", "$location", "$routeParams", "fileUpload", ActivitiesController]);


})();
/**
 * Created by Nikita on 7/01/2016.
 */
(function () {

    "use strict";

    var ChatController = function($scope, $rootScope, $routeParams, dbService, $http) {

        console.log($rootScope.currentUser.username);
        console.log($rootScope.contactedUser.username);
        //$scope.contactedUser.username = $rootScope.contactedUser.username;

        $scope.init = function () {
            chatService.emit("init_users",{user:$rootScope.currentUser, collection:"users"});
        };

    };
    angular.module("app").controller("ChatController", ["$scope", "$rootScope", "$routeParams", "dbService","$http", ChatController]);

})();
/**
 * Created by iman on 5/12/15.
 */

(function(){

    "use strict";

    var MatchesController = function($scope, dbService) {

        var clicksOnBtn = 0;

        $scope.showDiv = function(){
            $scope.filter = {showFilter:true};
            clicksOnBtn++;

            if(clicksOnBtn > 1){
                $scope.filter = {showFilter:false};
                clicksOnBtn = 0;
            }
        };

        $scope.hideDiv = function(){
            clicksOnBtn = 0;
            $scope.filter = {showFilter:false};
        };

        $scope.sortProperty = "title";
        $scope.filterQuery = "";
        $scope.filterMatches = function(i){
            if($scope.filterQuery === ""){
                return true;
            }

            /*
             else if(i.username.toLowerCase().indexOf($scope.filterQuery.toLocaleLowerCase()) >= 0){
             return true;
             }
             */

            else if(i.sex === undefined){
                return false;
            }

            else if($scope.filterQuery.toLowerCase() == i.sex.toLowerCase()){
                return true;
            }

            else if($scope.filterQuery.toLowerCase() === "nofilter"){
                $scope.filterQuery = "";
            }

            return false;
        };

        //http://www.falsepositives.com/index.php/2009/12/01/javascript-function-to-get-the-intersect-of-2-arrays/
        $scope.intersect = function(arr1, arr2)
        {
            var r = [], o = {}, l = arr2.length, i, v;
            for (i = 0; i < l; i++) {
                o[arr2[i]] = true;
            }
            l = arr1.length;
            for (i = 0; i < l; i++) {
                v = arr1[i];
                if (v in o) {
                    r.push(v);
                }
            }

            return r;
        };

        $scope.showMatches = function(){

            /*
             var username = "";
             if($rootScope.user.username !== undefined){
             username = $rootScope.user.username;
             }
             */

            var username;

            username = localStorage.getItem("username");

            dbService.getCollection('users').then(function(response){

                var arrProfiles = response.userlist;
                for(var i = 0; i < arrProfiles.length; i++){
                    if(arrProfiles[i].username === username) {
                        arrProfiles.splice(i, 1);
                    }
                }
                for(var ii = 0; ii < arrProfiles.length; ii++){
                    if(arrProfiles[ii].username === "admin") {
                        arrProfiles.splice(ii, 1);
                    }
                }


                dbService.getItem(username).then(function(response){

                    var user = response;
                    var arrMatches = [];

                    console.log(user.interests);

                    for(var i=0, l=arrProfiles.length; i<l; i++){

                        var sameInterests = [];
                        sameInterests = $scope.intersect(user.interests, arrProfiles[i].interests);

                        if(sameInterests.length !== 0){
                            if(arrProfiles[i].deleted === false){
                                arrMatches.push(arrProfiles[i]);
                            }

                        }

                    }

                    $scope.arrMatches = arrMatches;

                });
            });
        };

    };

    angular.module("app").controller("MatchesController", ["$scope", "dbService", MatchesController]);

})();
/**
 * Created by iman on 20/12/15.
 */


(function(){

    "use strict";

    var ProfilesController = function($scope, $rootScope, $routeParams, dbService, $http, $location) {

        var clicksOnBtn = 0;
        $scope.startChat = function(currentUser, contactedUser){
            $http.post("/chat", {
                currentUser: currentUser,
                contactedUser:contactedUser

            }).success(function (data) {
                $scope.error = data.error;
                $rootScope.currentUser = data.currentUser;
                $rootScope.contactedUser = data.contactedUser;

                localStorage.setItem("currentusername", $rootScope.currentUser.username);
                localStorage.setItem("contactedusername", $rootScope.contactedUser.username);

                $location.path(data.redirect);
            });
        };



        $scope.showDiv = function(){
            $scope.filter = {showFilter:true};
            clicksOnBtn++;

            if(clicksOnBtn > 1){
                $scope.filter = {showFilter:false};
                clicksOnBtn = 0;
            }
        };

        $scope.hideDiv = function(){
            clicksOnBtn = 0;
            $scope.filter = {showFilter:false};
        };

        $scope.showProfiles = function(){

            /*
            var username = "";
            if($rootScope.user.username !== undefined){
                username = $rootScope.user.username;
            }
            */
            var username = "";
            username = localStorage.getItem("username");

            dbService.getCollection('users').then(function(response){

                var arrProfiles = response.userlist;
                for(var i = 0; i < arrProfiles.length; i++){
                    if(arrProfiles[i].username === username) {
                        arrProfiles.splice(i, 1);
                    }
                }
                for(var ii = 0; ii < arrProfiles.length; ii++){
                    if(arrProfiles[ii].username === "admin") {
                        arrProfiles.splice(ii, 1);
                    }
                }
                $scope.arrProfiles = arrProfiles;

            });

        };

        $scope.sortProperty = "title";
        $scope.filterQuery = "";
        $scope.filterProfiles = function(i){
            if($scope.filterQuery === ""){
                return true;
            }

            /*
             else if(i.username.toLowerCase().indexOf($scope.filterQuery.toLocaleLowerCase()) >= 0){
             return true;
             }
             */

            else if(i.sex === undefined){
                return false;
            }

            else if($scope.filterQuery.toLowerCase() == i.sex.toLowerCase()){
                return true;
            }

            else if($scope.filterQuery.toLowerCase() === "nofilter"){
                $scope.filterQuery = "";
            }

            return false;
        };
    };

    angular.module("app").controller("ProfilesController", ["$scope", "$rootScope", "$routeParams", "dbService","$http", "$location", ProfilesController]);

})();
/**
 * Created by iman on 20/12/15.
 */
(function(){

    "use strict";

    var UsersController = function($scope, $routeParams, $http, dbService) {

        $scope.getUsers = function(){

            dbService.getCollection('users').then(function(response){

                //console.log(response);
                $scope.arrUsers = response.userlist;

                for( var i = 0; i<$scope.arrUsers.length; i++){

                    if($scope.arrUsers[i].deleted === false){
                        $scope.deleted = false;
                    }

                    else{
                        $scope.deleted = true;
                    }



                }


            });

        };

        $scope.getDetailUser = function(){

            dbService.getDetailsUser('users', $routeParams.username).then(function(response){
                $scope.userDetails = response.correctuser;
            });
        };

        $scope.deleteUser = function(username){
            dbService.deleteUser('users', username).then(function(response){
                $scope.infodeletedUser = response;
                $scope.getUsers();
            });
        };

        $scope.updateUser = function(){
            /*dbService.updateUser('users').then(function(response){
                $scope.updateuser = response;
                console.log(response);
                console.log("gelukt");

            })*/

            var  username =  this.username,
                password = this.password,
                birthdate = this.birthdate,
                zipcode = this.zipcode,
                sex = this.sex,
                biography = this.biography;

            var url = "api/users/updateprofile";
            $http.post(url, {
                username : username,
                password : password,
                birthdate : birthdate,
                zipcode : zipcode,
                sex : sex,
                biography :biography

            }).success(function (data) {
                $scope.error = data.error;

            });

            console.log(username, password, birthdate, zipcode, sex, biography);




        };

        $scope.getUserByID = function(){

            dbService.getItem('user').then(function(response){
                console.log(response);
                $scope.userProfile = response;

            });


        };


    };

    angular.module("app").controller("UsersController", ["$scope","$routeParams", "$http", "dbService", UsersController]);

})();
/**
 * Created by Marthe on 15/12/15.
 */
(function(){
    "use strict";
    var selectedInterest = [];

    var loginController = function ($scope, $rootScope, $http, $location) {

        $scope.login = function() {
            $http
                .post('/login', {
                    username: this.username,
                    password: this.password
                })
                .success(function(data) {
                    console.log(data);
                    $rootScope.user = data.user;
                    localStorage.setItem("username", $rootScope.user.username);
                    $scope.error = data.error;
                    $location.path(data.redirect);
                });
        };

        $scope.interests = ['Jazz', 'Hiphop', 'New wave', 'Traveling','Party'];
        $scope.lst = [];
        $scope.change = function(){
            $scope.lst.push('2');
            console.log($scope.lst);
        };
        $scope.stateChanged = function (qId) {
            //if(!$scope.interests[qId]){ //If it is checked
            if(selectedInterest.indexOf(qId) !== -1) {
                //console.log('artNr already exists! DELETE');
                var index = selectedInterest.indexOf(qId);
                if (index > -1) {
                    selectedInterest.splice(index, 1);
                }
            }else{
                selectedInterest.push(qId);
                console.log(selectedInterest);
            }
        };

        $scope.register = function() {
            console.log("REGISTER");


            $http.post('/register', {
                firstname: this.firstname,
                lastname : this.lastname,
                //email : this.email,*/
                username : this.username,
                password : this.password,
                zipcode: this.zipcode,
                birthdate : this.birthdate,
                sex : this.sex,
                biography : this.biography,
                interests:selectedInterest

            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });

        };
    };

    var signupController = function ($scope) {
        $scope.categories = [''];
        $scope.newCategory = "";
        $scope.saveCategory = function () {

        };

    };

    var editableCheckboxController = function ($scope) {
        $scope.category = "";
        $scope.showLabel = false;
        $scope.showTextbox = true;
        $scope.saveCategory = function () {
            if ($scope.category) {
                $scope.showLabel = true;
                $scope.showTextbox = false;
            }
            else {
                $scope.showLabel = false;
                $scope.showTextbox = true;
            }
        };
        $scope.edit = function () {
            $scope.showLabel = false;
            $scope.showTextbox = true;
        };
        $scope.isChecked = function(qId){
            console.log(qId);
            if(qId!==  " ") {
                if (selectedInterest.indexOf(qId) !== -1) {
                    var index = selectedInterest.indexOf(qId);
                    if (index > -1) {
                        selectedInterest.splice(index, 1);
                        console.log(selectedInterest);
                    }
                } else {
                    selectedInterest.push(qId);
                    console.log(selectedInterest);
                }
            }
        };
        $scope.stateChanged = function (qId) {

        };

    };

    angular.module("app")
        .controller("loginController", ["$scope", "$rootScope", "$http", "$location", loginController])
        .controller("signupController", ["$scope", signupController])
        .controller("editableCheckboxController", ["$scope", editableCheckboxController]);
})();
/**
 * Created by Nikita on 21/12/2015.
 */
(function () {
    "use strict";

    /*var signupController = function ($scope) {
        $scope.categories = [''];
        $scope.newCategory = "";
        $scope.saveCategory = function () {

        };

    };

    var editableCheckboxController = function ($scope) {
        $scope.category = "";
        $scope.showLabel = false;
        $scope.showTextbox = true;
        $scope.saveCategory = function () {
            if ($scope.category) {
                $scope.showLabel = true;
                $scope.showTextbox = false;
            }
            else {
                $scope.showLabel = false;
                $scope.showTextbox = true;
            }
        };
        $scope.edit = function () {
            $scope.showLabel = false;
            $scope.showTextbox = true;
        };

    };
    angular.module("app")
        .controller("signupController", ["$scope", signupController])
        .controller("editableCheckboxController", ["$scope", editableCheckboxController]);*/


})();
/**
 * Created by Marthe on 16/12/15.
 */
(function () {
    "use strict";

    var userController = function ($scope, $rootScope, $http, $location) {
        $http.get('/user').success(function(data) {
            $scope.user = data;
            $rootScope.user = data;

            if(data.username == 'admin'){
                $scope.auth = {isAuth: true, isAdmin : true};
            }
            else if(data.username != 'admin' && data.username !== undefined){
                $scope.auth = {isAuth: true, isAdmin : false};
            }
            else if(data.username === undefined){
                $scope.auth = {isAuth: false, isAdmin : false};

            }


        });


        /*$scope.logout = function() {
            $http.get('/logout').success(function (data) {
                $location.path(data.redirect);
            });
        };*/
    };


    angular.module("app").controller("userController", ["$scope", "$rootScope", "$http", "$location", userController]);
})();
//# sourceMappingURL=data:application/json;base64,
