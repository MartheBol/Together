!function(){var e=angular.module("app",["ngRoute"]);e.config(["$routeProvider",function(e){e.when("/",{templateUrl:"./views/home.html"}).when("/signup",{templateUrl:"views/signup.html"}).when("/home",{templateUrl:"./views/home.html"}).when("/matches",{templateUrl:"./views/matches.html"}).when("/howto",{templateUrl:"./views/howTo.html"}).when("/activities",{templateUrl:"./views/activities.html"}).when("/admin",{templateUrl:"./views/admin.html"}).when("/searchprofiles",{templateUrl:"./views/searchProfiles.html"}).when("/myprofile",{templateUrl:"./views/myProfile.html"}).when("/userdetails/:username",{templateUrl:"./views/detailsUser.html",controller:"UsersController"}).when("/detailsuser",{templateUrl:"./views/detailsUser.html"}).when("/activitydetails/:activityName",{templateUrl:"./views/detailsActivity.html",controller:"ActivitiesController"}).when("/chat",{templateUrl:"./views/chat.html"})}]),e.run(["$rootScope",function(e){e.user={}}]),e.directive("ngEnter",function(){return function(e,t,r){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(r.ngEnter)}),t.preventDefault())})}}),e.directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,r,i){var n=e(i.fileModel),o=n.assign;r.bind("change",function(){t.$apply(function(){o(t,r[0].files[0])})})}}}]),e.service("fileUpload",["$http",function(e){this.uploadFileToUrl=function(t,r){var i=new FormData;i.append("file",t),e.post(r,i,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(){console.log("success")}).error(function(){console.log("error")})}}]),e.directive("editableCheckbox",function(){return{restrict:"E",templateUrl:"./views/editablecheckbox.html"}})}();var Activity=function(e,t,r,i,n,o,s,a,c,l){this.activityName=e,this.zipcode=t,this.street=r,this.number=i,this.description=n,this.dateFrom=o,this.dateUntil=s,this.timestamp=a,this.username=c,this.matches=l};!function(){"use strict";var e=function(e){var t=io.connect(window.location.host),r=function(r,i){t.on(r,function(){var r=arguments;e.$apply(function(){i.apply(t,r)})})},i=function(r,i,n){t.emit(r,i,function(){var r=arguments;e.$apply(function(){n.apply(t,r)})})};return{on:r,emit:i,socket:t}};angular.module("app").factory("chatService",["$rootScope",e])}(),function(){"use strict";var e=function(e){var t=function(t){var r="http://localhost:3000/api/"+t;return e.get(r).then(function(e){return e.data})},r=function(t,r){var i="http://localhost:3000/api/"+t+"/"+r;return e.get(i).then(function(e){return e.data})},i=function(t,r){var i="http://localhost:3000/api/"+t+"/userdetail/"+r;return e.get(i).then(function(e){return e.data})},n=function(t,r){var i="http://localhost:3000/api/"+t+"/userdelete/"+r;return e.get(i).then(function(e){return e.data})},o=function(t){return e.get("/user").then(function(e){return e.data})},s=function(t,r){var i="http://localhost:3000/api/"+t+"/activitydetail/"+r;return e.get(i).then(function(e){return e.data})},a=function(t,r){var i="http://localhost:3000/api/"+t+"/activitydelete/"+r;return e.get(i).then(function(e){return e.data})},c=function(){var t="http://localhost:3000/data/noisewords.json";return e.get(t).then(function(e){return e.data})};return{getCollection:t,getByID:r,getItem:o,getDetailsUser:i,deleteUser:n,getDetailsActivity:s,getNoiseWords:c,deleteActivity:a}};angular.module("app").factory("dbService",["$http",e])}(),function(){"use strict";var e=function(){var e=function(e){var t="http://localhost:3000/data/matches.json",r=new XMLHttpRequest;if(r.open("GET",t,!1),r.send(null),200==r.status){for(var i=JSON.parse(r.responseText),n=[],o=[],s=0;s<i.length;s++){var a={user:i[s].user,matches:i[s].matches};n.push(a)}for(var c=0;c<n.length;c++){var l=n[c].user.indexOf(e);0===l&&o.push(n[c].matches)}var u=o[0];return u}};return{getMatches:e}};angular.module("app").factory("matchesService",[e])}(),function(){"use strict";var e=(new Date).toISOString().substring(0,10)+" "+(new Date).toISOString().substring(11,16),t=function(t,r,i,n,o,s){function a(e,t){return t.indexOf(e)}function c(e,t){e=e.replaceAll(".",""),e=e.replaceAll(",",""),e=e.replaceAll("?",""),e=e.replaceAll("!",""),e=e.replaceAll('"',""),e=e.replaceAll("'","");var i=e.split(" "),n="";r.getNoiseWords().then(function(e){for(var r=e.noisewords,o=i.length;o--;)-1==a(i[o].toLowerCase(),r)&&(n+=i[o],n+=" ");n.isEmpty?t("No keywords found.",null):t(null,n)})}function l(e,t){var r=e+"";r.length<2?(r="0"+r,e=r.toString()):e=e.toString(),e.isEmpty?t("No number.",null):t(null,e)}function u(e){return e?""===e.value||void 0===e?!1:!0:void 0}function h(e,t,r){var i=[31,28,31,30,31,30,31,31,30,31,30,31];return(r%4||!(r%100))&&r%400||(i[1]=29),e<=i[--t]}function f(e,t){return e.timestamp>t.timestamp?-1:e.timestamp<t.timestamp?1:0}function d(e){for(var t=e[0],r=0,i=1;i<e.length;i++)e[i].matches.length>t.matches.length&&(r=i,t=e[i]);return r}function m(){var e=new google.maps.Map(document.getElementById("map"),{zoom:8,center:{lat:50.8194894,lng:3.2577076}}),t=new google.maps.Geocoder;p(t,e)}function p(e,r){var i=t.arrDetailsActivity.street,n=t.arrDetailsActivity.number,o=t.arrDetailsActivity.zipcode,s=i+" "+n+", "+o;e.geocode({address:s},function(e,t){if(t===google.maps.GeocoderStatus.OK){r.setCenter(e[0].geometry.location);var i="../../images/marker.png";new google.maps.Marker({map:r,position:e[0].geometry.location,icon:i})}else alert("Geocode was not successful for the following reason: "+t)})}function g(){var e=document.getElementsByName("ActivityForm")[0];e.reset()}t.interestedAct=!0,t.nameButton="Interested";var v=1;t.filter={showFilter:!0},t.showTableActivities=function(){t.filter={showFilter:!0},v++,v>1&&(t.filter={showFilter:!1},v=0)},t.hideTableActivities=function(){v=0,t.filter={showFilter:!1}},t.getActivities=function(){r.getCollection("activities").then(function(r){for(var i=r.activitielist,n=[],o=i.length;o--;)new Date(i[o].untilDate).getTime()>=new Date(e).getTime()&&(i[o].deleted===!1?(t.deleted=!1,n.push(i[o])):t.deleted=!0);t.arrActivities=n})},String.prototype.replaceAll=function(e,t,r){var i,n=this+"",o=-1;if("string"==typeof e){if(!r)return this.split(e).join(t);for(i=e.toLowerCase();-1!==(o=n.toLowerCase().indexOf(e,o>=0?o+t.length:0));)n=n.substring(0,o)+t+n.substring(o+e.length)}return n},t.addActivity=function(){var e=(new Date).getTime();if(u(this.activityName)&&u(this.street)&&u(this.number)&&u(this.zipcode)&&u(this.comment)){t.error="";var r=this.activityName,n=this.street,o=this.number,s=this.zipcode,a=this.comment,f=this.startTimeHour,d=this.startTimeMin,m=this.endTimeHour,p=this.endTimeMin,v="",w="",y="",U="",A="",b="";h(this.dateFromDay,this.dateFromMonth,this.dateFromYear)&&h(this.dateUntilDay,this.dateUntilMonth,this.dateUntilYear)?(t.error="",v=this.dateFromDay,w=this.dateFromMonth,y=this.dateFromYear.toString(),U=this.dateUntilDay,A=this.dateUntilMonth,b=this.dateUntilYear.toString(),60>d&&24>f?(l(f,function(e,t){f=t,e&&console.log(e)}),l(d,function(e,t){d=t,e&&console.log(e)}),2===d.length&&2===f.length?60>p&&24>m?(l(m,function(e,r){m=r,e&&(t.error=e)}),l(p,function(e,r){p=r,e&&(t.error=e)}),2===p.toString().length&&2===m.toString().length?new Date(y+"-"+w+"-"+v+" "+f+":"+d).getTime()<=new Date(b+"-"+A+"-"+U+" "+m+":"+p).getTime()&&(new Date(b+"-"+A+"-"+U+" "+m+":"+p).getTime()>(new Date).getTime()?c(a,function(c,l){if(a=l,c)t.error=c;else{var u="/api/activities/addactivity";i.post(u,{activityName:r,street:n,number:o,zipcode:s,description:a,dateFrom:y+"-"+w+"-"+v+" "+f+":"+d,dateUntil:b+"-"+A+"-"+U+" "+m+":"+p,timestamp:e}).success(function(e){t.error=e.error,t.getActivities(),g()})}}):t.error="Enddate can't be before today"):t.error="Enddate input is not correct"):t.error="Endtime input is not correct":t.error="De startime length is not correct"):t.error="Starttime input is not correct"):t.error="Please enter valid dates"}else t.error="All fields are required when adding a new activity."},t.getDetailActivity=function(e){r.getDetailsActivity("activities",o.activityName).then(function(r){t.arrDetailsActivity=r.activity,m();for(var i=t.arrDetailsActivity.matches.length;i--;)t.arrDetailsActivity.matches[i]===e&&(t.nameButton="Not interested",t.interestedAct=!1);return t.arrDetailsActivity})},t.interested=function(e,r,n){var o="",s=t.interestedAct;s!==!1?(o="/api/activities/interested",i.post(o,{activityName:e,interestedUser:r,createrUser:n}).success(function(e){t.interestedAct=!1,t.nameButton="Not interested",t.error=e.error})):(o="/api/activities/deleteinterested",i.post(o,{activityName:e,interestedUser:r,createrUser:n}).success(function(e){t.interestedAct=!0,t.nameButton="Interested",t.error=e.error}))},t.showActivitiesOnHomePage=function(){t.getMostRecentActivities(),t.getMostPopularActivities()},t.getMostRecentActivities=function(){r.getCollection("activities").then(function(r){for(var i=3,n=r.activitielist,o=[],s=0;s<n.length;s++)new Date(n[s].untilDate).getTime()>=new Date(e).getTime()&&o.push(n[s]);o.sort(f);for(var a=[],c=0;i>c;c++)a.push(o[c]);for(var l=[],u=0;u<a.length;u++){var h=new Activity("No name",8500,"Together",2,"no description","2016-01-01 00:01","2017-12-31 23:59",new Date,"no username",l);void 0===a[u]&&a.splice(u,1,h)}t.arrMostRecentActivities=a})},t.getMostPopularActivities=function(){r.getCollection("activities").then(function(r){for(var i=3,n=r.activitielist,o=[],s=n.length;s--;)new Date(n[s].untilDate).getTime()>=new Date(e).getTime()&&o.push(n[s]);for(var a=[],c=0;i>c;c++){var l=d(o);a.push(o[l]),o.splice(l,1)}for(var u=[],h=a.length;h--;){var f=new Activity("No name",8500,"Together",2,"no description","2016-01-01 00:01","2017-12-31 23:59",new Date,"no username",u);void 0===a[h]&&a.splice(h,1,f)}t.arrMostPopularActivities=a})},t.deleteActivity=function(e){r.deleteActivity("activities",e).then(function(e){t.infodeletedActivity=e,t.getActivities()})}};angular.module("app").controller("ActivitiesController",["$scope","dbService","$http","$location","$routeParams","fileUpload",t])}(),function(){"use strict";function e(e,t,r){e.init=function(){},r.emit("halloNikita"),e.messages=[],e.message="",e.sendMessage=function(){if(console.log(this.message),""!==this.message&&null!==this.message){var i={user:t.currentUser,text:this.message,receiver:t.contactedUser.username};e.messages.push(i),r.emit("message",i),e.message=""}},r.on("message_receiver",function(t){console.log("JE BENT ER!"),console.log(t.message),console.log(t.sender),e.messages.push({text:t.message,user:t.sender})})}angular.module("app").controller("ChatController",["$scope","$rootScope","chatService",e])}(),function(){"use strict";var e=function(e,t){var r=0;e.showDiv=function(){e.filter={showFilter:!0},r++,r>1&&(e.filter={showFilter:!1},r=0)},e.hideDiv=function(){r=0,e.filter={showFilter:!1}},e.sortProperty="title",e.filterQuery="",e.filter2Query="",e.filterMatches=function(t){return""===e.filterQuery?!0:void 0===t.sex?!1:e.filterQuery.toLowerCase()==t.sex.toLowerCase()?!0:("nofilter"===e.filterQuery.toLowerCase()&&(e.filterQuery=""),!1)},e.filter2Matches=function(t){return""===e.filter2Query?!0:void 0===t?!1:void 0===t.zipcode?!1:e.filter2Query==t.zipcode?!0:(""===e.filter2Query.toLowerCase()&&(e.filter2Query=""),!1)},e.intersect=function(e,t){var r,i,n=[],o={},s=t.length;for(r=0;s>r;r++)o[t[r]]=!0;for(s=e.length,r=0;s>r;r++)i=e[r],i in o&&n.push(i);return n},e.showMatches=function(){var r;r=localStorage.getItem("username"),t.getCollection("users").then(function(i){for(var n=i.userlist,o=0;o<n.length;o++)n[o].username===r&&n.splice(o,1);for(var s=0;s<n.length;s++)"admin"===n[s].username&&n.splice(s,1);t.getItem(r).then(function(t){for(var r=t,i=[],o=n.length;o--;){var s=[];s=e.intersect(r.interests,n[o].interests),0!==s.length&&n[o].deleted===!1&&i.push(n[o])}e.arrMatches=i})})},e.searchInMatches=function(){if(""!==e.filter2Query){for(var t=[],r=0,i=e.arrMatches.length;i>r;r++)e.arrMatches[r].zipcode==e.filter2Query&&t.push(e.arrMatches[r]);e.arrMatches=t}else""===e.filter2Query&&e.showMatches()}};angular.module("app").controller("MatchesController",["$scope","dbService",e])}(),function(){"use strict";var e=function(e,t,r,i,n,o){e.startChat=function(r,i){n.post("/chat",{currentUser:r,contactedUser:i}).success(function(r){e.error=r.error,t.currentUser=r.currentUser,t.contactedUser=r.contactedUser,localStorage.setItem("currentusername",t.currentUser.username),localStorage.setItem("contactedusername",t.contactedUser.username),o.path(r.redirect)})};var s=0;e.showDiv=function(){e.filter={showFilter:!0},s++,s>1&&(e.filter={showFilter:!1},s=0)},e.hideDiv=function(){s=0,e.filter={showFilter:!1}},e.showProfiles=function(){var t="";t=localStorage.getItem("username"),i.getCollection("users").then(function(r){for(var i=r.userlist,n=i.length;n--;)i[n].username===t&&i.splice(n,1);for(var o=i.length;o--;)"admin"===i[o].username&&i.splice(o,1);e.arrProfiles=i})},e.sortProperty="title",e.filterQuery="",e.filter2Query="",e.filterProfiles=function(t){return""===e.filterQuery?!0:void 0===t.sex?!1:e.filterQuery.toLowerCase()==t.sex.toLowerCase()?!0:("nofilter"===e.filterQuery.toLowerCase()&&(e.filterQuery=""),!1)},e.searchInProfiles=function(){if(""!==e.filter2Query){for(var t=[],r=0,i=e.arrProfiles.length;i>r;r++)e.arrProfiles[r].zipcode==e.filter2Query&&t.push(e.arrProfiles[r]);e.arrProfiles=t}else""===e.filter2Query&&e.showProfiles()}};angular.module("app").controller("ProfilesController",["$scope","$rootScope","$routeParams","dbService","$http","$location",e])}(),function(){"use strict";var e=function(e,t,r,i){e.getUsers=function(){i.getCollection("users").then(function(t){for(var r=(localStorage.getItem("username"),t.userlist),i=r.length;i--;)r[i].deleted===!1?e.deleted=!1:e.deleted=!0;for(var n=r.length;n--;)"admin"===r[n].username&&r.splice(n,1);e.arrUsers=r})},e.getDetailUser=function(){i.getDetailsUser("users",t.username).then(function(t){e.userDetails=t.correctuser})},e.deleteUser=function(t){i.deleteUser("users",t).then(function(t){e.infodeletedUser=t,e.getUsers()})},e.updateUser=function(){var t=e.user.username,i=e.user.firstname,n=e.user.lastname,o=e.user.birthdate,s=e.user.zipcode,a=e.user.sex,c=e.user.biography,l="/api/users/updateprofile";r.post(l,{username:t,firstname:i,lastname:n,birthdate:o,zipcode:s,sex:a,biography:c}).success(function(t){e.error=t.error,e.information=t})},e.getUserByID=function(){i.getItem("user").then(function(t){e.userProfile=t})};var n=0;e.showTableUsers=function(){e.filter={showFilter:!0},n++,n>1&&(e.filter={showFilter:!1},n=0)},e.hideTableUsers=function(){n=0,e.filter={showFilter:!1}}};angular.module("app").controller("UsersController",["$scope","$routeParams","$http","dbService",e])}(),function(){"use strict";var e=[],t=function(t,r,i,n,o){function s(e,t,r){var i=[31,28,31,30,31,30,31,31,30,31,30,31];return(r%4||!(r%100))&&r%400||(i[1]=29),e<=i[--t]}function a(e){return e?""===e.value||void 0===e?!1:!0:void 0}function c(e){var t=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;return t.test(e)}function l(e){var t=/^[1-9]{1}[0-9]{3}$/;return t.test(e)}t.login=function(){i.post("/login",{username:this.username,password:this.password}).success(function(e){r.user=e.user,t.error=e.error,o.emit("newUser",r.user.username),void 0!==r.user&&localStorage.setItem("username",r.user.username),n.path(e.redirect)})},t.interests=["Music","Traveling"],t.lst=[],t.change=function(){t.lst.push("2")},t.stateChanged=function(t){if(-1!==e.indexOf(t)){var r=e.indexOf(t);r>-1&&e.splice(r,1)}else e.push(t)},t.geolocation="",t.getLocation=function(){function e(e){t.geolocation={latitude:e.coords.latitude,longitude:e.coords.longitude}}function r(e){switch(t.geolocation=null,e.code){case e.PERMISSION_DENIED:t.error="User denied the request for Geolocation.";break;case e.POSITION_UNAVAILABLE:t.error="Location information is unavailable.";break;case e.TIMEOUT:t.error="The request to get user location timed out.";break;case e.UNKNOWN_ERROR:t.error="An unknown error occurred."}}navigator.geolocation?navigator.geolocation.getCurrentPosition(e,r,{maximumAge:6e5}):t.error="Geolocation is not supported by this browser."},t.register=function(){if(a(this.firstname)&&a(this.lastname)&&a(this.password)&&a(this.sex)&&a(this.biography))if(t.error="",s(this.birthdateDay,this.birthdateMonth,this.birthdateYear)){var r=this.birthdateYear+"-"+this.birthdateMonth+"-"+this.birthdateDay;t.error="",l(this.zipcode)?(t.error="",c(this.username)?(t.error="",i.post("/register",{firstname:this.firstname,lastname:this.lastname,username:this.username,password:this.password,zipcode:this.zipcode,birthdate:r,sex:this.sex,biography:this.biography,geolocation:t.geolocation,interests:e}).success(function(e){t.error=e.error,n.path(e.redirect)})):t.error="Please enter a valid email as username."):t.error="Please enter a valid Belgian postcode."}else t.error="Please enter a valid date as birthdate.";else t.error="All fields are required when making a new account."}},r=function(e){e.categories=[""],e.newCategory="",e.saveCategory=function(){}},i=function(t){t.category="",t.showLabel=!1,t.showTextbox=!0,t.saveCategory=function(){t.category?(t.showLabel=!0,t.showTextbox=!1):(t.showLabel=!1,t.showTextbox=!0)},t.edit=function(){t.showLabel=!1,t.showTextbox=!0},t.isChecked=function(t){if(" "!==t)if(-1!==e.indexOf(t)){var r=e.indexOf(t);r>-1&&e.splice(r,1)}else e.push(t)},t.stateChanged=function(e){}};angular.module("app").controller("loginController",["$scope","$rootScope","$http","$location","chatService",t]).controller("signupController",["$scope",r]).controller("editableCheckboxController",["$scope",i])}(),function(){"use strict";var e=function(e,t,r,i){r.get("/user").success(function(r){e.user=r,t.user=r,"admin"==r.username?e.auth={isAuth:!0,isAdmin:!0}:"admin"!=r.username&&void 0!==r.username?e.auth={isAuth:!0,isAdmin:!1}:void 0===r.username&&(e.auth={isAuth:!1,isAdmin:!1})})};angular.module("app").controller("userController",["$scope","$rootScope","$http","$location",e])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIkFjdGl2aXR5LmpzIiwiY2hhdFNlcnZpY2UuanMiLCJkYlNlcnZpY2UuanMiLCJtYXRjaGVzU2VydmljZS5qcyIsIkFjdGl2aXRpZXNDb250cm9sbGVyLmpzIiwiQ2hhdENvbnRyb2xsZXIuanMiLCJNYXRjaGVzQ29udHJvbGxlci5qcyIsIlByb2ZpbGVzQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwicnVuIiwiJHJvb3RTY29wZSIsInVzZXIiLCJkaXJlY3RpdmUiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsImJpbmQiLCJldmVudCIsIndoaWNoIiwiJGFwcGx5IiwiJGV2YWwiLCJuZ0VudGVyIiwicHJldmVudERlZmF1bHQiLCIkcGFyc2UiLCJyZXN0cmljdCIsImxpbmsiLCJtb2RlbCIsImZpbGVNb2RlbCIsIm1vZGVsU2V0dGVyIiwiYXNzaWduIiwiZmlsZXMiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwidXBsb2FkRmlsZVRvVXJsIiwiZmlsZSIsInVwbG9hZFVybCIsImZkIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJwb3N0IiwidHJhbnNmb3JtUmVxdWVzdCIsImlkZW50aXR5IiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsInVuZGVmaW5lZCIsInN1Y2Nlc3MiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJBY3Rpdml0eSIsIm5hbWUiLCJ6aXBjb2RlIiwic3RyZWV0IiwibnVtYmVyIiwiZGVzY3JpcHRpb24iLCJkYXRlRnJvbSIsImRhdGVVbnRpbCIsInRpbWVzdGFtcCIsInVzZXJuYW1lIiwibWF0Y2hlcyIsImFjdGl2aXR5TmFtZSIsImNoYXRTZXJ2aWNlIiwic29ja2V0IiwiaW8iLCJjb25uZWN0Iiwid2luZG93IiwibG9jYXRpb24iLCJob3N0Iiwib24iLCJldmVudE5hbWUiLCJjYWxsYmFjayIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVtaXQiLCJkYXRhIiwiZmFjdG9yeSIsImRiU2VydmljZSIsImdldENvbGxlY3Rpb24iLCJjb2xsZWN0aW9uIiwidXJsIiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwiZ2V0QnlJRCIsImlkIiwiZ2V0RGV0YWlsc1VzZXIiLCJkZWxldGVVc2VyIiwiZ2V0SXRlbSIsIml0ZW0iLCJnZXREZXRhaWxzQWN0aXZpdHkiLCJhY3Rpdml0eW5hbWUiLCJkZWxldGVBY3Rpdml0eSIsImFjdGl2aXR5SWQiLCJnZXROb2lzZVdvcmRzIiwibWF0Y2hlc1NlcnZpY2UiLCJnZXRNYXRjaGVzIiwibmFtZVVzZXIiLCJsb2NhbFVybCIsInhtbEh0dHAiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZW5kIiwic3RhdHVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYXJyIiwiYXJyTWF0Y2hlcyIsImkiLCJsZW5ndGgiLCJvYmoiLCJwdXNoIiwiaWkiLCJpbmRleCIsImluZGV4T2YiLCJhcnJNYXRjaGVzQnlVc2VyIiwiZGF0ZVRpbWVOb3ciLCJEYXRlIiwidG9JU09TdHJpbmciLCJzdWJzdHJpbmciLCJBY3Rpdml0aWVzQ29udHJvbGxlciIsIiRzY29wZSIsIiRsb2NhdGlvbiIsIiRyb3V0ZVBhcmFtcyIsIiRyb3V0ZSIsImlzSW5BcnJheSIsInZhbHVlIiwiYXJyYXkiLCJnZXRLZXl3b3Jkc0Zyb21EZXNjcmlwdGlvbiIsInJlcGxhY2VBbGwiLCJ3b3JkcyIsInNwbGl0Iiwia2V5V29yZHMiLCJub2lzZVdvcmRzIiwibm9pc2V3b3JkcyIsInRvTG93ZXJDYXNlIiwiaXNFbXB0eSIsInN0cmluZ0NvbnNpc3RPZjJOdW1iZXJzIiwib3V0cHV0IiwidG9TdHJpbmciLCJpc1JlcXVpcmVkRmllbGQiLCJpc1ZhbGlkRGF0ZSIsImQiLCJtIiwieSIsImRheXNJbk1vbnRoIiwicmVjZW50Rmlyc3QiLCJhIiwiYiIsInBvcHVsYXJGaXJzdCIsIm1heCIsIm1heEluZGV4IiwiaW5pdG1hcCIsIm1hcCIsImdvb2dsZSIsIm1hcHMiLCJNYXAiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiem9vbSIsImNlbnRlciIsImxhdCIsImxuZyIsImdlb2NvZGVyIiwiR2VvY29kZXIiLCJnZW9jb2RlQWRkcmVzcyIsInJlc3VsdHNNYXAiLCJhcnJEZXRhaWxzQWN0aXZpdHkiLCJhZGRyZXNzIiwiZ2VvY29kZSIsInJlc3VsdHMiLCJHZW9jb2RlclN0YXR1cyIsIk9LIiwic2V0Q2VudGVyIiwiZ2VvbWV0cnkiLCJpbWFnZSIsIk1hcmtlciIsInBvc2l0aW9uIiwiaWNvbiIsImFsZXJ0IiwicmVzZXRGb3JtIiwiZnJtIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJyZXNldCIsImludGVyZXN0ZWRBY3QiLCJuYW1lQnV0dG9uIiwiY2xpY2tzT25CdG4iLCJmaWx0ZXIiLCJzaG93RmlsdGVyIiwic2hvd1RhYmxlQWN0aXZpdGllcyIsImhpZGVUYWJsZUFjdGl2aXRpZXMiLCJnZXRBY3Rpdml0aWVzIiwiYXJyVGVtcCIsImFjdGl2aXRpZWxpc3QiLCJhcnJBY3RzIiwidW50aWxEYXRlIiwiZ2V0VGltZSIsImRlbGV0ZWQiLCJhcnJBY3Rpdml0aWVzIiwiU3RyaW5nIiwicHJvdG90eXBlIiwidG9rZW4iLCJuZXdUb2tlbiIsImlnbm9yZUNhc2UiLCJfdG9rZW4iLCJzdHIiLCJqb2luIiwiYWRkQWN0aXZpdHkiLCJjb21tZW50Iiwic3RhcnRUaW1lSG91ciIsInN0YXJ0VGltZU1pbiIsImVuZFRpbWVIb3VyIiwiZW5kVGltZU1pbiIsImRhdGVGcm9tRGF5IiwiZGF0ZUZyb21Nb250aCIsImRhdGVGcm9tWWVhciIsImRhdGVVbnRpbERheSIsImRhdGVVbnRpbE1vbnRoIiwiZGF0ZVVudGlsWWVhciIsInN0YXJ0VGltZUhvdXJTdHJpbmciLCJzdGFydFRpbWVNaW5TdHJpbmciLCJlbmRUaW1lSG91clN0cmluZyIsImVuZFRpbWVNaW5TdHJpbmciLCJnZXREZXRhaWxBY3Rpdml0eSIsImN1cnJlbnRVc2VyIiwiYWN0aXZpdHkiLCJpbnRlcmVzdGVkIiwiaW50ZXJlc3RlZFVzZXIiLCJjcmVhdGVyVXNlciIsInNob3dBY3Rpdml0aWVzT25Ib21lUGFnZSIsImdldE1vc3RSZWNlbnRBY3Rpdml0aWVzIiwiZ2V0TW9zdFBvcHVsYXJBY3Rpdml0aWVzIiwibnVtYmVyT2ZBY3Rpdml0aWVzIiwiYXJyQWxsQWN0aXZpdGllcyIsInNvcnQiLCJhcnJNb3N0UmVjZW50QWN0aXZpdGllcyIsImlpaSIsImR1bW15QWN0aXZpdHkiLCJzcGxpY2UiLCJhcnJNb3N0UG9wdWxhckFjdGl2aXRpZXMiLCJqIiwiaW5kZXhNb3N0UG9wIiwiaW5mb2RlbGV0ZWRBY3Rpdml0eSIsIkNoYXRDb250cm9sbGVyIiwiaW5pdCIsIm1lc3NhZ2VzIiwibWVzc2FnZSIsInNlbmRNZXNzYWdlIiwidGV4dCIsInJlY2VpdmVyIiwiY29udGFjdGVkVXNlciIsInNlbmRlciIsIk1hdGNoZXNDb250cm9sbGVyIiwic2hvd0RpdiIsImhpZGVEaXYiLCJzb3J0UHJvcGVydHkiLCJmaWx0ZXJRdWVyeSIsImZpbHRlcjJRdWVyeSIsImZpbHRlck1hdGNoZXMiLCJzZXgiLCJmaWx0ZXIyTWF0Y2hlcyIsImludGVyc2VjdCIsImFycjEiLCJhcnIyIiwidiIsInIiLCJvIiwibCIsInNob3dNYXRjaGVzIiwibG9jYWxTdG9yYWdlIiwiYXJyUHJvZmlsZXMiLCJ1c2VybGlzdCIsInNhbWVJbnRlcmVzdHMiLCJpbnRlcmVzdHMiLCJzZWFyY2hJbk1hdGNoZXMiLCJhcnJaaXBjb2RlV2l0aE1hdGNoZXMiLCJQcm9maWxlc0NvbnRyb2xsZXIiLCJzdGFydENoYXQiLCJzZXRJdGVtIiwicGF0aCIsInJlZGlyZWN0Iiwic2hvd1Byb2ZpbGVzIiwiZmlsdGVyUHJvZmlsZXMiLCJzZWFyY2hJblByb2ZpbGVzIiwiYXJyWmlwY29kZVdpdGhQcm9maWxlcyIsIlVzZXJzQ29udHJvbGxlciIsImdldFVzZXJzIiwiYXJyVXNlcnMiLCJnZXREZXRhaWxVc2VyIiwidXNlckRldGFpbHMiLCJjb3JyZWN0dXNlciIsImluZm9kZWxldGVkVXNlciIsInVwZGF0ZVVzZXIiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIsImJpcnRoZGF0ZSIsImJpb2dyYXBoeSIsImluZm9ybWF0aW9uIiwiZ2V0VXNlckJ5SUQiLCJ1c2VyUHJvZmlsZSIsInNob3dUYWJsZVVzZXJzIiwiaGlkZVRhYmxlVXNlcnMiLCJzZWxlY3RlZEludGVyZXN0IiwibG9naW5Db250cm9sbGVyIiwiaXNWYWxpZEVtYWlsIiwiZW1haWwiLCJwYXR0ZXJuIiwidGVzdCIsImlzVmFsaWRaaXBjb2RlIiwibG9naW4iLCJwYXNzd29yZCIsImxzdCIsImNoYW5nZSIsInN0YXRlQ2hhbmdlZCIsInFJZCIsImdlb2xvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJzdWNjZXNzQ2FsbGJhY2siLCJsYXRpdHVkZSIsImNvb3JkcyIsImxvbmdpdHVkZSIsImVycm9yQ2FsbGJhY2siLCJjb2RlIiwiUEVSTUlTU0lPTl9ERU5JRUQiLCJQT1NJVElPTl9VTkFWQUlMQUJMRSIsIlRJTUVPVVQiLCJVTktOT1dOX0VSUk9SIiwibmF2aWdhdG9yIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwibWF4aW11bUFnZSIsInJlZ2lzdGVyIiwiYmlydGhkYXRlRGF5IiwiYmlydGhkYXRlTW9udGgiLCJiaXJ0aGRhdGVZZWFyIiwic2lnbnVwQ29udHJvbGxlciIsImNhdGVnb3JpZXMiLCJuZXdDYXRlZ29yeSIsInNhdmVDYXRlZ29yeSIsImVkaXRhYmxlQ2hlY2tib3hDb250cm9sbGVyIiwiY2F0ZWdvcnkiLCJzaG93TGFiZWwiLCJzaG93VGV4dGJveCIsImVkaXQiLCJpc0NoZWNrZWQiLCJ1c2VyQ29udHJvbGxlciIsImF1dGgiLCJpc0F1dGgiLCJpc0FkbWluIl0sIm1hcHBpbmdzIjoiQ0FHQSxXQUNBLEdBQUFBLEdBQUFDLFFBQUFDLE9BQUEsT0FBQSxXQUNBRixHQUFBRyxRQUNBLGlCQUNBLFNBQUFDLEdBQ0FBLEVB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IiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgTWFydGhlIG9uIDEwLzEyLzE1LlxuICovXG5cbihmdW5jdGlvbigpe1xuICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZShcImFwcFwiLCBbXCJuZ1JvdXRlXCJdKTtcbiAgICBhcHAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKXtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKFwiL1wiLHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXdzL2hvbWUuaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvc2lnbnVwXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL3NpZ251cC5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9ob21lXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvaG9tZS5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9tYXRjaGVzXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvbWF0Y2hlcy5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9ob3d0b1wiLHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXdzL2hvd1RvLmh0bWxcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKFwiL2FjdGl2aXRpZXNcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9hY3Rpdml0aWVzLmh0bWxcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKFwiL2FkbWluXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvYWRtaW4uaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvc2VhcmNocHJvZmlsZXNcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9zZWFyY2hQcm9maWxlcy5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9teXByb2ZpbGVcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9teVByb2ZpbGUuaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvdXNlcmRldGFpbHMvOnVzZXJuYW1lXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvZGV0YWlsc1VzZXIuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdVc2Vyc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvZGV0YWlsc3VzZXJcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9kZXRhaWxzVXNlci5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9hY3Rpdml0eWRldGFpbHMvOmFjdGl2aXR5TmFtZVwiLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9kZXRhaWxzQWN0aXZpdHkuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiQWN0aXZpdGllc0NvbnRyb2xsZXJcIlxuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvY2hhdFwiLHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXdzL2NoYXQuaHRtbFwiXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgfSk7XG5cbiAgICBhcHAucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IHt9O1xuICAgIH0pO1xuXG4gICAgYXBwLmRpcmVjdGl2ZSgnbmdFbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYmluZChcImtleWRvd24ga2V5cHJlc3NcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdFbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG5cblxuICAgIGFwcC5kaXJlY3RpdmUoJ2ZpbGVNb2RlbCcsIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9ICRwYXJzZShhdHRycy5maWxlTW9kZWwpO1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbFNldHRlciA9IG1vZGVsLmFzc2lnbjtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYmluZCgnY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRlcihzY29wZSwgZWxlbWVudFswXS5maWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTtcblxuICAgIGFwcC5zZXJ2aWNlKCdmaWxlVXBsb2FkJywgWyckaHR0cCcsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgICAgICB0aGlzLnVwbG9hZEZpbGVUb1VybCA9IGZ1bmN0aW9uKGZpbGUsIHVwbG9hZFVybCl7XG4gICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIGZkLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuICAgICAgICAgICAgJGh0dHAucG9zdCh1cGxvYWRVcmwsIGZkLCB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuXG5cbiAgICBhcHAuZGlyZWN0aXZlKCdlZGl0YWJsZUNoZWNrYm94JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi92aWV3cy9lZGl0YWJsZWNoZWNrYm94Lmh0bWwnXG4gICAgICAgIH07XG4gICAgfSk7XG5cblxufSkoKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgaW1hbiBvbiAxNS8xMi8xNS5cbiAqL1xudmFyIEFjdGl2aXR5ID0gZnVuY3Rpb24obmFtZSwgemlwY29kZSwgc3RyZWV0LCBudW1iZXIsIGRlc2NyaXB0aW9uLCBkYXRlRnJvbSwgZGF0ZVVudGlsLCB0aW1lc3RhbXAsIHVzZXJuYW1lLCBtYXRjaGVzKXtcbiAgICB0aGlzLmFjdGl2aXR5TmFtZSA9IG5hbWU7XG4gICAgdGhpcy56aXBjb2RlID0gemlwY29kZTtcbiAgICB0aGlzLnN0cmVldCA9IHN0cmVldDtcbiAgICB0aGlzLm51bWJlciA9IG51bWJlcjtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kYXRlRnJvbSA9IGRhdGVGcm9tO1xuICAgIHRoaXMuZGF0ZVVudGlsID0gZGF0ZVVudGlsO1xuICAgIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaGVzO1xufTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgTmlraXRhIG9uIDcvMDEvMjAxNi5cbiAqL1xuXG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBjaGF0U2VydmljZSA9IGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gICAgICAgIHZhciBzb2NrZXQgPSBpby5jb25uZWN0KHdpbmRvdy5sb2NhdGlvbi5ob3N0KTtcblxuICAgICAgICB2YXIgb24gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc29ja2V0Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc29ja2V0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KGV2ZW50TmFtZSwgZGF0YSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc29ja2V0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uOiBvbixcbiAgICAgICAgICAgIGVtaXQ6IGVtaXQsXG4gICAgICAgICAgICBzb2NrZXQ6IHNvY2tldFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5mYWN0b3J5KFwiY2hhdFNlcnZpY2VcIiwgW1wiJHJvb3RTY29wZVwiLCBjaGF0U2VydmljZV0pO1xuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDE1LzEyLzE1LlxuICovXG5cblxuKGZ1bmN0aW9uKCl7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBkYlNlcnZpY2UgPSBmdW5jdGlvbiAoJGh0dHApIHtcblxuICAgICAgICB2YXIgZ2V0Q29sbGVjdGlvbiA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG5cblxuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGNvbGxlY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldEJ5SUQgPSBmdW5jdGlvbiAoY29sbGVjdGlvbiwgaWQpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvXCIgKyBjb2xsZWN0aW9uICsgXCIvXCIgKyBpZDtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0RGV0YWlsc1VzZXIgPSBmdW5jdGlvbiAoY29sbGVjdGlvbiwgdXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvXCIgKyBjb2xsZWN0aW9uICsgXCIvdXNlcmRldGFpbC9cIiArIHVzZXJuYW1lO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWxldGVVc2VyID0gIGZ1bmN0aW9uIChjb2xsZWN0aW9uLCB1c2VybmFtZSkge1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGNvbGxlY3Rpb24gKyBcIi91c2VyZGVsZXRlL1wiICsgdXNlcm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cblxuICAgICAgICB2YXIgZ2V0SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pe1xuXG4gICAgICAgICAgICB2YXIgdXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL1wiICsgaXRlbTtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy91c2VyJykudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0RGV0YWlsc0FjdGl2aXR5ID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGFjdGl2aXR5bmFtZSkge1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGNvbGxlY3Rpb24gKyBcIi9hY3Rpdml0eWRldGFpbC9cIiArIGFjdGl2aXR5bmFtZTtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWxldGVBY3Rpdml0eSA9ICBmdW5jdGlvbiAoY29sbGVjdGlvbiwgYWN0aXZpdHlJZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGNvbGxlY3Rpb24gKyBcIi9hY3Rpdml0eWRlbGV0ZS9cIiArIGFjdGl2aXR5SWQ7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cblxuICAgICAgICB2YXIgZ2V0Tm9pc2VXb3JkcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2RhdGEvbm9pc2V3b3Jkcy5qc29uXCI7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8vcHVibGljIGdlZGVlbHRlXG4gICAgICAgIHJldHVybntcblxuICAgICAgICAgICAgZ2V0Q29sbGVjdGlvbjpnZXRDb2xsZWN0aW9uLFxuICAgICAgICAgICAgZ2V0QnlJRDpnZXRCeUlELFxuICAgICAgICAgICAgZ2V0SXRlbTpnZXRJdGVtLFxuICAgICAgICAgICAgZ2V0RGV0YWlsc1VzZXI6IGdldERldGFpbHNVc2VyLFxuICAgICAgICAgICAgZGVsZXRlVXNlcjogZGVsZXRlVXNlcixcbiAgICAgICAgICAgIGdldERldGFpbHNBY3Rpdml0eTogZ2V0RGV0YWlsc0FjdGl2aXR5LFxuICAgICAgICAgICAgZ2V0Tm9pc2VXb3JkczogZ2V0Tm9pc2VXb3JkcyxcbiAgICAgICAgICAgIGRlbGV0ZUFjdGl2aXR5OiBkZWxldGVBY3Rpdml0eVxuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcImRiU2VydmljZVwiLCBbXCIkaHR0cFwiLCBkYlNlcnZpY2VdKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeIGRlemUgbmFhbSBiZXBhYWx0IHdlbGtlIG5hYW0gamUgbm9kaWcgaGVidCBpbiBqZSBjb250cm9sbGVyIGFscyB2ZXJ3aWp6aW5nIVxuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDUvMTIvMTUuXG4gKi9cbihmdW5jdGlvbigpe1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgbWF0Y2hlc1NlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGdldE1hdGNoZXMgPSBmdW5jdGlvbiAobmFtZVVzZXIpIHtcblxuICAgICAgICAgICAgdmFyIHZhcmlhYmVsVVJMID0gXCJ0b2dldGhlclwiO1xuICAgICAgICAgICAgdmFyIGxvY2FsVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvZGF0YS9tYXRjaGVzLmpzb25cIjtcbiAgICAgICAgICAgIHZhciB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4bWxIdHRwLm9wZW4oXCJHRVRcIiwgbG9jYWxVcmwsIGZhbHNlKTtcbiAgICAgICAgICAgIHhtbEh0dHAuc2VuZChudWxsKTtcblxuICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJyTWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhcnJNYXRjaFVzZXJzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGFyck1hdGNoSW50ZXJlc3RzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJcIjogZGF0YVtpXS51c2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtYXRjaGVzXCI6ZGF0YVtpXS5tYXRjaGVzXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2gob2JqKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWkgPSAwOyBpaTxhcnIubGVuZ3RoOyBpaSsrKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBhcnJbaWldLnVzZXIuaW5kZXhPZihuYW1lVXNlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyck1hdGNoZXMucHVzaChhcnJbaWldLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJJbmRleDogXCIraW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYXJyKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGFyck1hdGNoZXNbMF0pO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgYXJyTWF0Y2hlc0J5VXNlciA9IGFyck1hdGNoZXNbMF07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkFhbnRhbCBtYXRjaGVzOiBcIiArIGFyck1hdGNoZXNCeVVzZXIubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJNYXRjaGVzQnlVc2VyO1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBmb3IodmFyIGlpaSA9IDA7IGlpaTxhcnJNYXRjaGVzWzBdLmxlbmd0aDsgaWlpKyspe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFVzZXIgPSBhcnJNYXRjaGVzWzBdW2lpaV0udXNlcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoSW50ZXJlc3RzID0gYXJyTWF0Y2hlc1swXVtpaWldLmludGVyZXN0cztcblxuICAgICAgICAgICAgICAgICAgICBhcnJNYXRjaFVzZXJzLnB1c2gobWF0Y2hVc2VyKTtcbiAgICAgICAgICAgICAgICAgICAgYXJyTWF0Y2hJbnRlcmVzdHMucHVzaChtYXRjaEludGVyZXN0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhtYXRjaFVzZXIpO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKG1hdGNoSW50ZXJlc3RzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJNYXRjaFVzZXJzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJNYXRjaEludGVyZXN0cyk7XG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIGdlZGVlbHRlXG4gICAgICAgIHJldHVybntcblxuICAgICAgICAgICAgZ2V0TWF0Y2hlczpnZXRNYXRjaGVzLFxuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcIm1hdGNoZXNTZXJ2aWNlXCIsIFttYXRjaGVzU2VydmljZV0pO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF4gZGV6ZSBuYWFtIGJlcGFhbHQgd2Vsa2UgbmFhbSBqZSBub2RpZyBoZWJ0IGluIGplIGNvbnRyb2xsZXIgYWxzIHZlcndpanppbmchXG5cbn0pKCk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGltYW4gb24gNS8xMi8xNS5cbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGRhdGVUaW1lTm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCkgKyBcIiBcIiArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMTEsIDE2KTtcblxuICAgIHZhciBBY3Rpdml0aWVzQ29udHJvbGxlciA9IGZ1bmN0aW9uICgkc2NvcGUsIGRiU2VydmljZSwgJGh0dHAsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCAkcm91dGUpIHtcbiAgICAgICAgJHNjb3BlLmludGVyZXN0ZWRBY3QgPSB0cnVlO1xuICAgICAgICAkc2NvcGUubmFtZUJ1dHRvbiA9IFwiSW50ZXJlc3RlZFwiO1xuXG4gICAgICAgIHZhciBjbGlja3NPbkJ0biA9IDE7XG5cbiAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOnRydWV9O1xuXG4gICAgICAgICRzY29wZS5zaG93VGFibGVBY3Rpdml0aWVzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRzY29wZS5maWx0ZXIgPSB7c2hvd0ZpbHRlcjp0cnVlfTtcbiAgICAgICAgICAgIGNsaWNrc09uQnRuKys7XG5cbiAgICAgICAgICAgIGlmKGNsaWNrc09uQnRuID4gMSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOmZhbHNlfTtcbiAgICAgICAgICAgICAgICBjbGlja3NPbkJ0biA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmhpZGVUYWJsZUFjdGl2aXRpZXMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY2xpY2tzT25CdG4gPSAwO1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOmZhbHNlfTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0QWN0aXZpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRiU2VydmljZS5nZXRDb2xsZWN0aW9uKCdhY3Rpdml0aWVzJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBhcnJUZW1wID0gcmVzcG9uc2UuYWN0aXZpdGllbGlzdDtcbiAgICAgICAgICAgICAgICB2YXIgYXJyQWN0cyA9IFtdO1xuXG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYXJyVGVtcC5sZW5ndGg7aS0tOyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShhcnJUZW1wW2ldLnVudGlsRGF0ZSkuZ2V0VGltZSgpID49IG5ldyBEYXRlKGRhdGVUaW1lTm93KS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFyclRlbXBbaV0uZGVsZXRlZCA9PT0gZmFsc2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyQWN0cy5wdXNoKGFyclRlbXBbaV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFyckFjdGl2aXRpZXMgPSBhcnJBY3RzO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH07XG5cbiAgICAgICAgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlQWxsID0gZnVuY3Rpb24gKHRva2VuLCBuZXdUb2tlbiwgaWdub3JlQ2FzZSkge1xuICAgICAgICAgICAgdmFyIF90b2tlbjtcbiAgICAgICAgICAgIHZhciBzdHIgPSB0aGlzICsgXCJcIjtcbiAgICAgICAgICAgIHZhciBpID0gLTE7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09IFwic3RyaW5nXCIpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmVDYXNlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX3Rva2VuID0gdG9rZW4udG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKFxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHN0ci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4sIGkgPj0gMCA/IGkgKyBuZXdUb2tlbi5sZW5ndGggOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICApICkgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Rva2VuICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIuc3Vic3RyaW5nKGkgKyB0b2tlbi5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zcGxpdCh0b2tlbikuam9pbihuZXdUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzSW5BcnJheSh2YWx1ZSwgYXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEtleXdvcmRzRnJvbURlc2NyaXB0aW9uKGRlc2NyaXB0aW9uLCBjYWxsYmFjaykge1xuXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2VBbGwoJy4nLCAnJyk7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2VBbGwoJywnLCAnJyk7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2VBbGwoJz8nLCAnJyk7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2VBbGwoJyEnLCAnJyk7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2VBbGwoJ1wiJywgJycpO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlQWxsKFwiJ1wiLCAnJyk7XG5cbiAgICAgICAgICAgIHZhciB3b3JkcyA9IGRlc2NyaXB0aW9uLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IFwiXCI7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5nZXROb2lzZVdvcmRzKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBub2lzZVdvcmRzID0gcmVzcG9uc2Uubm9pc2V3b3JkcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB3b3Jkcy5sZW5ndGg7IGktLTspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbkFycmF5KHdvcmRzW2ldLnRvTG93ZXJDYXNlKCksIG5vaXNlV29yZHMpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlXb3JkcyArPSB3b3Jkc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVdvcmRzICs9IFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4ga2V5V29yZHM7XG4gICAgICAgICAgICAgICAgaWYgKCFrZXlXb3Jkcy5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGtleVdvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soXCJObyBrZXl3b3JkcyBmb3VuZC5cIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN0cmluZ0NvbnNpc3RPZjJOdW1iZXJzKG51bWJlciwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgKyAnJztcbiAgICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSBvdXRwdXQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKCFudW1iZXIuaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG51bWJlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKFwiTm8gbnVtYmVyLlwiLCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmdWxsRGF0ZShudW1iZXIsIG51bWJlcjIsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzdHJpbmdDb25zaXN0T2YyTnVtYmVycyhudW1iZXIsIGZ1bmN0aW9uIChlcnJvciwgbnVtYmVyVG9TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSBudW1iZXJUb1N0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdHJpbmdDb25zaXN0T2YyTnVtYmVycyhudW1iZXIyLCBmdW5jdGlvbiAoZXJyb3IsIG51bWJlclRvU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyMiA9IG51bWJlclRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFudW1iZXIuaXNFbXB0eSAmJiAhbnVtYmVyMi5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbnVtYmVyLCBudW1iZXIyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soXCJObyBudW1iZXIuXCIsIG51bGwpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzUmVxdWlyZWRGaWVsZChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQudmFsdWUgPT09ICcnIHx8IGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTgxMjIyMC9ob3ctdG8tdmFsaWRhdGUtYS1kYXRlXG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWREYXRlKGQsIG0sIHkpIHtcbiAgICAgICAgICAgIC8vIEFzc3VtZSBub3QgbGVhcCB5ZWFyIGJ5IGRlZmF1bHQgKG5vdGUgemVybyBpbmRleCBmb3IgSmFuKVxuICAgICAgICAgICAgdmFyIGRheXNJbk1vbnRoID0gWzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtcblxuICAgICAgICAgICAgLy8gSWYgZXZlbmx5IGRpdmlzaWJsZSBieSA0IGFuZCBub3QgZXZlbmx5IGRpdmlzaWJsZSBieSAxMDAsXG4gICAgICAgICAgICAvLyBvciBpcyBldmVubHkgZGl2aXNpYmxlIGJ5IDQwMCwgdGhlbiBhIGxlYXAgeWVhclxuICAgICAgICAgICAgaWYgKCAoISh5ICUgNCkgJiYgeSAlIDEwMCkgfHwgISh5ICUgNDAwKSkge1xuICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoWzFdID0gMjk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZCA8PSBkYXlzSW5Nb250aFstLW1dO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmFkZEFjdGl2aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBmdWxsRGF0ZSh0aGlzLmRhdGVGcm9tRGF5LCB0aGlzLmRhdGVGcm9tTW9udGgsIGZ1bmN0aW9uIChlcnJvciwgZGF0ZUZyb21kYXlTdHJpbmcsIGRhdGVGcm9tTW9udGhTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGVGcm9tRGF5ID0gZGF0ZUZyb21kYXlTdHJpbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlRnJvbU1vbnRoID0gZGF0ZUZyb21Nb250aFN0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZnVsbERhdGUodGhpcy5kYXRlVW50aWxEYXksIHRoaXMuZGF0ZVVudGlsTW9udGgsIGZ1bmN0aW9uIChlcnJvciwgZGF0ZVVudGlsRGF5U3RyaW5nLCBkYXRlVW50aWxNb250aFN0cmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZVVudGlsRGF5ID0gZGF0ZVVudGlsRGF5U3RyaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZVVudGlsTW9udGggPSBkYXRlVW50aWxNb250aFN0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgaWYgKGlzUmVxdWlyZWRGaWVsZCh0aGlzLmFjdGl2aXR5TmFtZSkgJiZcbiAgICAgICAgICAgICAgICBpc1JlcXVpcmVkRmllbGQodGhpcy5zdHJlZXQpICYmXG4gICAgICAgICAgICAgICAgaXNSZXF1aXJlZEZpZWxkKHRoaXMubnVtYmVyKSAmJlxuICAgICAgICAgICAgICAgIGlzUmVxdWlyZWRGaWVsZCh0aGlzLnppcGNvZGUpICYmXG4gICAgICAgICAgICAgICAgaXNSZXF1aXJlZEZpZWxkKHRoaXMuY29tbWVudCkpe1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gXCJcIjtcblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpdml0eU5hbWUgPSB0aGlzLmFjdGl2aXR5TmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RyZWV0ID0gdGhpcy5zdHJlZXQ7XG4gICAgICAgICAgICAgICAgdmFyIG51bWJlciA9IHRoaXMubnVtYmVyO1xuICAgICAgICAgICAgICAgIHZhciB6aXBjb2RlID0gdGhpcy56aXBjb2RlO1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMuY29tbWVudDtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRUaW1lSG91ciA9IHRoaXMuc3RhcnRUaW1lSG91cjtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRUaW1lTWluID0gdGhpcy5zdGFydFRpbWVNaW47XG4gICAgICAgICAgICAgICAgdmFyIGVuZFRpbWVIb3VyID0gdGhpcy5lbmRUaW1lSG91cjtcbiAgICAgICAgICAgICAgICB2YXIgZW5kVGltZU1pbiA9IHRoaXMuZW5kVGltZU1pbjtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZUZyb21EYXkgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlRnJvbU1vbnRoID0gXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZUZyb21ZZWFyID0gXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZVVudGlsRGF5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZVVudGlsTW9udGggPSBcIlwiO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlVW50aWxZZWFyID0gXCJcIjtcblxuICAgICAgICAgICAgICAgIGlmKGlzVmFsaWREYXRlKHRoaXMuZGF0ZUZyb21EYXksIHRoaXMuZGF0ZUZyb21Nb250aCwgdGhpcy5kYXRlRnJvbVllYXIpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWREYXRlKHRoaXMuZGF0ZVVudGlsRGF5LCB0aGlzLmRhdGVVbnRpbE1vbnRoLCB0aGlzLmRhdGVVbnRpbFllYXIgKSl7XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICBkYXRlRnJvbURheSA9IHRoaXMuZGF0ZUZyb21EYXk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGcm9tTW9udGggPSB0aGlzLmRhdGVGcm9tTW9udGg7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGcm9tWWVhciA9IHRoaXMuZGF0ZUZyb21ZZWFyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVVbnRpbERheSA9IHRoaXMuZGF0ZVVudGlsRGF5O1xuICAgICAgICAgICAgICAgICAgICBkYXRlVW50aWxNb250aCA9IHRoaXMuZGF0ZVVudGlsTW9udGg7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVVbnRpbFllYXIgPSB0aGlzLmRhdGVVbnRpbFllYXIudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lTWluIDwgNjAgJiYgc3RhcnRUaW1lSG91ciA8IDI0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0NvbnNpc3RPZjJOdW1iZXJzKHN0YXJ0VGltZUhvdXIsIGZ1bmN0aW9uIChlcnJvciwgc3RhcnRUaW1lSG91clN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZUhvdXIgPSBzdGFydFRpbWVIb3VyU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdDb25zaXN0T2YyTnVtYmVycyhzdGFydFRpbWVNaW4sIGZ1bmN0aW9uIChlcnJvciwgc3RhcnRUaW1lTWluU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lTWluID0gc3RhcnRUaW1lTWluU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lTWluLmxlbmd0aCA9PT0gMiAmJiBzdGFydFRpbWVIb3VyLmxlbmd0aCA9PT0gMikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZFRpbWVNaW4gPCA2MCAmJiBlbmRUaW1lSG91ciA8IDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0NvbnNpc3RPZjJOdW1iZXJzKGVuZFRpbWVIb3VyLCBmdW5jdGlvbiAoZXJyb3IsIGVuZFRpbWVIb3VyU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lSG91ciA9IGVuZFRpbWVIb3VyU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdDb25zaXN0T2YyTnVtYmVycyhlbmRUaW1lTWluLCBmdW5jdGlvbiAoZXJyb3IsIGVuZFRpbWVNaW5TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFRpbWVNaW4gPSBlbmRUaW1lTWluU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kVGltZU1pbi50b1N0cmluZygpLmxlbmd0aCA9PT0gMiAmJiBlbmRUaW1lSG91ci50b1N0cmluZygpLmxlbmd0aCA9PT0gMikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihuZXcgRGF0ZShkYXRlRnJvbVllYXIgKyBcIi1cIiArIGRhdGVGcm9tTW9udGggKyBcIi1cIiArIGRhdGVGcm9tRGF5ICsgXCIgXCIgKyBzdGFydFRpbWVIb3VyICsgXCI6XCIgKyBzdGFydFRpbWVNaW4pLmdldFRpbWUoKSA8PSBuZXcgRGF0ZShkYXRlVW50aWxZZWFyICsgXCItXCIgKyBkYXRlVW50aWxNb250aCArIFwiLVwiICsgZGF0ZVVudGlsRGF5ICsgXCIgXCIgKyBlbmRUaW1lSG91ciArIFwiOlwiICsgZW5kVGltZU1pbikuZ2V0VGltZSgpKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5ldyBEYXRlKGRhdGVVbnRpbFllYXIgKyBcIi1cIiArIGRhdGVVbnRpbE1vbnRoICsgXCItXCIgKyBkYXRlVW50aWxEYXkgKyBcIiBcIiArIGVuZFRpbWVIb3VyICsgXCI6XCIgKyBlbmRUaW1lTWluKS5nZXRUaW1lKCkgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0S2V5d29yZHNGcm9tRGVzY3JpcHRpb24oZGVzY3JpcHRpb24sIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFwiL2FwaS9hY3Rpdml0aWVzL2FkZGFjdGl2aXR5XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAucG9zdCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlOYW1lOiBhY3Rpdml0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVldDogc3RyZWV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXI6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemlwY29kZTogemlwY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlRnJvbTogZGF0ZUZyb21ZZWFyICsgXCItXCIgKyBkYXRlRnJvbU1vbnRoICsgXCItXCIgKyBkYXRlRnJvbURheSArIFwiIFwiICsgc3RhcnRUaW1lSG91ciArIFwiOlwiICsgc3RhcnRUaW1lTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVW50aWw6IGRhdGVVbnRpbFllYXIgKyBcIi1cIiArIGRhdGVVbnRpbE1vbnRoICsgXCItXCIgKyBkYXRlVW50aWxEYXkgKyBcIiBcIiArIGVuZFRpbWVIb3VyICsgXCI6XCIgKyBlbmRUaW1lTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBkYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QWN0aXZpdGllcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldEZvcm0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyRsb2NhdGlvbi5wYXRoKGRhdGEucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPVwiRW5kZGF0ZSBjYW4ndCBiZSBiZWZvcmUgdG9kYXlcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiRW5kZGF0ZSBpbnB1dCBpcyBub3QgY29ycmVjdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiRW5kdGltZSBpbnB1dCBpcyBub3QgY29ycmVjdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAnRGUgc3RhcnRpbWUgbGVuZ3RoIGlzIG5vdCBjb3JyZWN0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiU3RhcnR0aW1lIGlucHV0IGlzIG5vdCBjb3JyZWN0XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gXCJQbGVhc2UgZW50ZXIgdmFsaWQgZGF0ZXNcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQgd2hlbiBhZGRpbmcgYSBuZXcgYWN0aXZpdHkuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cblxuICAgICAgICAkc2NvcGUuZ2V0RGV0YWlsQWN0aXZpdHkgPSBmdW5jdGlvbiAoY3VycmVudFVzZXIpIHtcbiAgICAgICAgICAgIGRiU2VydmljZS5nZXREZXRhaWxzQWN0aXZpdHkoJ2FjdGl2aXRpZXMnLCAkcm91dGVQYXJhbXMuYWN0aXZpdHlOYW1lKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHkgPSByZXNwb25zZS5hY3Rpdml0eTtcbiAgICAgICAgICAgICAgICBpbml0bWFwKCk7XG5cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9ICRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHkubWF0Y2hlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHkubWF0Y2hlc1tpXSA9PT0gY3VycmVudFVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lQnV0dG9uID0gXCJOb3QgaW50ZXJlc3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVyZXN0ZWRBY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFyckRldGFpbHNBY3Rpdml0eTtcblxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaW50ZXJlc3RlZCA9IGZ1bmN0aW9uIChhY3Rpdml0eU5hbWUsIGludGVyZXN0ZWRVc2VyLCBjcmVhdGVyVXNlcikge1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgaW50ZXJlc3RlZEFjdCA9ICRzY29wZS5pbnRlcmVzdGVkQWN0O1xuICAgICAgICAgICAgaWYgKGludGVyZXN0ZWRBY3QgIT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICB1cmwgPSBcIi9hcGkvYWN0aXZpdGllcy9pbnRlcmVzdGVkXCI7XG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlOYW1lOiBhY3Rpdml0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGludGVyZXN0ZWRVc2VyOiBpbnRlcmVzdGVkVXNlcixcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlclVzZXI6IGNyZWF0ZXJVc2VyXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdGVkQWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lQnV0dG9uID0gXCJOb3QgaW50ZXJlc3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBkYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHVybCA9IFwiL2FwaS9hY3Rpdml0aWVzL2RlbGV0ZWludGVyZXN0ZWRcIjtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KHVybCwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eU5hbWU6IGFjdGl2aXR5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RlZFVzZXI6IGludGVyZXN0ZWRVc2VyLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVyVXNlcjogY3JlYXRlclVzZXJcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdGVkQWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVCdXR0b24gPSBcIkludGVyZXN0ZWRcIjtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBkYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlY2VudEZpcnN0KGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChhLnRpbWVzdGFtcCA+IGIudGltZXN0YW1wKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChhLnRpbWVzdGFtcCA8IGIudGltZXN0YW1wKVxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwb3B1bGFyRmlyc3QoYXJyKSB7XG4gICAgICAgICAgICB2YXIgbWF4ID0gYXJyWzBdO1xuICAgICAgICAgICAgdmFyIG1heEluZGV4ID0gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLm1hdGNoZXMubGVuZ3RoID4gbWF4Lm1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gYXJyW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLnNob3dBY3Rpdml0aWVzT25Ib21lUGFnZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkc2NvcGUuZ2V0TW9zdFJlY2VudEFjdGl2aXRpZXMoKTtcbiAgICAgICAgICAgICRzY29wZS5nZXRNb3N0UG9wdWxhckFjdGl2aXRpZXMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0TW9zdFJlY2VudEFjdGl2aXRpZXMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5nZXRDb2xsZWN0aW9uKCdhY3Rpdml0aWVzJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgbnVtYmVyT2ZBY3Rpdml0aWVzID0gMztcbiAgICAgICAgICAgICAgICB2YXIgYXJyVGVtcCA9IHJlc3BvbnNlLmFjdGl2aXRpZWxpc3Q7XG4gICAgICAgICAgICAgICAgdmFyIGFyckFsbEFjdGl2aXRpZXMgPSBbXTtcblxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJUZW1wLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGFyclRlbXBbaV0udW50aWxEYXRlKS5nZXRUaW1lKCkgPj0gbmV3IERhdGUoZGF0ZVRpbWVOb3cpLmdldFRpbWUoKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJBbGxBY3Rpdml0aWVzLnB1c2goYXJyVGVtcFtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhcnJBbGxBY3Rpdml0aWVzLnNvcnQocmVjZW50Rmlyc3QpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFyck1vc3RSZWNlbnRBY3Rpdml0aWVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbnVtYmVyT2ZBY3Rpdml0aWVzOyBpaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyck1vc3RSZWNlbnRBY3Rpdml0aWVzLnB1c2goYXJyQWxsQWN0aXZpdGllc1tpaV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpaWkgPSAwOyBpaWkgPCBhcnJNb3N0UmVjZW50QWN0aXZpdGllcy5sZW5ndGg7IGlpaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1bW15QWN0aXZpdHkgPSBuZXcgQWN0aXZpdHkoXCJObyBuYW1lXCIsIDg1MDAsIFwiVG9nZXRoZXJcIiwgMiwgXCJubyBkZXNjcmlwdGlvblwiLCBcIjIwMTYtMDEtMDEgMDA6MDFcIiwgXCIyMDE3LTEyLTMxIDIzOjU5XCIsIG5ldyBEYXRlKCksIFwibm8gdXNlcm5hbWVcIiwgbWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJNb3N0UmVjZW50QWN0aXZpdGllc1tpaWldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyck1vc3RSZWNlbnRBY3Rpdml0aWVzLnNwbGljZShpaWksIDEsIGR1bW15QWN0aXZpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5hcnJNb3N0UmVjZW50QWN0aXZpdGllcyA9IGFyck1vc3RSZWNlbnRBY3Rpdml0aWVzO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0TW9zdFBvcHVsYXJBY3Rpdml0aWVzID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgZGJTZXJ2aWNlLmdldENvbGxlY3Rpb24oJ2FjdGl2aXRpZXMnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblxuICAgICAgICAgICAgICAgIHZhciBudW1iZXJPZkFjdGl2aXRpZXMgPSAzO1xuICAgICAgICAgICAgICAgIHZhciBhcnJUZW1wID0gcmVzcG9uc2UuYWN0aXZpdGllbGlzdDtcbiAgICAgICAgICAgICAgICB2YXIgYXJyQWxsQWN0aXZpdGllcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGFyclRlbXAubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKG5ldyBEYXRlKGFyclRlbXBbaV0udW50aWxEYXRlKS5nZXRUaW1lKCkgPj0gbmV3IERhdGUoZGF0ZVRpbWVOb3cpLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyQWxsQWN0aXZpdGllcy5wdXNoKGFyclRlbXBbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGFyck1vc3RQb3B1bGFyQWN0aXZpdGllcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IG51bWJlck9mQWN0aXZpdGllczsgaisrKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhNb3N0UG9wID0gcG9wdWxhckZpcnN0KGFyckFsbEFjdGl2aXRpZXMpO1xuICAgICAgICAgICAgICAgICAgICBhcnJNb3N0UG9wdWxhckFjdGl2aXRpZXMucHVzaChhcnJBbGxBY3Rpdml0aWVzW2luZGV4TW9zdFBvcF0pO1xuICAgICAgICAgICAgICAgICAgICBhcnJBbGxBY3Rpdml0aWVzLnNwbGljZShpbmRleE1vc3RQb3AsIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpaWkgPSAgYXJyTW9zdFBvcHVsYXJBY3Rpdml0aWVzLmxlbmd0aDsgaWlpLS07KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1bW15QWN0aXZpdHkgPSBuZXcgQWN0aXZpdHkoXCJObyBuYW1lXCIsIDg1MDAsIFwiVG9nZXRoZXJcIiwgMiwgXCJubyBkZXNjcmlwdGlvblwiLCBcIjIwMTYtMDEtMDEgMDA6MDFcIiwgXCIyMDE3LTEyLTMxIDIzOjU5XCIsIG5ldyBEYXRlKCksIFwibm8gdXNlcm5hbWVcIiwgbWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJNb3N0UG9wdWxhckFjdGl2aXRpZXNbaWlpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJNb3N0UG9wdWxhckFjdGl2aXRpZXMuc3BsaWNlKGlpaSwgMSwgZHVtbXlBY3Rpdml0eSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXJyTW9zdFBvcHVsYXJBY3Rpdml0aWVzID0gYXJyTW9zdFBvcHVsYXJBY3Rpdml0aWVzO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGVsZXRlQWN0aXZpdHkgPSBmdW5jdGlvbihhY3Rpdml0eUlkKXtcbiAgICAgICAgICAgIGRiU2VydmljZS5kZWxldGVBY3Rpdml0eSgnYWN0aXZpdGllcycsIGFjdGl2aXR5SWQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICRzY29wZS5pbmZvZGVsZXRlZEFjdGl2aXR5ID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldEFjdGl2aXRpZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRtYXAoKXtcbiAgICAgICAgICAgIHZhciBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSwge1xuICAgICAgICAgICAgICAgIHpvb206IDgsXG4gICAgICAgICAgICAgICAgY2VudGVyOiB7bGF0OiA1MC44MTk0ODk0LCBsbmc6IDMuMjU3NzA3Nn1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XG5cbiAgICAgICAgICAgIGdlb2NvZGVBZGRyZXNzKGdlb2NvZGVyLCBtYXApO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZW9jb2RlQWRkcmVzcyhnZW9jb2RlciwgcmVzdWx0c01hcCkge1xuICAgICAgICAgICAgdmFyIHN0cmVldCA9ICRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHkuc3RyZWV0O1xuICAgICAgICAgICAgdmFyIG51bWJlciA9ICRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHkubnVtYmVyO1xuICAgICAgICAgICAgdmFyIHppcGNvZGUgPSAkc2NvcGUuYXJyRGV0YWlsc0FjdGl2aXR5LnppcGNvZGU7XG5cbiAgICAgICAgICAgIHZhciBhZGRyZXNzID0gc3RyZWV0ICsgXCIgXCIgKyBudW1iZXIgKyBcIiwgXCIgKyB6aXBjb2RlOyAvL2hpZXIgYWRkcmVzcyB1aXQgZGIgaW5zdG9wcGVuXG5cbiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeydhZGRyZXNzJzogYWRkcmVzc30sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzTWFwLnNldENlbnRlcihyZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlID0gXCIuLi8uLi9pbWFnZXMvbWFya2VyLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXA6IHJlc3VsdHNNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGltYWdlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdHZW9jb2RlIHdhcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246ICcgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgdmFyIGZybSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdBY3Rpdml0eUZvcm0nKVswXTtcbiAgICAgICAgICAgIGZybS5yZXNldCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJBY3Rpdml0aWVzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJkYlNlcnZpY2VcIiwgXCIkaHR0cFwiLCBcIiRsb2NhdGlvblwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcImZpbGVVcGxvYWRcIiwgQWN0aXZpdGllc0NvbnRyb2xsZXJdKTtcblxuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBOaWtpdGEgb24gNy8wMS8yMDE2LlxuICovXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBDaGF0Q29udHJvbGxlcigkc2NvcGUsJHJvb3RTY29wZSxjaGF0U2VydmljZSkge1xuICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2hhdFNlcnZpY2UuZW1pdChcImluaXRfdXNlcnNcIix7dXNlcjokcm9vdFNjb3BlLmN1cnJlbnRVc2VyLCBjb2xsZWN0aW9uOlwidXNlcnNcIn0pO1xuXG4gICAgICAgIH07XG4gICAgICAgIGNoYXRTZXJ2aWNlLmVtaXQoXCJoYWxsb05pa2l0YVwiKTtcbiAgICAgICAgJHNjb3BlLm1lc3NhZ2VzID0gW107XG4gICAgICAgICRzY29wZS5tZXNzYWdlID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5tZXNzYWdlKTtcbiAgICAgICAgICAgIGlmKHRoaXMubWVzc2FnZSAhPT1cIlwiICYmIHRoaXMubWVzc2FnZSAhPT1udWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXI6ICRyb290U2NvcGUuY3VycmVudFVzZXIsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXI6ICRyb290U2NvcGUuY29udGFjdGVkVXNlci51c2VybmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY2hhdFNlcnZpY2UuZW1pdChcIm1lc3NhZ2VcIiwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNoYXRTZXJ2aWNlLm9uKFwibWVzc2FnZV9yZWNlaXZlclwiLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSkUgQkVOVCBFUiFcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5zZW5kZXIpO1xuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2goe3RleHQ6ZGF0YS5tZXNzYWdlLCB1c2VyOmRhdGEuc2VuZGVyfSk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFNvY2tldCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PVxuICAgICAgICAvKlxuICAgICAgICBzb2NrZXQub24oJ2luaXQnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgICAgICAkc2NvcGUudXNlcnMgPSBkYXRhLnVzZXJzO1xuICAgICAgICB9KTtcblxuICAgICAgICBzb2NrZXQub24oJ3NlbmQ6bWVzc2FnZScsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAkc2NvcGUubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc29ja2V0Lm9uKCdjaGFuZ2U6bmFtZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBjaGFuZ2VOYW1lKGRhdGEub2xkTmFtZSwgZGF0YS5uZXdOYW1lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc29ja2V0Lm9uKCd1c2VyOmpvaW4nLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIHVzZXI6ICdjaGF0cm9vbScsXG4gICAgICAgICAgICAgICAgdGV4dDogJ1VzZXIgJyArIGRhdGEubmFtZSArICcgaGFzIGpvaW5lZC4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS51c2Vycy5wdXNoKGRhdGEubmFtZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZCBhIG1lc3NhZ2UgdG8gdGhlIGNvbnZlcnNhdGlvbiB3aGVuIGEgdXNlciBkaXNjb25uZWN0cyBvciBsZWF2ZXMgdGhlIHJvb21cbiAgICAgICAgc29ja2V0Lm9uKCd1c2VyOmxlZnQnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIHVzZXI6ICdjaGF0cm9vbScsXG4gICAgICAgICAgICAgICAgdGV4dDogJ1VzZXIgJyArIGRhdGEubmFtZSArICcgaGFzIGxlZnQuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaSwgdXNlcjtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAkc2NvcGUudXNlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB1c2VyID0gJHNjb3BlLnVzZXJzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh1c2VyID09PSBkYXRhLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQcml2YXRlIGhlbHBlcnNcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09XG5cbiAgICAgICAgdmFyIGNoYW5nZU5hbWUgPSBmdW5jdGlvbiAob2xkTmFtZSwgbmV3TmFtZSkge1xuICAgICAgICAgICAgLy8gcmVuYW1lIHVzZXIgaW4gbGlzdCBvZiB1c2Vyc1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgJHNjb3BlLnVzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS51c2Vyc1tpXSA9PT0gb2xkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnNbaV0gPSBuZXdOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIHVzZXI6ICdjaGF0cm9vbScsXG4gICAgICAgICAgICAgICAgdGV4dDogJ1VzZXIgJyArIG9sZE5hbWUgKyAnIGlzIG5vdyBrbm93biBhcyAnICsgbmV3TmFtZSArICcuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTWV0aG9kcyBwdWJsaXNoZWQgdG8gdGhlIHNjb3BlXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgICAgICRzY29wZS5jaGFuZ2VOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2NoYW5nZTpuYW1lJywge1xuICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5uZXdOYW1lXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1RoZXJlIHdhcyBhbiBlcnJvciBjaGFuZ2luZyB5b3VyIG5hbWUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZU5hbWUoJHNjb3BlLm5hbWUsICRzY29wZS5uZXdOYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICRzY29wZS5uZXdOYW1lO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3TmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5tZXNzYWdlcyA9IFtdO1xuXG4gICAgICAgICRzY29wZS5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdzZW5kOm1lc3NhZ2UnLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJHNjb3BlLm1lc3NhZ2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGQgdGhlIG1lc3NhZ2UgdG8gb3VyIG1vZGVsIGxvY2FsbHlcbiAgICAgICAgICAgICRzY29wZS5tZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB1c2VyOiAkc2NvcGUubmFtZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiAkc2NvcGUubWVzc2FnZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGNsZWFyIG1lc3NhZ2UgYm94XG4gICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9ICcnO1xuICAgICAgICB9OyovXG4gICAgfVxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJDaGF0Q29udHJvbGxlclwiLCBbXCIkc2NvcGVcIixcIiRyb290U2NvcGVcIixcImNoYXRTZXJ2aWNlXCIsIENoYXRDb250cm9sbGVyXSk7XG5cbn0pKCk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGltYW4gb24gNS8xMi8xNS5cbiAqL1xuXG4oZnVuY3Rpb24oKXtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIE1hdGNoZXNDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCBkYlNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgY2xpY2tzT25CdG4gPSAwO1xuXG4gICAgICAgICRzY29wZS5zaG93RGl2ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRzY29wZS5maWx0ZXIgPSB7c2hvd0ZpbHRlcjp0cnVlfTtcbiAgICAgICAgICAgIGNsaWNrc09uQnRuKys7XG5cbiAgICAgICAgICAgIGlmKGNsaWNrc09uQnRuID4gMSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOmZhbHNlfTtcbiAgICAgICAgICAgICAgICBjbGlja3NPbkJ0biA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmhpZGVEaXYgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY2xpY2tzT25CdG4gPSAwO1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOmZhbHNlfTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc29ydFByb3BlcnR5ID0gXCJ0aXRsZVwiO1xuICAgICAgICAkc2NvcGUuZmlsdGVyUXVlcnkgPSBcIlwiO1xuICAgICAgICAkc2NvcGUuZmlsdGVyMlF1ZXJ5ID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLmZpbHRlck1hdGNoZXMgPSBmdW5jdGlvbihpKXtcblxuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlclF1ZXJ5ID09PSBcIlwiKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICBlbHNlIGlmKGkudXNlcm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRzY29wZS5maWx0ZXJRdWVyeS50b0xvY2FsZUxvd2VyQ2FzZSgpKSA+PSAwKXtcbiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgZWxzZSBpZihpLnNleCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoJHNjb3BlLmZpbHRlclF1ZXJ5LnRvTG93ZXJDYXNlKCkgPT0gaS5zZXgudG9Mb3dlckNhc2UoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoJHNjb3BlLmZpbHRlclF1ZXJ5LnRvTG93ZXJDYXNlKCkgPT09IFwibm9maWx0ZXJcIil7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclF1ZXJ5ID0gXCJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5maWx0ZXIyTWF0Y2hlcyA9IGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlcjJRdWVyeSA9PT0gXCJcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoaSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoaS56aXBjb2RlID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxzZSBpZigkc2NvcGUuZmlsdGVyMlF1ZXJ5ID09IGkuemlwY29kZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoJHNjb3BlLmZpbHRlcjJRdWVyeS50b0xvd2VyQ2FzZSgpID09PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyMlF1ZXJ5ID0gXCJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vaHR0cDovL3d3dy5mYWxzZXBvc2l0aXZlcy5jb20vaW5kZXgucGhwLzIwMDkvMTIvMDEvamF2YXNjcmlwdC1mdW5jdGlvbi10by1nZXQtdGhlLWludGVyc2VjdC1vZi0yLWFycmF5cy9cbiAgICAgICAgJHNjb3BlLmludGVyc2VjdCA9IGZ1bmN0aW9uKGFycjEsIGFycjIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciByID0gW10sIG8gPSB7fSwgbCA9IGFycjIubGVuZ3RoLCBpLCB2O1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIG9bYXJyMltpXV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbCA9IGFycjEubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHYgPSBhcnIxW2ldO1xuICAgICAgICAgICAgICAgIGlmICh2IGluIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgci5wdXNoKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNob3dNYXRjaGVzID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICB2YXIgdXNlcm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgIGlmKCRyb290U2NvcGUudXNlci51c2VybmFtZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICB1c2VybmFtZSA9ICRyb290U2NvcGUudXNlci51c2VybmFtZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgdmFyIHVzZXJuYW1lO1xuXG4gICAgICAgICAgICB1c2VybmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlcm5hbWVcIik7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5nZXRDb2xsZWN0aW9uKCd1c2VycycpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXG4gICAgICAgICAgICAgICAgdmFyIGFyclByb2ZpbGVzID0gcmVzcG9uc2UudXNlcmxpc3Q7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGFyclByb2ZpbGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXJyUHJvZmlsZXNbaV0udXNlcm5hbWUgPT09IHVzZXJuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJQcm9maWxlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpaSA9IDA7IGlpIDwgYXJyUHJvZmlsZXMubGVuZ3RoOyBpaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXJyUHJvZmlsZXNbaWldLnVzZXJuYW1lID09PSBcImFkbWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyclByb2ZpbGVzLnNwbGljZShpaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGRiU2VydmljZS5nZXRJdGVtKHVzZXJuYW1lKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyTWF0Y2hlcyA9IFtdO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPWFyclByb2ZpbGVzLmxlbmd0aDsgaS0tOyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzYW1lSW50ZXJlc3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1lSW50ZXJlc3RzID0gJHNjb3BlLmludGVyc2VjdCh1c2VyLmludGVyZXN0cywgYXJyUHJvZmlsZXNbaV0uaW50ZXJlc3RzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2FtZUludGVyZXN0cy5sZW5ndGggIT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFyclByb2ZpbGVzW2ldLmRlbGV0ZWQgPT09IGZhbHNlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyTWF0Y2hlcy5wdXNoKGFyclByb2ZpbGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFyck1hdGNoZXMgPSBhcnJNYXRjaGVzO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc2VhcmNoSW5NYXRjaGVzID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlcjJRdWVyeSAhPT0gXCJcIil7XG5cbiAgICAgICAgICAgICAgICB2YXIgYXJyWmlwY29kZVdpdGhNYXRjaGVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwLCBsID0gJHNjb3BlLmFyck1hdGNoZXMubGVuZ3RoOyBpPGw7IGkrKyl7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLmFyck1hdGNoZXNbaV0uemlwY29kZSA9PSAkc2NvcGUuZmlsdGVyMlF1ZXJ5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyclppcGNvZGVXaXRoTWF0Y2hlcy5wdXNoKCRzY29wZS5hcnJNYXRjaGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFyck1hdGNoZXMgPSBhcnJaaXBjb2RlV2l0aE1hdGNoZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCRzY29wZS5maWx0ZXIyUXVlcnkgPT09IFwiXCIpe1xuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TWF0Y2hlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIk1hdGNoZXNDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcImRiU2VydmljZVwiLCBNYXRjaGVzQ29udHJvbGxlcl0pO1xuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDIwLzEyLzE1LlxuICovXG5cblxuKGZ1bmN0aW9uKCl7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBQcm9maWxlc0NvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUsICRyb3V0ZVBhcmFtcywgZGJTZXJ2aWNlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG5cbiAgICAgICAgJHNjb3BlLnN0YXJ0Q2hhdCA9IGZ1bmN0aW9uKGN1cnJlbnRVc2VyLCBjb250YWN0ZWRVc2VyKXtcbiAgICAgICAgICAgICRodHRwLnBvc3QoXCIvY2hhdFwiLCB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIGNvbnRhY3RlZFVzZXI6Y29udGFjdGVkVXNlclxuXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gZGF0YS5jdXJyZW50VXNlcjtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmNvbnRhY3RlZFVzZXIgPSBkYXRhLmNvbnRhY3RlZFVzZXI7XG5cbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnR1c2VybmFtZVwiLCAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyLnVzZXJuYW1lKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvbnRhY3RlZHVzZXJuYW1lXCIsICRyb290U2NvcGUuY29udGFjdGVkVXNlci51c2VybmFtZSk7XG5cbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChkYXRhLnJlZGlyZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjbGlja3NPbkJ0biA9IDA7XG5cbiAgICAgICAgJHNjb3BlLnNob3dEaXYgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOnRydWV9O1xuICAgICAgICAgICAgY2xpY2tzT25CdG4rKztcblxuICAgICAgICAgICAgaWYoY2xpY2tzT25CdG4gPiAxKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyID0ge3Nob3dGaWx0ZXI6ZmFsc2V9O1xuICAgICAgICAgICAgICAgIGNsaWNrc09uQnRuID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaGlkZURpdiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGlja3NPbkJ0biA9IDA7XG4gICAgICAgICAgICAkc2NvcGUuZmlsdGVyID0ge3Nob3dGaWx0ZXI6ZmFsc2V9O1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zaG93UHJvZmlsZXMgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICB2YXIgdXNlcm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgdXNlcm5hbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJuYW1lXCIpO1xuXG4gICAgICAgICAgICBkYlNlcnZpY2UuZ2V0Q29sbGVjdGlvbigndXNlcnMnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblxuICAgICAgICAgICAgICAgIHZhciBhcnJQcm9maWxlcyA9IHJlc3BvbnNlLnVzZXJsaXN0O1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IGFyclByb2ZpbGVzLmxlbmd0aDsgaS0tOyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGFyclByb2ZpbGVzW2ldLnVzZXJuYW1lID09PSB1c2VybmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyUHJvZmlsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWkgPSBhcnJQcm9maWxlcy5sZW5ndGg7IGlpLS07KXtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXJyUHJvZmlsZXNbaWldLnVzZXJuYW1lID09PSBcImFkbWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyclByb2ZpbGVzLnNwbGljZShpaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFyclByb2ZpbGVzID0gYXJyUHJvZmlsZXM7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNvcnRQcm9wZXJ0eSA9IFwidGl0bGVcIjtcbiAgICAgICAgJHNjb3BlLmZpbHRlclF1ZXJ5ID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLmZpbHRlcjJRdWVyeSA9IFwiXCI7XG4gICAgICAgICRzY29wZS5maWx0ZXJQcm9maWxlcyA9IGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlclF1ZXJ5ID09PSBcIlwiKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICBlbHNlIGlmKGkudXNlcm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRzY29wZS5maWx0ZXJRdWVyeS50b0xvY2FsZUxvd2VyQ2FzZSgpKSA+PSAwKXtcbiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgZWxzZSBpZihpLnNleCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoJHNjb3BlLmZpbHRlclF1ZXJ5LnRvTG93ZXJDYXNlKCkgPT0gaS5zZXgudG9Mb3dlckNhc2UoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYoJHNjb3BlLmZpbHRlclF1ZXJ5LnRvTG93ZXJDYXNlKCkgPT09IFwibm9maWx0ZXJcIil7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclF1ZXJ5ID0gXCJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZWFyY2hJblByb2ZpbGVzID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlcjJRdWVyeSAhPT0gXCJcIil7XG5cbiAgICAgICAgICAgICAgICB2YXIgYXJyWmlwY29kZVdpdGhQcm9maWxlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9ICRzY29wZS5hcnJQcm9maWxlcy5sZW5ndGg7IGk8bDsgaSsrKXtcblxuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuYXJyUHJvZmlsZXNbaV0uemlwY29kZSA9PSAkc2NvcGUuZmlsdGVyMlF1ZXJ5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyclppcGNvZGVXaXRoUHJvZmlsZXMucHVzaCgkc2NvcGUuYXJyUHJvZmlsZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXJyUHJvZmlsZXMgPSBhcnJaaXBjb2RlV2l0aFByb2ZpbGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZigkc2NvcGUuZmlsdGVyMlF1ZXJ5ID09PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb2ZpbGVzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByb2ZpbGVzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiZGJTZXJ2aWNlXCIsXCIkaHR0cFwiLCBcIiRsb2NhdGlvblwiLCBQcm9maWxlc0NvbnRyb2xsZXJdKTtcblxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
