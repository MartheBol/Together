/**
 * Created by Marthe on 10/12/15.
 */

(function(){
    var app = angular.module("app", ["ngRoute"]);
    app.config(function($routeProvider){
        $routeProvider
            .when("/",{
                templateUrl: "./views/home.html"
            })
            .when("/signup",{
                templateUrl: "views/signup.html"
            })
            .when("/home",{
                templateUrl: "./views/home.html"
            })
            .when("/matches",{
                templateUrl: "./views/matches.html"
            })
            .when("/howto",{
                templateUrl: "./views/howTo.html"
            })
            .when("/activities",{
                templateUrl: "./views/activities.html"
            })
            .when("/admin",{
                templateUrl: "./views/admin.html"
            })
            .when("/searchprofiles",{
                templateUrl: "./views/searchProfiles.html"
            })
            .when("/myprofile",{
                templateUrl: "./views/myProfile.html"
            })
            .when("/userdetails/:username",{
                templateUrl: "./views/detailsUser.html",
                controller: 'UsersController'
            })
            .when("/detailsuser",{
                templateUrl: "./views/detailsUser.html"
            })
            .when("/activitydetails/:activityName", {
                templateUrl: "./views/detailsActivity.html",
                controller: "ActivitiesController"

            });


    });

    app.run(function ($rootScope) {
        $rootScope.user = {};
    });

    app.directive('ngEnter', function () {
        return function (scope, element, attrs) {
            element.bind("keydown keypress", function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.ngEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    });


    app.directive('fileModel', ['$parse', function ($parse) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function(){
                    scope.$apply(function(){
                        modelSetter(scope, element[0].files[0]);
                    });
                });
            }
        };
    }]);

    app.service('fileUpload', ['$http', function ($http) {
        this.uploadFileToUrl = function(file, uploadUrl){
            var fd = new FormData();
            fd.append('file', file);
            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            })
                .success(function(){
                    console.log("success");
                })
                .error(function(){
                    console.log("error");
                });
        };
    }]);


    app.directive('editableCheckbox', function () {
        return {
            restrict: 'E',
            templateUrl: './views/editablecheckbox.html'
        };
    });


})();
/**
 * Created by iman on 15/12/15.
 */
var Activity = function(img, name, place, keywords, participants, myEvent){
    this.img = img;
    this.name = name;
    this.place = place;
    this.keywords = keywords;
    this.participants = participants;
    this.myEvent = myEvent;
};
/**
 * Created by iman on 5/12/15.
 */
/*(function(){

    "use strict";

    var activitiesService = function () {

        var getActivities = function () {

            var localUrl = "http://localhost:3000/data/activities.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);

                //console.log(data);

                var arrActivities = [];

                for (var i = 0; i < data.length; i++) {

                    var d = data[i];

                    var newActivity = new Activity();
                    newActivity.img = d.img;
                    newActivity.name = d.name;
                    newActivity.place = d.place;
                    newActivity.participants = d.participants;
                    newActivity.myEvent = d.myEvent;

                    var text = "";

                    for(var ii=0; ii< d.keywords.length; ii++){
                        if(ii == d.keywords.length-1){
                            text += d.keywords[ii];
                        }
                        else{
                            text += d.keywords[ii];
                            text += ", ";
                        }
                    }

                    newActivity.keywords = text;
                    arrActivities.push(newActivity);
                }

                return arrActivities;

            }

        };

        //public gedeelte
        return{

            getActivities:getActivities

        };

    };

    angular.module("app").factory("activitiesService", [activitiesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();*/
/**
 * Created by iman on 15/12/15.
 */

(function(){

    "use strict";

    var dbService = function ($http) {

        var getCollection = function (collection) {


            var url = "http://localhost:3000/api/" + collection;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getByID = function (collection, id) {
            var url = "http://localhost:3000/api/" + collection + "/" + id;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getDetailsUser = function (collection, username) {
            var url = "http://localhost:3000/api/" + collection + "/userdetail/" + username;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getItem = function(item){

            var url = "http://localhost:3000/api/" + item;
            return $http.get('/user').then(function(response){

                return response.data;

            });

        };

        var getDetailsActivity = function (collection, activityname) {
            var url = "http://localhost:3000/api/" + collection + "/activitydetail/" + activityname;
            return $http.get(url).then(function(response){
                return response.data;

            });

        };

        var getNoiseWords = function () {

            var url = "http://localhost:3000/data/noisewords.json";
            return $http.get(url).then(function(response){

                return response.data;

            });

        };


        //public gedeelte
        return{

            getCollection:getCollection,
            getByID:getByID,
            getItem:getItem,
            getDetailsUser: getDetailsUser,
            getDetailsActivity: getDetailsActivity,
            getNoiseWords: getNoiseWords

        };

    };

    angular.module("app").factory("dbService", ["$http", dbService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */
(function(){

    "use strict";

    var matchesService = function () {

        var getMatches = function (nameUser) {

            var variabelURL = "together";
            var localUrl = "http://localhost:3000/data/matches.json";
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", localUrl, false);
            xmlHttp.send(null);

            if(xmlHttp.status == 200) {

                var data = JSON.parse(xmlHttp.responseText);
                var arr = [];
                var arrMatches = [];
                var arrMatchUsers = [];
                var arrMatchInterests = [];

                for(var i=0; i < data.length; i++){

                    var obj = {
                        "user": data[i].user,
                        "matches":data[i].matches
                    };

                    arr.push(obj);

                }

                for(var ii = 0; ii<arr.length; ii++){

                    var index = arr[ii].user.indexOf(nameUser);
                    if(index === 0){
                        arrMatches.push(arr[ii].matches);
                    }
                    //console.log("Index: "+index);
                }

                //console.log(arr);
                //console.log(arrMatches[0]);


                var arrMatchesByUser = arrMatches[0];
                //console.log("Aantal matches: " + arrMatchesByUser.length);

                return arrMatchesByUser;

                /*
                for(var iii = 0; iii<arrMatches[0].length; iii++){

                    var matchUser = arrMatches[0][iii].user;
                    var matchInterests = arrMatches[0][iii].interests;

                    arrMatchUsers.push(matchUser);
                    arrMatchInterests.push(matchInterests);

                    //console.log(matchUser);
                    //console.log(matchInterests);
                }

                console.log(arrMatchUsers);
                console.log(arrMatchInterests);
                */

            }



        };

        //public gedeelte
        return{

            getMatches:getMatches,

        };

    };

    angular.module("app").factory("matchesService", [matchesService]);
    //                                  ^ deze naam bepaalt welke naam je nodig hebt in je controller als verwijzing!

})();
/**
 * Created by iman on 5/12/15.
 */

(function() {

    "use strict";
    var ActivitiesController = function ($scope, dbService, $http, $location, $routeParams, $route) {
        $scope.interestedAct=true;
        $scope.nameButton = "Interested";

        $scope.getActivities = function () {
            dbService.getCollection('activities').then(function (response) {

                var arrTemp = response.activitielist;
                var arrActs = [];

                var today = new Date().toISOString().substring(0, 10),
                    todaySplit = today.split("-"),
                    sumToday =  todaySplit[0] +  todaySplit[1] +  todaySplit[2];

                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    var activtyDateSplit = arrTemp[i].untilDate.substring(0,10).split("-"),
                        sumActivity =  activtyDateSplit[0] + activtyDateSplit[1] + activtyDateSplit[2];
                    if ( sumActivity >= sumToday) {
                      arrActs.push(arrTemp[i]);
                    }
                }

                $scope.arrActivities = arrActs;

            });


        };

        String.prototype.replaceAll = function( token, newToken, ignoreCase ) {
            var _token;
            var str = this + "";
            var i = -1;

            if ( typeof token === "string" ) {

                if ( ignoreCase ) {

                    _token = token.toLowerCase();

                    while( (
                        i = str.toLowerCase().indexOf(
                            token, i >= 0 ? i + newToken.length : 0
                        ) ) !== -1
                        ) {
                        str = str.substring( 0, i ) +
                            newToken +
                            str.substring( i + token.length );
                    }

                } else {
                    return this.split( token ).join( newToken );
                }

            }
            return str;
        };

        function isInArray(value, array) {
            return array.indexOf(value);
        }

        function getKeywordsFromDescription(description, callback) {

            description = description.replaceAll('.', '');
            description = description.replaceAll(',', '');
            description = description.replaceAll('?', '');
            description = description.replaceAll('!', '');
            description = description.replaceAll('"', '');
            description = description.replaceAll("'", '');

            var words = description.split(" ");
            var keyWords = "";

            dbService.getNoiseWords().then(function(response) {

                var noiseWords = response.noisewords;

                for (var i = 0; i < words.length; i++) {

                    if (isInArray(words[i].toLowerCase(), noiseWords) == -1) {
                        keyWords += words[i];
                        keyWords += " ";
                    }
                }

                //return keyWords;
                if(!keyWords.isEmpty){
                    callback(null, keyWords);
                }

                else{
                    callback("No keywords found.", null);
                }

            });
        }

        function timeConsistOf2Numbers(number, callback){
                var output = number + '';
                if (output.length < 2) {
                    output = '0' + output;
                    number = output.toString();

                }
                else{
                    number = number.toString();
                }


            if(!number.isEmpty){
                callback(null, number);
            }

            else{
                callback("No number.", null);
            }


        }




        $scope.addActivity = function() {
            var activityName = this.activityName;
            var street = this.street;
            var number = this.number;
            var zipcode = this.zipcode;
            var description = this.comment;
            var dateFrom = this.dateFrom;
            var dateUntil = this.dateUntil;
            var timestamp = new Date().getTime();
            var startTimeHour  = this.startTimeHour;
            var startTimeMin = this.startTimeMin;
            var endTimeHour = this.endTimeHour;
            var endTimeMin = this.endTimeMin;



            if((street !== undefined) &&
                (number !== undefined) &&
                (zipcode !== undefined) &&
                (description !== undefined) &&
                (dateFrom !== undefined) &&
                (dateUntil !== undefined) &&
                (timestamp !== undefined)){

                if(dateFrom <= dateUntil) {
                    $scope.error = "";

                    if (startTimeMin < 60 && startTimeHour < 25) {

                        timeConsistOf2Numbers(startTimeHour, function(error, startTimeHourString){
                            startTimeHour = startTimeHourString;
                            if(error){
                                console.log(error);
                            }
                        });
                        timeConsistOf2Numbers(startTimeMin, function(error, startTimeMinString){
                            startTimeMin = startTimeMinString;
                            if(error){
                                console.log(error);

                            }
                        });

                        console.log(startTimeHour);
                        console.log(startTimeMin);

                        if (startTimeMin.length === 2  && startTimeHour.length === 2) {
                            console.log("je komt hier terecht");

                            if(endTimeMin < 60 && endTimeHour < 24){
                                timeConsistOf2Numbers(endTimeHour, function(error, endTimeHourString){
                                    endTimeHour = endTimeHourString;
                                    if(error){
                                        console.log(error);
                                    }
                                });
                                timeConsistOf2Numbers(endTimeMin, function(error, endTimeMinString){
                                    endTimeMin = endTimeMinString;
                                    if(error){
                                        console.log(error);

                                    }
                                });

                                console.log(endTimeHour);
                                console.log(endTimeMin);

                            if (endTimeMin.toString().length === 2 && endTimeHour.toString().length === 2) {

                                console.log(startTimeHour + ":" + startTimeMin);

                                getKeywordsFromDescription(description, function (error, data) {
                                 description = data;
                                 if(!error){
                                 console.log(startTimeHour + ":" + startTimeMin);

                                 var url = "http://localhost:3000/api/activities/addactivity";
                                     var timeStart = startTimeHour + ":" +  startTimeMin;
                                     var dateFromFull = dateFrom + timeStart  ;
                                        console.log(dateFromFull);

                                     console.log(dateUntil);
                                 $http.post(url, {
                                 activityName:activityName,
                                 street : street,
                                 number: number,
                                 zipcode: zipcode,
                                 description : description,
                                 dateFrom : dateFromFull,
                                 dateUntil : dateUntil,
                                 timestamp : timestamp,
                                     timeFrom: startTimeHour + ":" +  startTimeMin,
                                     timeUntil: endTimeHour + ":" +  endTimeMin

                                 }).success(function (data) {
                                 $scope.error = data.error;
                                 $scope.getActivities();
                                 resetForm();

                                 //$location.path(data.redirect);
                                 });

                                 }
                                 else{
                                 console.log(error);
                                 }
                                 });
                            }

                            else {
                                $scope.error = "Enddate input is not correct";
                            }
                            }

                            else{
                                $scope.error = "Endtime input is not correct";
                            }

                        }

                        else {
                            $scope.error = 'foutje!!!! '
                        }
                    }

                    else {
                        $scope.error = "Starttime input is not correct";
                    }
                }


                else if(dateFrom > dateUntil){
                    $scope.error = "ERROR: Date until can't be earlier than date from.";
                }


            }
            else{
                $scope.error = "ERROR: All fields are required.8888";
            }
        };

        $scope.getDetailActivity = function(){
            dbService.getDetailsActivity('activities', $routeParams.activityName).then(function(response){
                $scope.arrDetailsActivity = response.activity;
                initmap();
                return $scope.arrDetailsActivity;


            });
        };

        $scope.interested = function(activityName,interestedUser, createrUser){
            console.log("IK BEN GEÏNTERESSEERD!");
            console.log(activityName);
            console.log(interestedUser);
            console.log(createrUser);
            var url = "";
            var interestedAct = $scope.interestedAct;
            if(interestedAct !== false) {
                console.log(interestedAct);

                url = "http://localhost:3000/api/activities/interested";
                $http.post(url, {
                    activityName: activityName,
                    interestedUser: interestedUser,
                    createrUser: createrUser
                }).success(function (data) {
                    console.log(data);
                    console.log(interestedUser + " is geïnteresseerd in " + activityName + " door " + createrUser);
                    $scope.interestedAct = false;
                    $scope.nameButton = "Not interested";
                    $scope.error = data.error;
                });
            }else{
                console.log(interestedAct);
                url = "http://localhost:3000/api/activities/deleteinterested";
                $http.post(url, {
                    activityName: activityName,
                    interestedUser: interestedUser,
                    createrUser: createrUser
                }).success(function (data) {
                    console.log(data);
                    console.log(interestedUser + " is niet meer geïnteresseerd in " + activityName + " door " + createrUser);
                    $scope.interestedAct = true;
                    $scope.nameButton = "Interested";

                    $scope.error = data.error;
                });
            }
        };

        function recentFirst(a,b) {
            if (a.timestamp > b.timestamp)
                return -1;
            if (a.timestamp < b.timestamp)
                return 1;
            return 0;
        }

        $scope.getMostRecentActivities = function(){
            dbService.getCollection('activities').then(function(response){

                var numberOfActivities = 3;
                var arrTemp = response.activitielist;
                var arrAllActivities = [];

                for (var i = 0, l = arrTemp.length; i < l; i++) {
                    if (new Date(arrTemp[i].untilDate).getTime() > new Date().getTime()) {
                        arrAllActivities.push(arrTemp[i]);
                    }
                }

                arrAllActivities.sort(recentFirst);

                var arrMostRecentActivities = [];

                for(var ii=0; ii<numberOfActivities; ii++){
                    arrMostRecentActivities.push(arrAllActivities[ii]);
                }

                //console.log("[arrAllActivities]: ");
                //console.log(arrAllActivities);
                //console.log("[arrMostRecentActivities]: ");
                //console.log(arrMostRecentActivities);

                $scope.arrMostRecentActivities = arrMostRecentActivities;

            });
        };

        function initmap() {

            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: {lat: 50.8194894, lng: 3.2577076}
            });
            var geocoder = new google.maps.Geocoder();

            geocodeAddress(geocoder, map);


        }

        function geocodeAddress(geocoder, resultsMap) {
            var street = $scope.arrDetailsActivity.street;
            var number = $scope.arrDetailsActivity.number;
            var zipcode = $scope.arrDetailsActivity.zipcode;

            var address = street + " " + number + ", " + zipcode; //hier address uit db instoppen

            geocoder.geocode({'address': address}, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    resultsMap.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: resultsMap,
                        position: results[0].geometry.location
                    });

                    console.log(marker);

                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        function resetForm(){
            var frm = document.getElementsByName('ActivityForm')[0];
            console.log('je komt in de resetform');
            frm.reset();
        }
    };

    angular.module("app").controller("ActivitiesController", ["$scope", "dbService", "$http","$location", "$routeParams","fileUpload", ActivitiesController]);


})();
/**
 * Created by iman on 5/12/15.
 */

(function(){

    "use strict";

    var MatchesController = function($scope, matchesService) {

        $scope.showMatches = function(){

            var nameUser = "Luna";

            var arrMatchesByUser = matchesService.getMatches(nameUser);

            $scope.aantalMatches = arrMatchesByUser.length;

            $scope.arrMatches = arrMatchesByUser;

            var text = "";
            for(var i=0; i<arrMatchesByUser.length; i++){
                text = arrMatchesByUser[i].interests.toString().replace(" ,", " ");
                arrMatchesByUser[i].interests = text;
            }

        };
    };

    angular.module("app").controller("MatchesController", ["$scope", "matchesService", MatchesController]);

})();
/**
 * Created by iman on 20/12/15.
 */


(function(){

    "use strict";

    var ProfilesController = function($scope, $rootScope, $routeParams, dbService) {

        var clicksOnBtn = 0;

        $scope.showDiv = function(){
            $scope.filter = {showFilter:true};
            clicksOnBtn++;

            if(clicksOnBtn > 1){
                $scope.filter = {showFilter:false};
                clicksOnBtn = 0;
            }
        };

        $scope.hideDiv = function(){
            clicksOnBtn = 0;
            $scope.filter = {showFilter:false};
        };

        $scope.showProfiles = function(){

            var username = "";
            if($rootScope.user.username !== undefined){
                username = $rootScope.user.username;
            }

            dbService.getCollection('users').then(function(response){

                var arrProfiles = response.userlist;
                for(var i = 0; i < arrProfiles.length; i++){
                    if(arrProfiles[i].username === username) {
                        arrProfiles.splice(i, 1);
                    }
                }
                for(var ii = 0; ii < arrProfiles.length; ii++){
                    if(arrProfiles[ii].username === "admin") {
                        arrProfiles.splice(ii, 1);
                    }
                }
                $scope.arrProfiles = arrProfiles;

            });

        };

        $scope.sortProperty = "title";
        $scope.filterQuery = "";
        $scope.filterImages = function(i){
            if($scope.filterQuery === ""){
                return true;
            }

            /*
             else if(i.username.toLowerCase().indexOf($scope.filterQuery.toLocaleLowerCase()) >= 0){
             return true;
             }
             */

            else if(i.sex === undefined){
                return false;
            }

            else if($scope.filterQuery.toLowerCase() == i.sex.toLowerCase()){
                return true;
            }

            else if($scope.filterQuery.toLowerCase() === "nofilter"){
                $scope.filterQuery = "";
            }

            return false;
        };
    };

    angular.module("app").controller("ProfilesController", ["$scope", "$rootScope", "$routeParams", "dbService", ProfilesController]);

})();
/**
 * Created by iman on 20/12/15.
 */
(function(){

    "use strict";

    var UsersController = function($scope, $routeParams, dbService) {

        $scope.getUsers = function(){

            dbService.getCollection('users').then(function(response){

                //console.log(response);
                $scope.arrUsers = response.userlist;

            });

        };

        $scope.getDetailUser = function(){

            dbService.getDetailsUser('users', $routeParams.username).then(function(response){
                $scope.arrDetails = response.activity;
            });
        };

        $scope.getUserByID = function(){

            dbService.getItem('user').then(function(response){

                console.log(response);
                $scope.userProfile = response;

            });

        };


    };

    angular.module("app").controller("UsersController", ["$scope", "$routeParams", "dbService", UsersController]);

})();
/**
 * Created by Marthe on 30/12/15.
 */


(function(){
    "use strict";



var locationController = function($scope) {

    console.log('TESTEST');

    $scope.initmap = function() {
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 8,
            center: {lat: 50.8194894, lng: 3.2577076}
        });
        var geocoder = new google.maps.Geocoder();

        geocodeAddress(geocoder, map);

    };

    function geocodeAddress(geocoder, resultsMap) {
        var address = "Graaf Karel de Goedelaan 5, Kortrijk"; //hier address uit db instoppen

        geocoder.geocode({'address': address}, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                resultsMap.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: resultsMap,
                    position: results[0].geometry.location
                });

                console.log(marker);

            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
};

    angular.module("app").controller("locationController", ["$scope", locationController]);
})();
/**
 * Created by Marthe on 15/12/15.
 */
(function(){
    "use strict";
    var selectedInterest = [];

    var loginController = function ($scope, $http, $location) {

        $scope.login = function() {
            $http
                .post('/login', {
                    username: this.username,
                    password: this.password
                })
                .success(function(data) {
                    console.log(data);
                    $scope.error = data.error;
                    $location.path(data.redirect);
                });
        };

        $scope.interests = ['Jazz', 'Hiphop', 'New wave', 'Traveling','Party'];
        $scope.lst = [];
        $scope.change = function(){
            $scope.lst.push('2');
            console.log($scope.lst);
        };
        $scope.stateChanged = function (qId) {
            //if(!$scope.interests[qId]){ //If it is checked
            if(selectedInterest.indexOf(qId) !== -1) {
                //console.log('artNr already exists! DELETE');
                var index = selectedInterest.indexOf(qId);
                if (index > -1) {
                    selectedInterest.splice(index, 1);
                }
            }else{
                selectedInterest.push(qId);
                console.log(selectedInterest);
            }
        };

        $scope.register = function() {
            console.log("REGISTER");


            $http.post('/register', {
                firstname: this.firstname,
                lastname : this.lastname,
                //email : this.email,*/
                username : this.username,
                password : this.password,
                zipcode: this.zipcode,
                birthdate : this.birthdate,
                sex : this.sex,
                biography : this.biography,
                interests:selectedInterest

            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });

        };
    };

    var signupController = function ($scope) {
        $scope.categories = [''];
        $scope.newCategory = "";
        $scope.saveCategory = function () {

        };

    };

    var editableCheckboxController = function ($scope) {
        $scope.category = "";
        $scope.showLabel = false;
        $scope.showTextbox = true;
        $scope.saveCategory = function () {
            if ($scope.category) {
                $scope.showLabel = true;
                $scope.showTextbox = false;
            }
            else {
                $scope.showLabel = false;
                $scope.showTextbox = true;
            }
        };
        $scope.edit = function () {
            $scope.showLabel = false;
            $scope.showTextbox = true;
        };
        $scope.isChecked = function(qId){
            console.log(qId);
            if(qId!==  " ") {
                if (selectedInterest.indexOf(qId) !== -1) {
                    var index = selectedInterest.indexOf(qId);
                    if (index > -1) {
                        selectedInterest.splice(index, 1);
                        console.log(selectedInterest);
                    }
                } else {
                    selectedInterest.push(qId);
                    console.log(selectedInterest);
                }
            }
        };
        $scope.stateChanged = function (qId) {

        };

    };

    angular.module("app")
        .controller("loginController", ["$scope", "$http", "$location", loginController])
        .controller("signupController", ["$scope", signupController])
        .controller("editableCheckboxController", ["$scope", editableCheckboxController]);
})();
/**
 * Created by Nikita on 21/12/2015.
 */
(function () {
    "use strict";

    /*var signupController = function ($scope) {
        $scope.categories = [''];
        $scope.newCategory = "";
        $scope.saveCategory = function () {

        };

    };

    var editableCheckboxController = function ($scope) {
        $scope.category = "";
        $scope.showLabel = false;
        $scope.showTextbox = true;
        $scope.saveCategory = function () {
            if ($scope.category) {
                $scope.showLabel = true;
                $scope.showTextbox = false;
            }
            else {
                $scope.showLabel = false;
                $scope.showTextbox = true;
            }
        };
        $scope.edit = function () {
            $scope.showLabel = false;
            $scope.showTextbox = true;
        };

    };
    angular.module("app")
        .controller("signupController", ["$scope", signupController])
        .controller("editableCheckboxController", ["$scope", editableCheckboxController]);*/


})();
/**
 * Created by Marthe on 16/12/15.
 */
(function () {
    "use strict";

    var userController = function ($scope, $rootScope, $http, $location) {
        $http.get('/user').success(function(data) {
            $scope.user = data;
            $rootScope.user = data;

            if(data.username == 'admin'){
                $scope.auth = {isAuth: true, isAdmin : true};
            }
            else if(data.username != 'admin' && data.username !== undefined){
                $scope.auth = {isAuth: true, isAdmin : false};
            }
            else if(data.username === undefined){
                $scope.auth = {isAuth: false, isAdmin : false};

            }


        });


        /*$scope.logout = function() {
            $http.get('/logout').success(function (data) {
                $location.path(data.redirect);
            });
        };*/
    };


    angular.module("app").controller("userController", ["$scope", "$rootScope", "$http", "$location", userController]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIkFjdGl2aXR5LmpzIiwiYWN0aXZpdGllc1NlcnZpY2UuanMiLCJkYlNlcnZpY2UuanMiLCJtYXRjaGVzU2VydmljZS5qcyIsIkFjdGl2aXRpZXNDb250cm9sbGVyLmpzIiwiTWF0Y2hlc0NvbnRyb2xsZXIuanMiLCJQcm9maWxlc0NvbnRyb2xsZXIuanMiLCJVc2Vyc0NvbnRyb2xsZXIuanMiLCJsb2NhdGlvbkNvbnRyb2xsZXIuanMiLCJsb2dpbkNvbnRyb2xsZXIuanMiLCJzaWdudXBDb250cm9sbGVyLmpzIiwidXNlckNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgTWFydGhlIG9uIDEwLzEyLzE1LlxuICovXG5cbihmdW5jdGlvbigpe1xuICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZShcImFwcFwiLCBbXCJuZ1JvdXRlXCJdKTtcbiAgICBhcHAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKXtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKFwiL1wiLHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXdzL2hvbWUuaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvc2lnbnVwXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL3NpZ251cC5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9ob21lXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvaG9tZS5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9tYXRjaGVzXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvbWF0Y2hlcy5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9ob3d0b1wiLHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXdzL2hvd1RvLmh0bWxcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKFwiL2FjdGl2aXRpZXNcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9hY3Rpdml0aWVzLmh0bWxcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKFwiL2FkbWluXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvYWRtaW4uaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvc2VhcmNocHJvZmlsZXNcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9zZWFyY2hQcm9maWxlcy5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9teXByb2ZpbGVcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9teVByb2ZpbGUuaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvdXNlcmRldGFpbHMvOnVzZXJuYW1lXCIse1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vdmlld3MvZGV0YWlsc1VzZXIuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdVc2Vyc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvZGV0YWlsc3VzZXJcIix7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9kZXRhaWxzVXNlci5odG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9hY3Rpdml0eWRldGFpbHMvOmFjdGl2aXR5TmFtZVwiLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi92aWV3cy9kZXRhaWxzQWN0aXZpdHkuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiQWN0aXZpdGllc0NvbnRyb2xsZXJcIlxuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgfSk7XG5cbiAgICBhcHAucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IHt9O1xuICAgIH0pO1xuXG4gICAgYXBwLmRpcmVjdGl2ZSgnbmdFbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYmluZChcImtleWRvd24ga2V5cHJlc3NcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdFbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG5cblxuICAgIGFwcC5kaXJlY3RpdmUoJ2ZpbGVNb2RlbCcsIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9ICRwYXJzZShhdHRycy5maWxlTW9kZWwpO1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbFNldHRlciA9IG1vZGVsLmFzc2lnbjtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYmluZCgnY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRlcihzY29wZSwgZWxlbWVudFswXS5maWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTtcblxuICAgIGFwcC5zZXJ2aWNlKCdmaWxlVXBsb2FkJywgWyckaHR0cCcsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgICAgICB0aGlzLnVwbG9hZEZpbGVUb1VybCA9IGZ1bmN0aW9uKGZpbGUsIHVwbG9hZFVybCl7XG4gICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIGZkLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuICAgICAgICAgICAgJGh0dHAucG9zdCh1cGxvYWRVcmwsIGZkLCB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuXG5cbiAgICBhcHAuZGlyZWN0aXZlKCdlZGl0YWJsZUNoZWNrYm94JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi92aWV3cy9lZGl0YWJsZWNoZWNrYm94Lmh0bWwnXG4gICAgICAgIH07XG4gICAgfSk7XG5cblxufSkoKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgaW1hbiBvbiAxNS8xMi8xNS5cbiAqL1xudmFyIEFjdGl2aXR5ID0gZnVuY3Rpb24oaW1nLCBuYW1lLCBwbGFjZSwga2V5d29yZHMsIHBhcnRpY2lwYW50cywgbXlFdmVudCl7XG4gICAgdGhpcy5pbWcgPSBpbWc7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnBsYWNlID0gcGxhY2U7XG4gICAgdGhpcy5rZXl3b3JkcyA9IGtleXdvcmRzO1xuICAgIHRoaXMucGFydGljaXBhbnRzID0gcGFydGljaXBhbnRzO1xuICAgIHRoaXMubXlFdmVudCA9IG15RXZlbnQ7XG59OyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDUvMTIvMTUuXG4gKi9cbi8qKGZ1bmN0aW9uKCl7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBhY3Rpdml0aWVzU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgZ2V0QWN0aXZpdGllcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIGxvY2FsVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvZGF0YS9hY3Rpdml0aWVzLmpzb25cIjtcbiAgICAgICAgICAgIHZhciB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4bWxIdHRwLm9wZW4oXCJHRVRcIiwgbG9jYWxVcmwsIGZhbHNlKTtcbiAgICAgICAgICAgIHhtbEh0dHAuc2VuZChudWxsKTtcblxuICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xuXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcblxuICAgICAgICAgICAgICAgIHZhciBhcnJBY3Rpdml0aWVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGRhdGFbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0FjdGl2aXR5ID0gbmV3IEFjdGl2aXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0FjdGl2aXR5LmltZyA9IGQuaW1nO1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3Rpdml0eS5uYW1lID0gZC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3Rpdml0eS5wbGFjZSA9IGQucGxhY2U7XG4gICAgICAgICAgICAgICAgICAgIG5ld0FjdGl2aXR5LnBhcnRpY2lwYW50cyA9IGQucGFydGljaXBhbnRzO1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3Rpdml0eS5teUV2ZW50ID0gZC5teUV2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGlpPTA7IGlpPCBkLmtleXdvcmRzLmxlbmd0aDsgaWkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpaSA9PSBkLmtleXdvcmRzLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGQua2V5d29yZHNbaWldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGQua2V5d29yZHNbaWldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gXCIsIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZpdHkua2V5d29yZHMgPSB0ZXh0O1xuICAgICAgICAgICAgICAgICAgICBhcnJBY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJBY3Rpdml0aWVzO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBnZWRlZWx0ZVxuICAgICAgICByZXR1cm57XG5cbiAgICAgICAgICAgIGdldEFjdGl2aXRpZXM6Z2V0QWN0aXZpdGllc1xuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcImFjdGl2aXRpZXNTZXJ2aWNlXCIsIFthY3Rpdml0aWVzU2VydmljZV0pO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF4gZGV6ZSBuYWFtIGJlcGFhbHQgd2Vsa2UgbmFhbSBqZSBub2RpZyBoZWJ0IGluIGplIGNvbnRyb2xsZXIgYWxzIHZlcndpanppbmchXG5cbn0pKCk7Ki8iLCIvKipcbiAqIENyZWF0ZWQgYnkgaW1hbiBvbiAxNS8xMi8xNS5cbiAqL1xuXG4oZnVuY3Rpb24oKXtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIGRiU2VydmljZSA9IGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgICAgIHZhciBnZXRDb2xsZWN0aW9uID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcblxuXG4gICAgICAgICAgICB2YXIgdXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL1wiICsgY29sbGVjdGlvbjtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0QnlJRCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBpZCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGNvbGxlY3Rpb24gKyBcIi9cIiArIGlkO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXREZXRhaWxzVXNlciA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCB1c2VybmFtZSkge1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGNvbGxlY3Rpb24gKyBcIi91c2VyZGV0YWlsL1wiICsgdXNlcm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldEl0ZW0gPSBmdW5jdGlvbihpdGVtKXtcblxuICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9cIiArIGl0ZW07XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvdXNlcicpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldERldGFpbHNBY3Rpdml0eSA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBhY3Rpdml0eW5hbWUpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvXCIgKyBjb2xsZWN0aW9uICsgXCIvYWN0aXZpdHlkZXRhaWwvXCIgKyBhY3Rpdml0eW5hbWU7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldE5vaXNlV29yZHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9kYXRhL25vaXNld29yZHMuanNvblwiO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cblxuICAgICAgICAvL3B1YmxpYyBnZWRlZWx0ZVxuICAgICAgICByZXR1cm57XG5cbiAgICAgICAgICAgIGdldENvbGxlY3Rpb246Z2V0Q29sbGVjdGlvbixcbiAgICAgICAgICAgIGdldEJ5SUQ6Z2V0QnlJRCxcbiAgICAgICAgICAgIGdldEl0ZW06Z2V0SXRlbSxcbiAgICAgICAgICAgIGdldERldGFpbHNVc2VyOiBnZXREZXRhaWxzVXNlcixcbiAgICAgICAgICAgIGdldERldGFpbHNBY3Rpdml0eTogZ2V0RGV0YWlsc0FjdGl2aXR5LFxuICAgICAgICAgICAgZ2V0Tm9pc2VXb3JkczogZ2V0Tm9pc2VXb3Jkc1xuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcImRiU2VydmljZVwiLCBbXCIkaHR0cFwiLCBkYlNlcnZpY2VdKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeIGRlemUgbmFhbSBiZXBhYWx0IHdlbGtlIG5hYW0gamUgbm9kaWcgaGVidCBpbiBqZSBjb250cm9sbGVyIGFscyB2ZXJ3aWp6aW5nIVxuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDUvMTIvMTUuXG4gKi9cbihmdW5jdGlvbigpe1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgbWF0Y2hlc1NlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGdldE1hdGNoZXMgPSBmdW5jdGlvbiAobmFtZVVzZXIpIHtcblxuICAgICAgICAgICAgdmFyIHZhcmlhYmVsVVJMID0gXCJ0b2dldGhlclwiO1xuICAgICAgICAgICAgdmFyIGxvY2FsVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvZGF0YS9tYXRjaGVzLmpzb25cIjtcbiAgICAgICAgICAgIHZhciB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4bWxIdHRwLm9wZW4oXCJHRVRcIiwgbG9jYWxVcmwsIGZhbHNlKTtcbiAgICAgICAgICAgIHhtbEh0dHAuc2VuZChudWxsKTtcblxuICAgICAgICAgICAgaWYoeG1sSHR0cC5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYXJyTWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhcnJNYXRjaFVzZXJzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGFyck1hdGNoSW50ZXJlc3RzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJcIjogZGF0YVtpXS51c2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtYXRjaGVzXCI6ZGF0YVtpXS5tYXRjaGVzXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2gob2JqKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWkgPSAwOyBpaTxhcnIubGVuZ3RoOyBpaSsrKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBhcnJbaWldLnVzZXIuaW5kZXhPZihuYW1lVXNlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyck1hdGNoZXMucHVzaChhcnJbaWldLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJJbmRleDogXCIraW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYXJyKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGFyck1hdGNoZXNbMF0pO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgYXJyTWF0Y2hlc0J5VXNlciA9IGFyck1hdGNoZXNbMF07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkFhbnRhbCBtYXRjaGVzOiBcIiArIGFyck1hdGNoZXNCeVVzZXIubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJNYXRjaGVzQnlVc2VyO1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBmb3IodmFyIGlpaSA9IDA7IGlpaTxhcnJNYXRjaGVzWzBdLmxlbmd0aDsgaWlpKyspe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFVzZXIgPSBhcnJNYXRjaGVzWzBdW2lpaV0udXNlcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoSW50ZXJlc3RzID0gYXJyTWF0Y2hlc1swXVtpaWldLmludGVyZXN0cztcblxuICAgICAgICAgICAgICAgICAgICBhcnJNYXRjaFVzZXJzLnB1c2gobWF0Y2hVc2VyKTtcbiAgICAgICAgICAgICAgICAgICAgYXJyTWF0Y2hJbnRlcmVzdHMucHVzaChtYXRjaEludGVyZXN0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhtYXRjaFVzZXIpO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKG1hdGNoSW50ZXJlc3RzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJNYXRjaFVzZXJzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJNYXRjaEludGVyZXN0cyk7XG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIGdlZGVlbHRlXG4gICAgICAgIHJldHVybntcblxuICAgICAgICAgICAgZ2V0TWF0Y2hlczpnZXRNYXRjaGVzLFxuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcIm1hdGNoZXNTZXJ2aWNlXCIsIFttYXRjaGVzU2VydmljZV0pO1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF4gZGV6ZSBuYWFtIGJlcGFhbHQgd2Vsa2UgbmFhbSBqZSBub2RpZyBoZWJ0IGluIGplIGNvbnRyb2xsZXIgYWxzIHZlcndpanppbmchXG5cbn0pKCk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGltYW4gb24gNS8xMi8xNS5cbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgQWN0aXZpdGllc0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCBkYlNlcnZpY2UsICRodHRwLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgJHJvdXRlKSB7XG4gICAgICAgICRzY29wZS5pbnRlcmVzdGVkQWN0PXRydWU7XG4gICAgICAgICRzY29wZS5uYW1lQnV0dG9uID0gXCJJbnRlcmVzdGVkXCI7XG5cbiAgICAgICAgJHNjb3BlLmdldEFjdGl2aXRpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkYlNlcnZpY2UuZ2V0Q29sbGVjdGlvbignYWN0aXZpdGllcycpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgYXJyVGVtcCA9IHJlc3BvbnNlLmFjdGl2aXRpZWxpc3Q7XG4gICAgICAgICAgICAgICAgdmFyIGFyckFjdHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApLFxuICAgICAgICAgICAgICAgICAgICB0b2RheVNwbGl0ID0gdG9kYXkuc3BsaXQoXCItXCIpLFxuICAgICAgICAgICAgICAgICAgICBzdW1Ub2RheSA9ICB0b2RheVNwbGl0WzBdICsgIHRvZGF5U3BsaXRbMV0gKyAgdG9kYXlTcGxpdFsyXTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyVGVtcC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2dHlEYXRlU3BsaXQgPSBhcnJUZW1wW2ldLnVudGlsRGF0ZS5zdWJzdHJpbmcoMCwxMCkuc3BsaXQoXCItXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VtQWN0aXZpdHkgPSAgYWN0aXZ0eURhdGVTcGxpdFswXSArIGFjdGl2dHlEYXRlU3BsaXRbMV0gKyBhY3RpdnR5RGF0ZVNwbGl0WzJdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHN1bUFjdGl2aXR5ID49IHN1bVRvZGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXJyQWN0cy5wdXNoKGFyclRlbXBbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFyckFjdGl2aXRpZXMgPSBhcnJBY3RzO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH07XG5cbiAgICAgICAgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlQWxsID0gZnVuY3Rpb24oIHRva2VuLCBuZXdUb2tlbiwgaWdub3JlQ2FzZSApIHtcbiAgICAgICAgICAgIHZhciBfdG9rZW47XG4gICAgICAgICAgICB2YXIgc3RyID0gdGhpcyArIFwiXCI7XG4gICAgICAgICAgICB2YXIgaSA9IC0xO1xuXG4gICAgICAgICAgICBpZiAoIHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIiApIHtcblxuICAgICAgICAgICAgICAgIGlmICggaWdub3JlQ2FzZSApIHtcblxuICAgICAgICAgICAgICAgICAgICBfdG9rZW4gPSB0b2tlbi50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gc3RyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiwgaSA+PSAwID8gaSArIG5ld1Rva2VuLmxlbmd0aCA6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZyggMCwgaSApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUb2tlbiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyLnN1YnN0cmluZyggaSArIHRva2VuLmxlbmd0aCApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zcGxpdCggdG9rZW4gKS5qb2luKCBuZXdUb2tlbiApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBpc0luQXJyYXkodmFsdWUsIGFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRLZXl3b3Jkc0Zyb21EZXNjcmlwdGlvbihkZXNjcmlwdGlvbiwgY2FsbGJhY2spIHtcblxuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlQWxsKCcuJywgJycpO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlQWxsKCcsJywgJycpO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlQWxsKCc/JywgJycpO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlQWxsKCchJywgJycpO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlQWxsKCdcIicsICcnKTtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZUFsbChcIidcIiwgJycpO1xuXG4gICAgICAgICAgICB2YXIgd29yZHMgPSBkZXNjcmlwdGlvbi5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICB2YXIga2V5V29yZHMgPSBcIlwiO1xuXG4gICAgICAgICAgICBkYlNlcnZpY2UuZ2V0Tm9pc2VXb3JkcygpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBub2lzZVdvcmRzID0gcmVzcG9uc2Uubm9pc2V3b3JkcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbkFycmF5KHdvcmRzW2ldLnRvTG93ZXJDYXNlKCksIG5vaXNlV29yZHMpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlXb3JkcyArPSB3b3Jkc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVdvcmRzICs9IFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4ga2V5V29yZHM7XG4gICAgICAgICAgICAgICAgaWYoIWtleVdvcmRzLmlzRW1wdHkpe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBrZXlXb3Jkcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soXCJObyBrZXl3b3JkcyBmb3VuZC5cIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRpbWVDb25zaXN0T2YyTnVtYmVycyhudW1iZXIsIGNhbGxiYWNrKXtcbiAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyICsgJyc7XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gb3V0cHV0LnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmKCFudW1iZXIuaXNFbXB0eSl7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbnVtYmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhcIk5vIG51bWJlci5cIiwgbnVsbCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cblxuXG5cbiAgICAgICAgJHNjb3BlLmFkZEFjdGl2aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYWN0aXZpdHlOYW1lID0gdGhpcy5hY3Rpdml0eU5hbWU7XG4gICAgICAgICAgICB2YXIgc3RyZWV0ID0gdGhpcy5zdHJlZXQ7XG4gICAgICAgICAgICB2YXIgbnVtYmVyID0gdGhpcy5udW1iZXI7XG4gICAgICAgICAgICB2YXIgemlwY29kZSA9IHRoaXMuemlwY29kZTtcbiAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMuY29tbWVudDtcbiAgICAgICAgICAgIHZhciBkYXRlRnJvbSA9IHRoaXMuZGF0ZUZyb207XG4gICAgICAgICAgICB2YXIgZGF0ZVVudGlsID0gdGhpcy5kYXRlVW50aWw7XG4gICAgICAgICAgICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB2YXIgc3RhcnRUaW1lSG91ciAgPSB0aGlzLnN0YXJ0VGltZUhvdXI7XG4gICAgICAgICAgICB2YXIgc3RhcnRUaW1lTWluID0gdGhpcy5zdGFydFRpbWVNaW47XG4gICAgICAgICAgICB2YXIgZW5kVGltZUhvdXIgPSB0aGlzLmVuZFRpbWVIb3VyO1xuICAgICAgICAgICAgdmFyIGVuZFRpbWVNaW4gPSB0aGlzLmVuZFRpbWVNaW47XG5cblxuXG4gICAgICAgICAgICBpZigoc3RyZWV0ICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgKG51bWJlciAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgICAgICh6aXBjb2RlICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgKGRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgKGRhdGVGcm9tICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgKGRhdGVVbnRpbCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgICAgICh0aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkpe1xuXG4gICAgICAgICAgICAgICAgaWYoZGF0ZUZyb20gPD0gZGF0ZVVudGlsKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZU1pbiA8IDYwICYmIHN0YXJ0VGltZUhvdXIgPCAyNSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lQ29uc2lzdE9mMk51bWJlcnMoc3RhcnRUaW1lSG91ciwgZnVuY3Rpb24oZXJyb3IsIHN0YXJ0VGltZUhvdXJTdHJpbmcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZUhvdXIgPSBzdGFydFRpbWVIb3VyU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUNvbnNpc3RPZjJOdW1iZXJzKHN0YXJ0VGltZU1pbiwgZnVuY3Rpb24oZXJyb3IsIHN0YXJ0VGltZU1pblN0cmluZyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lTWluID0gc3RhcnRUaW1lTWluU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXJ0VGltZUhvdXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhcnRUaW1lTWluKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZU1pbi5sZW5ndGggPT09IDIgICYmIHN0YXJ0VGltZUhvdXIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJqZSBrb210IGhpZXIgdGVyZWNodFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVuZFRpbWVNaW4gPCA2MCAmJiBlbmRUaW1lSG91ciA8IDI0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUNvbnNpc3RPZjJOdW1iZXJzKGVuZFRpbWVIb3VyLCBmdW5jdGlvbihlcnJvciwgZW5kVGltZUhvdXJTdHJpbmcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZUhvdXIgPSBlbmRUaW1lSG91clN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lQ29uc2lzdE9mMk51bWJlcnMoZW5kVGltZU1pbiwgZnVuY3Rpb24oZXJyb3IsIGVuZFRpbWVNaW5TdHJpbmcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZU1pbiA9IGVuZFRpbWVNaW5TdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnJvcil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVuZFRpbWVIb3VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZW5kVGltZU1pbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kVGltZU1pbi50b1N0cmluZygpLmxlbmd0aCA9PT0gMiAmJiBlbmRUaW1lSG91ci50b1N0cmluZygpLmxlbmd0aCA9PT0gMikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXJ0VGltZUhvdXIgKyBcIjpcIiArIHN0YXJ0VGltZU1pbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0S2V5d29yZHNGcm9tRGVzY3JpcHRpb24oZGVzY3JpcHRpb24sIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXJ0VGltZUhvdXIgKyBcIjpcIiArIHN0YXJ0VGltZU1pbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYWN0aXZpdGllcy9hZGRhY3Rpdml0eVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lU3RhcnQgPSBzdGFydFRpbWVIb3VyICsgXCI6XCIgKyAgc3RhcnRUaW1lTWluO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlRnJvbUZ1bGwgPSBkYXRlRnJvbSArIHRpbWVTdGFydCAgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGVGcm9tRnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRlVW50aWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAucG9zdCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5TmFtZTphY3Rpdml0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlZXQgOiBzdHJlZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXI6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHppcGNvZGU6IHppcGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA6IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZUZyb20gOiBkYXRlRnJvbUZ1bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVW50aWwgOiBkYXRlVW50aWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZyb206IHN0YXJ0VGltZUhvdXIgKyBcIjpcIiArICBzdGFydFRpbWVNaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVVudGlsOiBlbmRUaW1lSG91ciArIFwiOlwiICsgIGVuZFRpbWVNaW5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRBY3Rpdml0aWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldEZvcm0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aChkYXRhLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiRW5kZGF0ZSBpbnB1dCBpcyBub3QgY29ycmVjdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBcIkVuZHRpbWUgaW5wdXQgaXMgbm90IGNvcnJlY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gJ2ZvdXRqZSEhISEgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBcIlN0YXJ0dGltZSBpbnB1dCBpcyBub3QgY29ycmVjdFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGRhdGVGcm9tID4gZGF0ZVVudGlsKXtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gXCJFUlJPUjogRGF0ZSB1bnRpbCBjYW4ndCBiZSBlYXJsaWVyIHRoYW4gZGF0ZSBmcm9tLlwiO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiRVJST1I6IEFsbCBmaWVsZHMgYXJlIHJlcXVpcmVkLjg4ODhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0RGV0YWlsQWN0aXZpdHkgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZGJTZXJ2aWNlLmdldERldGFpbHNBY3Rpdml0eSgnYWN0aXZpdGllcycsICRyb3V0ZVBhcmFtcy5hY3Rpdml0eU5hbWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHkgPSByZXNwb25zZS5hY3Rpdml0eTtcbiAgICAgICAgICAgICAgICBpbml0bWFwKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hcnJEZXRhaWxzQWN0aXZpdHk7XG5cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmludGVyZXN0ZWQgPSBmdW5jdGlvbihhY3Rpdml0eU5hbWUsaW50ZXJlc3RlZFVzZXIsIGNyZWF0ZXJVc2VyKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSUsgQkVOIEdFw49OVEVSRVNTRUVSRCFcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhY3Rpdml0eU5hbWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coaW50ZXJlc3RlZFVzZXIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coY3JlYXRlclVzZXIpO1xuICAgICAgICAgICAgdmFyIHVybCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgaW50ZXJlc3RlZEFjdCA9ICRzY29wZS5pbnRlcmVzdGVkQWN0O1xuICAgICAgICAgICAgaWYoaW50ZXJlc3RlZEFjdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbnRlcmVzdGVkQWN0KTtcblxuICAgICAgICAgICAgICAgIHVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9hY3Rpdml0aWVzL2ludGVyZXN0ZWRcIjtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KHVybCwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eU5hbWU6IGFjdGl2aXR5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RlZFVzZXI6IGludGVyZXN0ZWRVc2VyLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVyVXNlcjogY3JlYXRlclVzZXJcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbnRlcmVzdGVkVXNlciArIFwiIGlzIGdlw69udGVyZXNzZWVyZCBpbiBcIiArIGFjdGl2aXR5TmFtZSArIFwiIGRvb3IgXCIgKyBjcmVhdGVyVXNlcik7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdGVkQWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lQnV0dG9uID0gXCJOb3QgaW50ZXJlc3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBkYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW50ZXJlc3RlZEFjdCk7XG4gICAgICAgICAgICAgICAgdXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2FjdGl2aXRpZXMvZGVsZXRlaW50ZXJlc3RlZFwiO1xuICAgICAgICAgICAgICAgICRodHRwLnBvc3QodXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5TmFtZTogYWN0aXZpdHlOYW1lLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdGVkVXNlcjogaW50ZXJlc3RlZFVzZXIsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZXJVc2VyOiBjcmVhdGVyVXNlclxuICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGludGVyZXN0ZWRVc2VyICsgXCIgaXMgbmlldCBtZWVyIGdlw69udGVyZXNzZWVyZCBpbiBcIiArIGFjdGl2aXR5TmFtZSArIFwiIGRvb3IgXCIgKyBjcmVhdGVyVXNlcik7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdGVkQWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVCdXR0b24gPSBcIkludGVyZXN0ZWRcIjtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBkYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlY2VudEZpcnN0KGEsYikge1xuICAgICAgICAgICAgaWYgKGEudGltZXN0YW1wID4gYi50aW1lc3RhbXApXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKGEudGltZXN0YW1wIDwgYi50aW1lc3RhbXApXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5nZXRNb3N0UmVjZW50QWN0aXZpdGllcyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBkYlNlcnZpY2UuZ2V0Q29sbGVjdGlvbignYWN0aXZpdGllcycpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXG4gICAgICAgICAgICAgICAgdmFyIG51bWJlck9mQWN0aXZpdGllcyA9IDM7XG4gICAgICAgICAgICAgICAgdmFyIGFyclRlbXAgPSByZXNwb25zZS5hY3Rpdml0aWVsaXN0O1xuICAgICAgICAgICAgICAgIHZhciBhcnJBbGxBY3Rpdml0aWVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyclRlbXAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShhcnJUZW1wW2ldLnVudGlsRGF0ZSkuZ2V0VGltZSgpID4gbmV3IERhdGUoKS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyckFsbEFjdGl2aXRpZXMucHVzaChhcnJUZW1wW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFyckFsbEFjdGl2aXRpZXMuc29ydChyZWNlbnRGaXJzdCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYXJyTW9zdFJlY2VudEFjdGl2aXRpZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWk9MDsgaWk8bnVtYmVyT2ZBY3Rpdml0aWVzOyBpaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgYXJyTW9zdFJlY2VudEFjdGl2aXRpZXMucHVzaChhcnJBbGxBY3Rpdml0aWVzW2lpXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlthcnJBbGxBY3Rpdml0aWVzXTogXCIpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYXJyQWxsQWN0aXZpdGllcyk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlthcnJNb3N0UmVjZW50QWN0aXZpdGllc106IFwiKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGFyck1vc3RSZWNlbnRBY3Rpdml0aWVzKTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5hcnJNb3N0UmVjZW50QWN0aXZpdGllcyA9IGFyck1vc3RSZWNlbnRBY3Rpdml0aWVzO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0bWFwKCkge1xuXG4gICAgICAgICAgICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcbiAgICAgICAgICAgICAgICB6b29tOiAxMixcbiAgICAgICAgICAgICAgICBjZW50ZXI6IHtsYXQ6IDUwLjgxOTQ4OTQsIGxuZzogMy4yNTc3MDc2fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcblxuICAgICAgICAgICAgZ2VvY29kZUFkZHJlc3MoZ2VvY29kZXIsIG1hcCk7XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2VvY29kZUFkZHJlc3MoZ2VvY29kZXIsIHJlc3VsdHNNYXApIHtcbiAgICAgICAgICAgIHZhciBzdHJlZXQgPSAkc2NvcGUuYXJyRGV0YWlsc0FjdGl2aXR5LnN0cmVldDtcbiAgICAgICAgICAgIHZhciBudW1iZXIgPSAkc2NvcGUuYXJyRGV0YWlsc0FjdGl2aXR5Lm51bWJlcjtcbiAgICAgICAgICAgIHZhciB6aXBjb2RlID0gJHNjb3BlLmFyckRldGFpbHNBY3Rpdml0eS56aXBjb2RlO1xuXG4gICAgICAgICAgICB2YXIgYWRkcmVzcyA9IHN0cmVldCArIFwiIFwiICsgbnVtYmVyICsgXCIsIFwiICsgemlwY29kZTsgLy9oaWVyIGFkZHJlc3MgdWl0IGRiIGluc3RvcHBlblxuXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsnYWRkcmVzcyc6IGFkZHJlc3N9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c01hcC5zZXRDZW50ZXIocmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogcmVzdWx0c01hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1hcmtlcik7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgnR2VvY29kZSB3YXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uOiAnICsgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpe1xuICAgICAgICAgICAgdmFyIGZybSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdBY3Rpdml0eUZvcm0nKVswXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdqZSBrb210IGluIGRlIHJlc2V0Zm9ybScpO1xuICAgICAgICAgICAgZnJtLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkFjdGl2aXRpZXNDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcImRiU2VydmljZVwiLCBcIiRodHRwXCIsXCIkbG9jYXRpb25cIiwgXCIkcm91dGVQYXJhbXNcIixcImZpbGVVcGxvYWRcIiwgQWN0aXZpdGllc0NvbnRyb2xsZXJdKTtcblxuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDUvMTIvMTUuXG4gKi9cblxuKGZ1bmN0aW9uKCl7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBNYXRjaGVzQ29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgbWF0Y2hlc1NlcnZpY2UpIHtcblxuICAgICAgICAkc2NvcGUuc2hvd01hdGNoZXMgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICB2YXIgbmFtZVVzZXIgPSBcIkx1bmFcIjtcblxuICAgICAgICAgICAgdmFyIGFyck1hdGNoZXNCeVVzZXIgPSBtYXRjaGVzU2VydmljZS5nZXRNYXRjaGVzKG5hbWVVc2VyKTtcblxuICAgICAgICAgICAgJHNjb3BlLmFhbnRhbE1hdGNoZXMgPSBhcnJNYXRjaGVzQnlVc2VyLmxlbmd0aDtcblxuICAgICAgICAgICAgJHNjb3BlLmFyck1hdGNoZXMgPSBhcnJNYXRjaGVzQnlVc2VyO1xuXG4gICAgICAgICAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxhcnJNYXRjaGVzQnlVc2VyLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gYXJyTWF0Y2hlc0J5VXNlcltpXS5pbnRlcmVzdHMudG9TdHJpbmcoKS5yZXBsYWNlKFwiICxcIiwgXCIgXCIpO1xuICAgICAgICAgICAgICAgIGFyck1hdGNoZXNCeVVzZXJbaV0uaW50ZXJlc3RzID0gdGV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTWF0Y2hlc0NvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwibWF0Y2hlc1NlcnZpY2VcIiwgTWF0Y2hlc0NvbnRyb2xsZXJdKTtcblxufSkoKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgaW1hbiBvbiAyMC8xMi8xNS5cbiAqL1xuXG5cbihmdW5jdGlvbigpe1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgUHJvZmlsZXNDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMsIGRiU2VydmljZSkge1xuXG4gICAgICAgIHZhciBjbGlja3NPbkJ0biA9IDA7XG5cbiAgICAgICAgJHNjb3BlLnNob3dEaXYgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlciA9IHtzaG93RmlsdGVyOnRydWV9O1xuICAgICAgICAgICAgY2xpY2tzT25CdG4rKztcblxuICAgICAgICAgICAgaWYoY2xpY2tzT25CdG4gPiAxKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyID0ge3Nob3dGaWx0ZXI6ZmFsc2V9O1xuICAgICAgICAgICAgICAgIGNsaWNrc09uQnRuID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaGlkZURpdiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGlja3NPbkJ0biA9IDA7XG4gICAgICAgICAgICAkc2NvcGUuZmlsdGVyID0ge3Nob3dGaWx0ZXI6ZmFsc2V9O1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zaG93UHJvZmlsZXMgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICB2YXIgdXNlcm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgaWYoJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYlNlcnZpY2UuZ2V0Q29sbGVjdGlvbigndXNlcnMnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblxuICAgICAgICAgICAgICAgIHZhciBhcnJQcm9maWxlcyA9IHJlc3BvbnNlLnVzZXJsaXN0O1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcnJQcm9maWxlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGFyclByb2ZpbGVzW2ldLnVzZXJuYW1lID09PSB1c2VybmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyUHJvZmlsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWkgPSAwOyBpaSA8IGFyclByb2ZpbGVzLmxlbmd0aDsgaWkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGFyclByb2ZpbGVzW2lpXS51c2VybmFtZSA9PT0gXCJhZG1pblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJQcm9maWxlcy5zcGxpY2UoaWksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5hcnJQcm9maWxlcyA9IGFyclByb2ZpbGVzO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zb3J0UHJvcGVydHkgPSBcInRpdGxlXCI7XG4gICAgICAgICRzY29wZS5maWx0ZXJRdWVyeSA9IFwiXCI7XG4gICAgICAgICRzY29wZS5maWx0ZXJJbWFnZXMgPSBmdW5jdGlvbihpKXtcbiAgICAgICAgICAgIGlmKCRzY29wZS5maWx0ZXJRdWVyeSA9PT0gXCJcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgZWxzZSBpZihpLnVzZXJuYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigkc2NvcGUuZmlsdGVyUXVlcnkudG9Mb2NhbGVMb3dlckNhc2UoKSkgPj0gMCl7XG4gICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIGVsc2UgaWYoaS5zZXggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbHNlIGlmKCRzY29wZS5maWx0ZXJRdWVyeS50b0xvd2VyQ2FzZSgpID09IGkuc2V4LnRvTG93ZXJDYXNlKCkpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbHNlIGlmKCRzY29wZS5maWx0ZXJRdWVyeS50b0xvd2VyQ2FzZSgpID09PSBcIm5vZmlsdGVyXCIpe1xuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJRdWVyeSA9IFwiXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByb2ZpbGVzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiZGJTZXJ2aWNlXCIsIFByb2ZpbGVzQ29udHJvbGxlcl0pO1xuXG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBpbWFuIG9uIDIwLzEyLzE1LlxuICovXG4oZnVuY3Rpb24oKXtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFVzZXJzQ29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgJHJvdXRlUGFyYW1zLCBkYlNlcnZpY2UpIHtcblxuICAgICAgICAkc2NvcGUuZ2V0VXNlcnMgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICBkYlNlcnZpY2UuZ2V0Q29sbGVjdGlvbigndXNlcnMnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICRzY29wZS5hcnJVc2VycyA9IHJlc3BvbnNlLnVzZXJsaXN0O1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5nZXREZXRhaWxVc2VyID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgZGJTZXJ2aWNlLmdldERldGFpbHNVc2VyKCd1c2VycycsICRyb3V0ZVBhcmFtcy51c2VybmFtZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFyckRldGFpbHMgPSByZXNwb25zZS5hY3Rpdml0eTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5nZXRVc2VyQnlJRCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIGRiU2VydmljZS5nZXRJdGVtKCd1c2VyJykudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJQcm9maWxlID0gcmVzcG9uc2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cblxuICAgIH07XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVXNlcnNDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcImRiU2VydmljZVwiLCBVc2Vyc0NvbnRyb2xsZXJdKTtcblxufSkoKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgTWFydGhlIG9uIDMwLzEyLzE1LlxuICovXG5cblxuKGZ1bmN0aW9uKCl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cblxuXG52YXIgbG9jYXRpb25Db250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlKSB7XG5cbiAgICBjb25zb2xlLmxvZygnVEVTVEVTVCcpO1xuXG4gICAgJHNjb3BlLmluaXRtYXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG4gICAgICAgICAgICB6b29tOiA4LFxuICAgICAgICAgICAgY2VudGVyOiB7bGF0OiA1MC44MTk0ODk0LCBsbmc6IDMuMjU3NzA3Nn1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpO1xuXG4gICAgICAgIGdlb2NvZGVBZGRyZXNzKGdlb2NvZGVyLCBtYXApO1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdlb2NvZGVBZGRyZXNzKGdlb2NvZGVyLCByZXN1bHRzTWFwKSB7XG4gICAgICAgIHZhciBhZGRyZXNzID0gXCJHcmFhZiBLYXJlbCBkZSBHb2VkZWxhYW4gNSwgS29ydHJpamtcIjsgLy9oaWVyIGFkZHJlc3MgdWl0IGRiIGluc3RvcHBlblxuXG4gICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeydhZGRyZXNzJzogYWRkcmVzc30sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0c01hcC5zZXRDZW50ZXIocmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgICAgICBtYXA6IHJlc3VsdHNNYXAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtYXJrZXIpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsZXJ0KCdHZW9jb2RlIHdhcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246ICcgKyBzdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImxvY2F0aW9uQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgbG9jYXRpb25Db250cm9sbGVyXSk7XG59KSgpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBNYXJ0aGUgb24gMTUvMTIvMTUuXG4gKi9cbihmdW5jdGlvbigpe1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBzZWxlY3RlZEludGVyZXN0ID0gW107XG5cbiAgICB2YXIgbG9naW5Db250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbikge1xuXG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2xvZ2luJywge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKGRhdGEucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5pbnRlcmVzdHMgPSBbJ0phenonLCAnSGlwaG9wJywgJ05ldyB3YXZlJywgJ1RyYXZlbGluZycsJ1BhcnR5J107XG4gICAgICAgICRzY29wZS5sc3QgPSBbXTtcbiAgICAgICAgJHNjb3BlLmNoYW5nZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkc2NvcGUubHN0LnB1c2goJzInKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5sc3QpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuc3RhdGVDaGFuZ2VkID0gZnVuY3Rpb24gKHFJZCkge1xuICAgICAgICAgICAgLy9pZighJHNjb3BlLmludGVyZXN0c1txSWRdKXsgLy9JZiBpdCBpcyBjaGVja2VkXG4gICAgICAgICAgICBpZihzZWxlY3RlZEludGVyZXN0LmluZGV4T2YocUlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdhcnROciBhbHJlYWR5IGV4aXN0cyEgREVMRVRFJyk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2VsZWN0ZWRJbnRlcmVzdC5pbmRleE9mKHFJZCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbnRlcmVzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkSW50ZXJlc3QucHVzaChxSWQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkSW50ZXJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSRUdJU1RFUlwiKTtcblxuXG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvcmVnaXN0ZXInLCB7XG4gICAgICAgICAgICAgICAgZmlyc3RuYW1lOiB0aGlzLmZpcnN0bmFtZSxcbiAgICAgICAgICAgICAgICBsYXN0bmFtZSA6IHRoaXMubGFzdG5hbWUsXG4gICAgICAgICAgICAgICAgLy9lbWFpbCA6IHRoaXMuZW1haWwsKi9cbiAgICAgICAgICAgICAgICB1c2VybmFtZSA6IHRoaXMudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQgOiB0aGlzLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHppcGNvZGU6IHRoaXMuemlwY29kZSxcbiAgICAgICAgICAgICAgICBiaXJ0aGRhdGUgOiB0aGlzLmJpcnRoZGF0ZSxcbiAgICAgICAgICAgICAgICBzZXggOiB0aGlzLnNleCxcbiAgICAgICAgICAgICAgICBiaW9ncmFwaHkgOiB0aGlzLmJpb2dyYXBoeSxcbiAgICAgICAgICAgICAgICBpbnRlcmVzdHM6c2VsZWN0ZWRJbnRlcmVzdFxuXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChkYXRhLnJlZGlyZWN0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBzaWdudXBDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IFsnJ107XG4gICAgICAgICRzY29wZS5uZXdDYXRlZ29yeSA9IFwiXCI7XG4gICAgICAgICRzY29wZS5zYXZlQ2F0ZWdvcnkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgfTtcblxuICAgIH07XG5cbiAgICB2YXIgZWRpdGFibGVDaGVja2JveENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS5jYXRlZ29yeSA9IFwiXCI7XG4gICAgICAgICRzY29wZS5zaG93TGFiZWwgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnNob3dUZXh0Ym94ID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnNhdmVDYXRlZ29yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xhYmVsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1RleHRib3ggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TGFiZWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1RleHRib3ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuZWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5zaG93TGFiZWwgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5zaG93VGV4dGJveCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5pc0NoZWNrZWQgPSBmdW5jdGlvbihxSWQpe1xuICAgICAgICAgICAgY29uc29sZS5sb2cocUlkKTtcbiAgICAgICAgICAgIGlmKHFJZCE9PSAgXCIgXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbnRlcmVzdC5pbmRleE9mKHFJZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHNlbGVjdGVkSW50ZXJlc3QuaW5kZXhPZihxSWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbnRlcmVzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRJbnRlcmVzdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEludGVyZXN0LnB1c2gocUlkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VsZWN0ZWRJbnRlcmVzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuc3RhdGVDaGFuZ2VkID0gZnVuY3Rpb24gKHFJZCkge1xuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIilcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJsb2dpbkNvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwiJGh0dHBcIiwgXCIkbG9jYXRpb25cIiwgbG9naW5Db250cm9sbGVyXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJzaWdudXBDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBzaWdudXBDb250cm9sbGVyXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJlZGl0YWJsZUNoZWNrYm94Q29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgZWRpdGFibGVDaGVja2JveENvbnRyb2xsZXJdKTtcbn0pKCk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IE5pa2l0YSBvbiAyMS8xMi8yMDE1LlxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLyp2YXIgc2lnbnVwQ29udHJvbGxlciA9IGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSBbJyddO1xuICAgICAgICAkc2NvcGUubmV3Q2F0ZWdvcnkgPSBcIlwiO1xuICAgICAgICAkc2NvcGUuc2F2ZUNhdGVnb3J5ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIH07XG5cbiAgICB9O1xuXG4gICAgdmFyIGVkaXRhYmxlQ2hlY2tib3hDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUuY2F0ZWdvcnkgPSBcIlwiO1xuICAgICAgICAkc2NvcGUuc2hvd0xhYmVsID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5zaG93VGV4dGJveCA9IHRydWU7XG4gICAgICAgICRzY29wZS5zYXZlQ2F0ZWdvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMYWJlbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dUZXh0Ym94ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xhYmVsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dUZXh0Ym94ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmVkaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2hvd0xhYmVsID0gZmFsc2U7XG4gICAgICAgICAgICAkc2NvcGUuc2hvd1RleHRib3ggPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgfTtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKVxuICAgICAgICAuY29udHJvbGxlcihcInNpZ251cENvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIHNpZ251cENvbnRyb2xsZXJdKVxuICAgICAgICAuY29udHJvbGxlcihcImVkaXRhYmxlQ2hlY2tib3hDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBlZGl0YWJsZUNoZWNrYm94Q29udHJvbGxlcl0pOyovXG5cblxufSkoKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgTWFydGhlIG9uIDE2LzEyLzE1LlxuICovXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIHVzZXJDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGh0dHAsICRsb2NhdGlvbikge1xuICAgICAgICAkaHR0cC5nZXQoJy91c2VyJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUudXNlciA9IGRhdGE7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBkYXRhO1xuXG4gICAgICAgICAgICBpZihkYXRhLnVzZXJuYW1lID09ICdhZG1pbicpe1xuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0ge2lzQXV0aDogdHJ1ZSwgaXNBZG1pbiA6IHRydWV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihkYXRhLnVzZXJuYW1lICE9ICdhZG1pbicgJiYgZGF0YS51c2VybmFtZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IHtpc0F1dGg6IHRydWUsIGlzQWRtaW4gOiBmYWxzZX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGRhdGEudXNlcm5hbWUgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSB7aXNBdXRoOiBmYWxzZSwgaXNBZG1pbiA6IGZhbHNlfTtcblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvKiRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRodHRwLmdldCgnL2xvZ291dCcpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChkYXRhLnJlZGlyZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9OyovXG4gICAgfTtcblxuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcInVzZXJDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgXCIkaHR0cFwiLCBcIiRsb2NhdGlvblwiLCB1c2VyQ29udHJvbGxlcl0pO1xufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
